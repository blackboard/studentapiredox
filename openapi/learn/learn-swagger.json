{
  "swagger": "2.0",
  "info": {
    "version": "3900.62.0",
    "title": "Learn APIs"
  },
  "host": "localhost",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "basic": {
      "description": "The application key and secret, encoded using RFC 2617 Basic authentication.",
      "type": "basic"
    },
    "bearer": {
      "description": "OAuth2 bearer token, obtained by sending a client_credentials grant request to /learn/api/public/v1/oauth2/token",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ],
  "paths": {
    "/learn/api/public/v1/oauth2/authorizationcode": {
      "get": {
        "tags": [
          "oauth"
        ],
        "summary": "Authorization Code",
        "description": "Requests an OAuth 2 authorization code. Use of PKCE standard is optional, but highly recommended.\n\n**Since**: 3200.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/OAuth2AuthorizationCodeRequestParam.redirect_uri"
          },
          {
            "$ref": "#/parameters/OAuth2AuthorizationCodeRequestParam.response_type"
          },
          {
            "$ref": "#/parameters/OAuth2AuthorizationCodeRequestParam.client_id"
          },
          {
            "$ref": "#/parameters/OAuth2AuthorizationCodeRequestParam.scope"
          },
          {
            "$ref": "#/parameters/OAuth2AuthorizationCodeRequestParam.state"
          },
          {
            "name": "code_challenge",
            "in": "query",
            "description": "A code challenge to verify credentials along with the granted authorization code. It is used with the PKCE standard.\n\n**Since**: 3700.4.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "code_challenge_method",
            "in": "query",
            "description": "This is the method used to verify the code challenge using the PKCE standard. Blackboard only supports s256 as the code challenge method.\n\n**Since**: 3700.4.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "one_time_session_token",
            "in": "query",
            "description": "Token used to retrieve the session that generated this Oauth2 Code request. Used when session cookies are not sent due to privacy settings of the browser.\n\n**Since**: 3900.13.0",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/learn/api/public/v1/oauth2/token": {
      "post": {
        "tags": [
          "oauth"
        ],
        "summary": "Request Token",
        "description": "Requests an OAuth 2 access token.\n\n**Since**: 2015.11.0",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/OAuth2AccessTokenRequestParam.grant_type"
          },
          {
            "$ref": "#/parameters/OAuth2AccessTokenRequestParam.code"
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "The redirectUri to send the end user to once an access token response is made in Oauth2 Authorization Code Workflow\n\n**Since**: 3200.7.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "refresh_token",
            "in": "query",
            "description": "The refresh token granted for use by an application in Oauth2 Refresh Token Workflow\n\n**Since**: 3200.7.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "code_verifier",
            "in": "query",
            "description": "The code_verifier to be passed along with authorization code if PKCE standard was used to grant the authorization code.\n\n**Since**: 3700.4.0",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OAuth2AccessToken"
            }
          },
          "400": {
            "description": "Invalid access token request.",
            "schema": {
              "$ref": "#/definitions/OAuth2Error"
            }
          },
          "401": {
            "description": "Invalid client credentials, or no access granted to this Learn server.",
            "schema": {
              "$ref": "#/definitions/OAuth2Error"
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/learn/api/public/v1/oauth2/tokeninfo": {
      "get": {
        "tags": [
          "oauth"
        ],
        "summary": "Get Token Info",
        "description": "Requests an OAuth 2 access token info.\n\n**Since**: 3700.6.0",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "access_token",
            "in": "query",
            "description": "The application key and secret, encoded using RFC 2617 Basic authentication.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OAuth2AccessTokenInfo"
            }
          },
          "400": {
            "description": "Invalid access token request.",
            "schema": {
              "$ref": "#/definitions/OAuth2Error"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/adaptiveRelease/rules": {
      "get": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Get Rules",
        "description": "Get all the adaptive release rules associated with the given content in the specified course. Users with all the following entitlements may access this resource:\n\n- course.content.VIEW\n- course.adaptiverelease.VIEW\n\n**Since**: 3900.23.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"title(desc)\" Supported fields are:\n\n- id\n- title\n\n**Since**: 3900.23.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AdaptiveReleaseRule"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Create Rule",
        "description": "Create a new adaptive release rule with the given title. Users with all the following entitlements may access this resource:\n\n- course.content.availability.MODIFY\n- course.adaptiverelease.CREATE\n\n**Since**: 3900.23.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "name": "courseId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "requestBody",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title given to the adaptive release rule",
                  "maxLength": 100
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AdaptiveReleaseRule"
            }
          },
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Cannot create multiple instances of the specified resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/adaptiveRelease/rules/{ruleId}": {
      "get": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Get Rule",
        "description": "Get the adaptive release rule associated with the given content in the specified course corresponding to the rule id. Users with all the following entitlements may access this resource:\n\n- course.content.VIEW\n- course.adaptiverelease.VIEW\n\n**Since**: 3900.23.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AdaptiveReleaseRule"
            }
          },
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Delete Rule",
        "description": "Delete an adaptive release rule. Users with all the following entitlements may access this resource:\n\n- course.content.availability.MODIFY\n- course.adaptiverelease.DELETE\n\n**Since**: 3900.28.0",
        "parameters": [
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Update Rule",
        "description": "Updates an adaptive release rule. Users with all the following entitlements may update this resource:\n\n- course.content.availability.MODIFY\n- course.adaptiverelease.MODIFY\nThe requesting user must also be enroled in the course, or have the system.course.MODIFY entitlement in order to update adaptive release rules.\n\n**Since**: 3900.28.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "in": "body",
            "name": "requestBody",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title given to the adaptive release rule",
                  "maxLength": 100
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AdaptiveReleaseRule"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/adaptiveRelease/rules/{ruleId}/criteria": {
      "get": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Get Criteria",
        "description": "Get the criteria list from the adaptive release rule associated with the given content in the specified course corresponding to the rule id Users with all of the following entitlements may access this resource:\n\n- course.content.VIEW\n- course.adaptiverelease.VIEW\nNote: ACL criteria is not fully supported by this API.\n\n**Since**: 3900.23.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"title(desc)\" Supported fields are:\n\n- id\n\n**Since**: 3900.23.0",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AdaptiveReleaseRuleCriteria"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Create Adaptive Release Rule Criteria",
        "description": "Create a new adaptive release rule criteria. Users with the following entitlements may create resources. For each criteria type the corresponding entitlement is checked:\n\n- course.adaptiverelease.CREATE\n- course.content.availability.MODIFY\n- course.adaptiverelease.acl.CREATE\n- course.adaptiverelease.dates.CREATE\n- course.adaptiverelease.performance.CREATE\nNote: ACL criteria is not fully supported by this API.\n\n**Since**: 3900.23.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "in": "body",
            "name": "criteria",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AdaptiveReleaseRuleCriteria"
            }
          },
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Cannot create multiple instances of the specified resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/adaptiveRelease/rules/{ruleId}/criteria/{criterionId}": {
      "get": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Get Adaptive Release Rule Criterion",
        "description": "Get a single criterion by the specified Id, from the adaptive release rule associated to the given content Users with all of the following entitlements may access this resource:\n\n- course.content.VIEW\n- course.adaptiverelease.VIEW\nNote: ACL criteria is not fully supported by this API.\n\n**Since**: 3900.23.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "$ref": "#/parameters/CriterionIdParam.criterionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AdaptiveReleaseRuleCriteria"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Delete Adaptive Release Rule Criterion",
        "description": "Delete a single criterion by the specified Id, from the adaptive release rule associated to the given content. Users with the following entitlements may delete the resource:\n\n- system.course.MODIFY\n- course.adaptiverelease.DELETE\n- course.content.availability.MODIFY\nUser may need one of the following entitlements depending on the criterion being deleted:\n\n- course.adaptiverelease.acl.DELETE\n- course.adaptiverelease.dates.DELETE\n- course.adaptiverelease.performance.DELETE\n\n**Since**: 3900.28.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "$ref": "#/parameters/CriterionIdParam.criterionId"
          }
        ],
        "responses": {
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Update Adaptive Release Rule Criterion",
        "description": "Update a single criterion by the specified Id, from the adaptive release rule associated to the given content. Users with the following entitlements may update the resource:\n\n- system.course.MODIFY\n- course.adaptiverelease.MODIFY\n- course.content.availability.MODIFY\nUser may need one of the following entitlements depending on the criterion being updated:\n\n- course.adaptiverelease.acl.MODIFY\n- course.adaptiverelease.dates.MODIFY\n- course.adaptiverelease.performance.MODIFY\nFor updating criteria of type blackboard.data.content.avlrule.GradeCompletedCriteria, user may need any one of the following entitlements:\n\n- course.gradebook-metadata.VIEW\n- course.gradebook.MODIFY\nDateRange and DateRange criteria will behave differently if any of the range defining values are set to null, explicitly. For GradeRange criteria:\n\n- If maxScore is set to null, it will be understood as 'minScore or higher'.\n- minScore cannot be set to null, regardless of maxScore's value.\nFor DateRange criteria:\n\n- If startDate is set to null, it will be understood as 'before endDate'.\n- If endDate is set to null, it will be understood as 'after startDate'.\n- At least one date must be valid.\n\n**Since**: 3900.28.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "$ref": "#/parameters/CriterionIdParam.criterionId"
          },
          {
            "in": "body",
            "name": "criteriaTOPubV1",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AdaptiveReleaseRuleCriteria"
            }
          },
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Cannot create multiple instances of the specified resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/adaptiveRelease/rules/{ruleId}/criteria/{criterionId}/groups": {
      "get": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Get Adaptive Release ACL Group Predicates",
        "description": "Retrieve the list of groups included in the specified Membership criterion. Users with all the following entitlements may access this resource:\n\n- course.content.VIEW\n- course.adaptiverelease.VIEW\nThe requesting user must also be enroled in the course, or have the system.course.MODIFY entitlement.\n\n**Since**: 3900.32.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "$ref": "#/parameters/CriterionIdParam.criterionId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"groupId(desc)\" Supported fields are:\n\n- groupId\n\n**Since**: 3900.32.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AdaptiveReleaseACLGroupPredicate"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Set Group Predicate List",
        "description": "Sets the list of group predicates associated with this criterion. The list must not exceed a size of 100. Groups not included in this list will be removed. Groups which are in the list and already associated will remain unchanged. A new association will be created for Groups which are in this list but not associated with the criterion. Users with all the following entitlements may access this resource:\n\n- course.adaptiverelease.acl.modify\nNote: The specified criterion must be of type Memberships.\n\n**Since**: 3900.34.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "$ref": "#/parameters/CriterionIdParam.criterionId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "AdaptiveReleaseACLGroupPredicate",
                "properties": {
                  "groupId": {
                    "type": "string",
                    "description": "The Group ID."
                  }
                },
                "required": [
                  "groupId"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AdaptiveReleaseACLGroupPredicate"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/adaptiveRelease/rules/{ruleId}/criteria/{criterionId}/groups/{groupId}": {
      "put": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Create Group Predicate",
        "description": "Create an association between the specified group and Membership criterion. A single criterion can hold up to a maximum of 100 group associations. Users with all the following entitlements may access this resource:\n\n- course.adaptiverelease.acl.modify\nNote: The specified criterion must be of type Memberships.\n\n**Since**: 3900.32.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "$ref": "#/parameters/CriterionIdParam.criterionId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AdaptiveReleaseACLGroupPredicate"
            }
          },
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "The group is already associated to the criterion",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Delete Group Predicate",
        "description": "Delete the association between the specified group and Membership criterion. Users with all the following entitlements may access this resource:\n\n- course.adaptiverelease.acl.modify\nNote: The specified criterion must be of type Memberships.\n\n**Since**: 3900.32.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "$ref": "#/parameters/CriterionIdParam.criterionId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          }
        ],
        "responses": {
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/adaptiveRelease/rules/{ruleId}/criteria/{criterionId}/users": {
      "get": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Get Adaptive Release ACL User Predicates",
        "description": "Retrieve a list of users who are included in the specified Membership criterion. Users with all the following entitlements may access this resource:\n\n- course.content.VIEW\n- course.adaptiverelease.VIEW\nThe requesting user must also be enroled in the course, or have the system.course.MODIFY entitlement.\n\n**Since**: 3900.32.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "$ref": "#/parameters/CriterionIdParam.criterionId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"userId(desc)\" Supported fields are:\n\n- userId\n\n**Since**: 3900.32.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AdaptiveReleaseACLUserPredicate"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Set Adaptive Release ACL Users Predicates List",
        "description": "Sets the list of user predicates associated with the specified criterion. Users not included in this list will be removed. Users which are in this list and associated with the criterion will remain unchanged. Users which are in this list but not associated with the criterion will be added. Users with all the following entitlements may use this endpoint:\n\n- course.adaptiverelease.acl.modify\nThe specified users must be enroled in the course with a role that is neither \"Guest\" nor treated as \"Instructor\". The requesting user must also be enroled in the course, or have the system.course.MODIFY entitlement.\n\n**Since**: 3900.34.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "$ref": "#/parameters/CriterionIdParam.criterionId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "AdaptiveReleaseACLUserPredicate",
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "The User ID."
                  }
                },
                "required": [
                  "userId"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AdaptiveReleaseACLUserPredicate"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Cannot create multiple instances of the specified resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/adaptiveRelease/rules/{ruleId}/criteria/{criterionId}/users/{userId}": {
      "put": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Create Adaptive Release ACL User Predicate",
        "description": "Create an association between the specified user and Membership criterion. A single criterion can hold up to a maximum of 100 user associations. Users with all the following entitlements may access this resource:\n\n- course.adaptiverelease.acl.modify\nThe specified user must be enroled in the course with a role that is neither \"Guest\" nor treated as \"Instructor\". The requesting user must also be enroled in the course, or have the system.course.MODIFY entitlement.\n\n**Since**: 3900.32.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "$ref": "#/parameters/CriterionIdParam.criterionId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AdaptiveReleaseACLUserPredicate"
            }
          },
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Cannot create multiple instances of the specified resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "adaptive release"
        ],
        "summary": "Delete ACL User Predicate",
        "description": "Delete association between user and Membership criterion. The following entitlements are required\n\n- course.adaptiverelease.acl.modify\n\n**Since**: 3900.32.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RuleIdParam.ruleId"
          },
          {
            "$ref": "#/parameters/CriterionIdParam.criterionId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          }
        ],
        "responses": {
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/announcements": {
      "get": {
        "tags": [
          "announcements"
        ],
        "summary": "Get Announcements",
        "description": "Return a list of System Announcements. Users with the 'system.announcements.VIEW' entitlement can view 'available' System Announcements. Users with the 'system.announcements.admin.VIEW' entitlement can view 'available' & 'unavailable' System Announcements.\n\n**Since**: 3100.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Announcement"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "announcements"
        ],
        "summary": "Create Announcement",
        "description": "Create a System Announcement. Users with the 'system.announcements.CREATE' entitlement can create System Announcements.\n\n**Since**: 3100.7.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of this System Announcement."
                },
                "body": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The message body of the System Announcement. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the System Announcement.",
                  "title": "Availability",
                  "properties": {
                    "duration": {
                      "type": "object",
                      "description": "Duration indicates when the System Announcement is Available based on whether it is Permanent or if the date/time of the request falls within its Start & End dates.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Indicates whether this System Announcement is always displayed (Permanent) or if it is shown only between the Start and End dates (Restricted).\n\n\n| Type      | Description\n | --------- | --------- |\n| Permanent | The Announcement will always be displayed. |\n| Restricted | The Announcement will start being displayed on Duration.Start and stop being displayed on Duration.End |\n",
                          "enum": [
                            "Permanent",
                            "Restricted"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this Announcement starts being Available."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this Announcement stops being Available."
                        }
                      }
                    }
                  }
                },
                "showAtLogin": {
                  "type": "boolean",
                  "description": "Whether this System Announcement should be displayed on the login page."
                },
                "showInCourses": {
                  "type": "boolean",
                  "description": "Whether this System Announcement should be displayed on courses."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to create announcements",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/announcements/{announcementId}": {
      "get": {
        "tags": [
          "announcements"
        ],
        "summary": "Get Announcement",
        "description": "Get a System Announcement. Users with the 'system.announcements.VIEW' entitlement can view 'available' System Announcements. Users with the 'system.announcements.admin.VIEW' entitlement can view 'available' & 'unavailable' System Announcements.\n\n**Since**: 3100.7.0",
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          },
          "403": {
            "description": "The currently authenticated user has insufficient privileges to update an announcement",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Announcement cannot be found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "announcements"
        ],
        "summary": "Delete Announcement",
        "description": "Delete a System Announcement. Users with the 'system.announcements.DELETE' entitlement can delete System Announcements.\n\n**Since**: 3100.7.0",
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "400": {
            "description": "An error occurred while deleting an announcement",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The currently authenticated user has insufficient privileges to delete an announcement",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Announcement cannot be found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "announcements"
        ],
        "summary": "Update Announcement",
        "description": "Update a System Announcement. Users with the 'system.announcements.MODIFY' entitlement can update System Announcements.\n\n**Since**: 3100.7.0",
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of this System Announcement."
                },
                "body": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The message body of the System Announcement. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the System Announcement.",
                  "title": "Availability",
                  "properties": {
                    "duration": {
                      "type": "object",
                      "description": "Duration indicates when the System Announcement is Available based on whether it is Permanent or if the date/time of the request falls within its Start & End dates.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Indicates whether this System Announcement is always displayed (Permanent) or if it is shown only between the Start and End dates (Restricted).\n\n\n| Type      | Description\n | --------- | --------- |\n| Permanent | The Announcement will always be displayed. |\n| Restricted | The Announcement will start being displayed on Duration.Start and stop being displayed on Duration.End |\n",
                          "enum": [
                            "Permanent",
                            "Restricted"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this Announcement starts being Available."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this Announcement stops being Available."
                        }
                      }
                    }
                  }
                },
                "showAtLogin": {
                  "type": "boolean",
                  "description": "Whether this System Announcement should be displayed on the login page."
                },
                "showInCourses": {
                  "type": "boolean",
                  "description": "Whether this System Announcement should be displayed on courses."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          },
          "400": {
            "description": "Invalid request data found while updating an announcement",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The currently authenticated user has insufficient privileges to update an announcement",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Announcement cannot be found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/attemptReceipts/{attemptReceiptId}": {
      "get": {
        "tags": [
          "attempt receipt"
        ],
        "summary": "Get Attempt Receipt",
        "description": "Get the attempt receipt associated with the @param attemptReceiptIdParam\n\nUsers with all the following entitlements may access this resource:\n\n- GradebookEntitlement.ViewAttempts\n\n**Since**: 3900.37.0",
        "parameters": [
          {
            "name": "attemptReceiptId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttemptReceipt"
            }
          },
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/meetings": {
      "get": {
        "tags": [
          "attendance"
        ],
        "summary": "Get Course Meetings",
        "description": "Returns a list of course meetings for a given course id.\n\nThe \"course.attendance.VIEW\" entitlement is required to view a Course Meeting.\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/CourseMeetingsSortCriteria.sort"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseMeeting"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "attendance"
        ],
        "summary": "Create Course Meeting",
        "description": "Creates a new Course Meeting within the provided Course/Organization Id. An attendance grade book column will automatically be generated if one does not exist.\n\nThe \"course.attendance.CREATE\" entitlement is required to create a Course Meeting.\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "courseId",
                "description",
                "end",
                "start",
                "title"
              ],
              "properties": {
                "courseId": {
                  "type": "string",
                  "description": "The primary ID of the course."
                },
                "title": {
                  "type": "string",
                  "description": "The title of the meeting"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the meeting"
                },
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The start time of meeting"
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The end time of meeting"
                },
                "externalLink": {
                  "type": "string",
                  "description": "The externalLink of course meeting"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CourseMeeting"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to create Meetings",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "attendance"
        ],
        "summary": "Delete All Meetings In Course",
        "description": "Deletes all course meetings in the course for the given course Id.\n\nThe 'course.attendance.DELETE' entitlement is required to delete Course Meetings.\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid courseId provided",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The user is not authorized to delete the specified Meetings in course object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/meetings/downloadUrl": {
      "get": {
        "tags": [
          "attendance"
        ],
        "summary": "Generate Attendance Data Download Url",
        "description": "Generate Download URL for Attendance Data.\n\nThe \"course.attendance.CREATE\" entitlement is required to generate download URL for attendance data.\n\n**Since**: ????",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttendanceDataDownloadUrl"
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Check input parameters. This usually occurs when a supplied Id value could not be located",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/meetings/users/{userId}": {
      "get": {
        "tags": [
          "attendance"
        ],
        "summary": "Get Attendance Records By User Id",
        "description": "Returns a list of Course Meeting Attendance for a given user id regardless of courses and meetings.\n\nThe \"course.attendance.VIEW\" entitlement is required to view a Course Meeting attendance.\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/AttendanceRecordsSortCriteria.sort"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AttendanceRecord"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "attendance"
        ],
        "summary": "Delete All Attendance Records By Course And User Id",
        "description": "Deletes all attendance records for the user in specific course.\n\nThe 'course.attendance.DELETE' entitlement is required to delete attendance records.\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user id provided",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The user is not authorized to delete the specified records in meeting object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/meetings/users/{userId}/all": {
      "delete": {
        "tags": [
          "attendance"
        ],
        "summary": "Delete All Attendance By User Id",
        "description": "Deletes all attendance records for the user. It will delete meeting attendance regardless of course.\n\nThe 'course.attendance.DELETE' entitlement is required to delete attendance records.\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user id provided",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The user is not authorized to delete the specified records in meeting object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/meetings/{meetingId}": {
      "get": {
        "tags": [
          "attendance"
        ],
        "summary": "Get Course Meeting",
        "description": "Returns a Course Meeting for the given meeting Id.\n\nThe \"course.attendance.VIEW\" entitlement is required to view a Course Meeting.\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "meetingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseMeeting"
            }
          },
          "400": {
            "description": "Failed to get meeting; or The request did not specify a valid meetingId",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The meeting is not found ",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "attendance"
        ],
        "summary": "Delete Course Meeting",
        "description": "Delete the Course Meeting for the given course meeting Id.\n\nThe 'course.attendance.DELETE' entitlement is required to delete Course Meetings.\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "meetingId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid meetingId provided",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The user is not authorized to delete the specified course meeting object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "attendance"
        ],
        "summary": "Update Course Meeting",
        "description": "Update the Course Meeting for the given Course/Organization.\n\nThe \"course.attendance.MODIFY\" entitlement is required to update a Course Meeting. The \"course.attendance.VIEW\" entitlement is required to view a Course Meeting.\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "meetingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "courseId": {
                  "type": "string",
                  "description": "The primary ID of the course."
                },
                "title": {
                  "type": "string",
                  "description": "The title of the meeting"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the meeting"
                },
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The start time of meeting"
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The end time of meeting"
                },
                "externalLink": {
                  "type": "string",
                  "description": "The externalLink of course meeting"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseMeeting"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to update Meetings",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/meetings/{meetingId}/users": {
      "get": {
        "tags": [
          "attendance"
        ],
        "summary": "Get Attendance Records By Meeting Id",
        "description": "Returns a list of Course Meeting Attendance for a given meeting id.\n\nThe \"course.attendance.VIEW\" entitlement is required to view a Course Meeting attendance.\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/AttendanceRecordsSortCriteria.sort"
          },
          {
            "name": "meetingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AttendanceRecord"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "attendance"
        ],
        "summary": "Create Attendance Record",
        "description": "Creates a new Course Meeting Attendance within the provided Course/Organization Id.\n\nThe \"course.attendance.CREATE\" entitlement is required to create a Course Meeting Attendance.\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "meetingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "meetingId",
                "status",
                "userId"
              ],
              "properties": {
                "meetingId": {
                  "type": "string",
                  "description": "The primary id of the meeting."
                },
                "userId": {
                  "type": "string",
                  "description": "The learn external id of the user."
                },
                "status": {
                  "type": "string",
                  "description": "The attendance status of the user.\n\n\n| Type      | Description\n | --------- | --------- |\n| Absent |  |\n| Late |  |\n| Present |  |\n| Excused |  |\n",
                  "enum": [
                    "Absent",
                    "Late",
                    "Present",
                    "Excused"
                  ]
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AttendanceRecord"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to create attendace records",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "attendance"
        ],
        "summary": "Delete All Records In Meeting",
        "description": "Deletes all attendance records in the course meeting for a given meeting Id.\n\nThe 'course.attendance.DELETE' entitlement is required to delete attendance records.\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "meetingId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid courseId provided",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The user is not authorized to delete the specified records in meeting object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/meetings/{meetingId}/users/bulk": {
      "post": {
        "tags": [
          "attendance"
        ],
        "summary": "Update Attendance Records",
        "description": "Creates or updates attendance records for the meeting for all users in the course.\n\nUser required both of the entitlements below. If the user does not have the required entitlements,no records are created or modified.  Entitlement | User Access ------------|-----------  course.attendance.CREATE | Create Course/Organization Course Meeting Attendance course.attendance.MODIFY | Update Course/Organization Meeting Attendance\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "meetingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "meetingId",
                "status",
                "userId"
              ],
              "properties": {
                "meetingId": {
                  "type": "string",
                  "description": "The primary id of the meeting."
                },
                "userId": {
                  "type": "string",
                  "description": "The learn external id of the user."
                },
                "status": {
                  "type": "string",
                  "description": "The attendance status of the user.\n\n\n| Type      | Description\n | --------- | --------- |\n| Absent |  |\n| Late |  |\n| Present |  |\n| Excused |  |\n",
                  "enum": [
                    "Absent",
                    "Late",
                    "Present",
                    "Excused"
                  ]
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The user does not have entitlements to create attendace records",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/meetings/{meetingId}/users/{userId}": {
      "get": {
        "tags": [
          "attendance"
        ],
        "summary": "Get Attendance Record",
        "description": "Returns a Course Meeting Attendance information for the given meeting and user Id.\n\nThe \"course.attendance.VIEW\" entitlement is required to view a Course Meeting Attendance.\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "meetingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttendanceRecord"
            }
          },
          "400": {
            "description": "Failed to get attendance record; or The request did not specify a valid User/Meeting Id",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The attendance record is not found ",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "attendance"
        ],
        "summary": "Delete Attendance Record",
        "description": "Delete attendance record for meeting.It will delete meeting attendance within a course meeting.\n\nThe 'course.attendance.DELETE' entitlement is required to delete Attendance Record.\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "meetingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid meetingId/userId  provided",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The user is not authorized to delete the specified attendance record object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "attendance"
        ],
        "summary": "Update Attendance Record",
        "description": "Update the Course Meeting Attendance data for the given Course/Organization.\n\nThe \"course.attendance.MODIFY\" entitlement is required to update a Course Meeting Attendance. The \"course.attendance.VIEW\" entitlement is required to view a Course Meeting attendance.\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "meetingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "meetingId": {
                  "type": "string",
                  "description": "The primary id of the meeting."
                },
                "userId": {
                  "type": "string",
                  "description": "The learn external id of the user."
                },
                "status": {
                  "type": "string",
                  "description": "The attendance status of the user.\n\n\n| Type      | Description\n | --------- | --------- |\n| Absent |  |\n| Late |  |\n| Present |  |\n| Excused |  |\n",
                  "enum": [
                    "Absent",
                    "Late",
                    "Present",
                    "Excused"
                  ]
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttendanceRecord"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to update attendance records",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The attendance record is not found ",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/calendars": {
      "get": {
        "tags": [
          "calendar"
        ],
        "summary": "Get Calendars",
        "description": "Get the list of calendars. This endpoint will return all calendars viewable by the user. All users can request a list of calendars viewable to them.\n\n**Since**: 3400.9.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Calendar"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          }
        }
      }
    },
    "/learn/api/public/v1/calendars/items": {
      "get": {
        "tags": [
          "calendar"
        ],
        "summary": "Get Calendar Items",
        "description": "Get the list of calendar items. This endpoint will return all types of CalendarItems viewable by the user unless a specific <code>type</code> is specified as a query parameter.\n\nIf <code>since</code> and <code>since</code> are not provided this endpoint will default to the upcoming two week timeframe from now. </p>\n\nIf only <code>since</code> is provided this endpoint will default the <code>until</code> parameter two weeks after <code>since</code>. </p>\n\nIf only <code>until</code> is provided this endpoint will default the <code>since</code> parameter two prior to <code>until</code>. </p>\n\nMaximum timespan between <code>since</code> and <code>until</code> is 16 weeks. </p>\n\nCalendarItems of type <code>GradebookColumn</code> are a representation of a specific gradable item and therefore read-only. Modifications to GradebookColumn items performed via the Gradebook Column endpoints will be reflected in the CalendarItems endpoints. </p>\n\nThe CalendarItem <code>id</code> can be used as the <code>columnId</code> on the Gradebook Column endpoints found here: <code>/learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}</code>. </p> Example requests:\n\n- <code>GET ../items?since=2018-01-01T00:00:00.000Z&until2018-02-01T00:00:00.000Z // all calendar items for a given timeframe</code>\n- <code>GET ../items?since=2018-01-01T00:00:00.000Z&until2018-02-01T00:00:00.000Z&courseId=_123_1 // all calendar items for a given course (including Course, OfficeHours, GradebookColumn types)</code>\n- <code>GET ../items?since=2018-01-01T00:00:00.000Z&until2018-02-01T00:00:00.000Z&courseId=_123_1&type=GradebookColumn // all GradebookColumn items for a course</code>\n- <code>GET ../items?since=2018-01-01T00:00:00.000Z&until2018-02-01T00:00:00.000Z&courseId=_123_1&type=OfficeHours // all OfficeHours for a course</code>\n- <code>GET ../items?since=2018-01-01T00:00:00.000Z&until2018-02-01T00:00:00.000Z&type=GradebookColumn // all gradebook columns due within the given timeframe</code>\n- <code>GET ../items?since=2018-01-01T00:00:00.000Z&until2018-02-01T00:00:00.000Z&type=OfficeHours // all OfficeHours available to current user for a given timeframe</code>\nThe following must be true in order to view the following calendar item types:\n\n- Institution\n-\n\n- All users can view Institution calendar items\n\n- Personal\n-\n\n- Any user may view their own calendar items, but not other user's calendar items\n\n- Course\n-\n\n- The user must be enrolled in the course\n- The user must have the 'course.calendar-entry.VIEW' entitlement\n- The course calendar must be enabled for the course the calendar item is associated with\n\n- GradebookColumn\n-\n\n- The user must be enrolled in the course\n- The user must have the 'course.calendar-entry.VIEW' entitlement\n- The course calendar must be enabled for the course the GradebookColumn is associated with\n\n- OfficeHours\n-\n\n- If the OfficeHours are created for a course calendar (calendarId = a course id) the user must be enrolled in the course\n- If the OfficeHours are created for a all courses (calendarId = PERSONAL) the user must be enrolled in any course that the user owning the OfficeHours is also enrolled in\n- In either case above the course calendar must be enabled\n\n</p>\n\n**Since**: 3400.9.0",
        "parameters": [
          {
            "name": "courseId",
            "in": "query",
            "description": "Specifies only calendar items associated with 'courseId' are to be returned.\n\n**Since**: 3400.9.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Specifies only calendar items with the given type.\n\n**Since**: 3400.9.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Course |  |\n| GradebookColumn | Read only. |\n| Institution |  |\n| OfficeHours |  |\n| Personal |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "Course",
              "GradebookColumn",
              "Institution",
              "OfficeHours",
              "Personal"
            ]
          },
          {
            "name": "since",
            "in": "query",
            "description": "Specifies only calendar items after the 'since' date (inclusive) are to be returned. Maximum of 16 weeks after the 'since' date will be returned. ISO-8601 date-time format is expected: [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh:mm]]\n\n**Since**: 3400.9.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "until",
            "in": "query",
            "description": "Specifies only calendar items before the 'until' date (inclusive) are to be returned. Maximum of 16 weeks prior to the 'until' date will be returned. ISO-8601 date-time format is expected: [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh:mm]]\n\n**Since**: 3400.9.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"title(desc),start\" Supported fields are:\n\n- id\n- calendarId\n- title\n- start\n- end\n- modified\n\n**Since**: 3400.9.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CalendarItem"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "calendar"
        ],
        "summary": "Create Calendar Item",
        "description": "\n\nCreate a calendar item. Calendar items may be single or recurring. </p>\n\nCalendarItems of type <code>OfficeHours</code> will be assigned to the current user. </p> The following must be true in order to create a calendar item:\n\n- Institution\n-\n\n- The user must have the 'system.calendar-item.EXECUTE' entitlement\n\n- Personal\n-\n\n- Any user may create their own calendar items\n\n- Course\n-\n\n- The user must be enrolled in the course\n- The user must have the 'course.calendar-entry.CREATE' entitlement\n- The specified courseId must not be for an organization\n- The course calendar must be enabled for the specified course\n\n- GradebookColumn\n-\n\n- GradebookColumns must be created using the Gradebook API endpoint: <code>POST /learn/api/public/v2/courses/{courseId}/gradebook/columns</code>\n\n- OfficeHours\n-\n\n- The user must have the 'course.calendar-entry.CREATE' entitlement\n- If calendarId = a course id the user must be enrolled in the course and the calendar must be enabled\n- Note: To create for all enrolled courses calendarId must be set to PERSONAL\n\n**Since**: 3400.9.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "calendarId",
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of this Calendar Item.\n\n\n| Type      | Description\n | --------- | --------- |\n| Course |  |\n| GradebookColumn | Read only. |\n| Institution |  |\n| OfficeHours |  |\n| Personal |  |\n",
                  "enum": [
                    "Course",
                    "GradebookColumn",
                    "Institution",
                    "OfficeHours",
                    "Personal"
                  ]
                },
                "calendarId": {
                  "type": "string",
                  "description": "Calendar source identifier which indicates the calendar on which the calendar item was created. Examples of possible values : \"PERSONAL\", \"INSTITUTION\", and course id in the format of \"_3_1\"."
                },
                "title": {
                  "type": "string",
                  "description": "Title of the calendar item. Title length cannot exceed 255 characters."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the calendar item."
                },
                "location": {
                  "type": "string",
                  "description": "Location of the calendar item and it cannot exceed 1024 characters."
                },
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Start date of the calendar item either in the past if the calendar item is for an event that's already started OR in the future if it's for an event to start in the future. This is always set and should occur before the end date."
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "End date of the calendar item either in the past if the calendar item is for an event that's already end OR in the future if it's for an event to end in the future. This is always set and should occur after the start date."
                },
                "disableResizing": {
                  "type": "boolean",
                  "description": "Whether resizing of the calendar item should NOT be allowed."
                },
                "dynamicCalendarItemProps": {
                  "type": "object",
                  "description": "Extra calendar item properties if it is a GradebookColumn calendar item.",
                  "title": "DynamicCalendarItemProps",
                  "readOnly": true,
                  "properties": {
                    "attemptable": {
                      "type": "boolean",
                      "description": "The dynamic calendar item can be attempted (can have attempts made against it) and the current user (in context) has permission/entitlement to grade attempts for the object represented by this calendar item."
                    },
                    "categoryId": {
                      "type": "string",
                      "description": "Returns the gradeableItem categoryId value .it is only set if the calendar event is dynamically created based on a single grade book column"
                    },
                    "dateRangeLimited": {
                      "type": "boolean",
                      "description": "The dynamic calendar item is only visible during a specific windows of time."
                    },
                    "eventType": {
                      "type": "string",
                      "description": "Returns a human readable string describing the type of calendar item represented (e.g. assignment, test, etc.)."
                    },
                    "gradable": {
                      "type": "boolean",
                      "description": "The dynamic calendar item can be graded and the current user (in context) has permission/entitlement to grade attempts for the object represented by this calendar item."
                    }
                  }
                },
                "recurrence": {
                  "description": "Recurring definition if the calendar item is a repeatable calendar item. This object must be defined for <code>OfficeHours</code> type calendar items.",
                  "$ref": "#/definitions/CalendarItemRecurrence"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CalendarItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/calendars/items/{calendarItemType}/{calendarItemId}": {
      "get": {
        "tags": [
          "calendar"
        ],
        "summary": "Get Calendar Item",
        "description": "\n\nGet a course calendar item. </p>\n\nCalendarItems of type <code>GradebookColumn</code> are a representation of a specific gradable item and therefore read-only. Modifications to GradebookColumn items performed via the Gradebook Column endpoints will be reflected in the CalendarItems endpoints. </p>\n\nThe CalendarItem <code>id</code> can be used as the <code>columnId</code> on the Gradebook Column endpoints found here: <code>/learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}</code>. </p> The following must be true in order to view the following calendar items types:\n\n- Institution\n-\n\n- All users can view Institution calendar items\n\n- Personal\n-\n\n- Any user may view their own calendar items, but not other user's calendar items\n\n- Course\n-\n\n- The user must be enrolled in the course\n- The user must have the 'course.calendar-entry.VIEW' entitlement\n- The course calendar must be enabled for the course the calendar item is associated with\n\n- GradebookColumn\n-\n\n- The user must be enrolled in the course\n- The user must have the 'course.calendar-entry.VIEW' entitlement\n- The course calendar must be enabled for the course the GradebookColumn is associated with\n\n- OfficeHours\n-\n\n- If the OfficeHours are created for a course calendar (calendarId = a course id) the user must be enrolled in the course\n- If the OfficeHours are created for a all courses (calendarId = PERSONAL) the user must be enrolled in any course that the user owning the OfficeHours is also enrolled in\n- In either case above the course calendar must be enabled\n\n**Since**: 3400.9.0",
        "parameters": [
          {
            "name": "calendarItemType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Course",
              "GradebookColumn",
              "Institution",
              "OfficeHours",
              "Personal"
            ]
          },
          {
            "name": "calendarItemId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CalendarItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "calendar"
        ],
        "summary": "Delete Calendar Item",
        "description": "\n\nDelete a calendar item or series. </p> The following must be true in order to delete a calendar item:\n\n- Institution\n-\n\n- The user must have the 'system.calendar-item.EXECUTE' entitlement\n\n- Personal\n-\n\n- Any user may delete their own calendar items\n\n- Course\n-\n\n- The user must be enrolled in the course\n- The user must have the 'course.calendar-entry.MODIFY' entitlement\n- The course calendar must be enabled for the specified course\n\n- GradebookColumn\n-\n\n- GradebookColumns must be deleted using the Gradebook API endpoint: <code>DELETE /learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}</code>\n\n- OfficeHours\n-\n\n- The user must have the 'course.calendar-entry.MODIFY' entitlement\n- The user must own the calendarItem\n- The calendar must be enabled if the calendarItem is associated with a course calendar.\n\n**Since**: 3400.9.0",
        "parameters": [
          {
            "name": "calendarItemType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Course",
              "GradebookColumn",
              "Institution",
              "OfficeHours",
              "Personal"
            ]
          },
          {
            "name": "calendarItemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deleteSeries",
            "in": "query",
            "description": "delete the series calendar items or just one calendar item. true - delete the        series, false - delete one calendar item. Defaults to false.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "calendar"
        ],
        "summary": "Update Calendar Item",
        "description": "\n\nUpdate a calendar item or series. </p>\n\nWhen updating the series the existing CalendarItems will be removed and a new set of CalendarItems will be created. This is the same behavior as experienced via the UI. </p> The following must be true in order to update a calendar item:\n\n- Institution\n-\n\n- The user must have the 'system.calendar-item.EXECUTE' entitlement\n\n- Personal\n-\n\n- Any user may update their own calendar items\n\n- Course\n-\n\n- The user must be enrolled in the course\n- The user must have the 'course.calendar-entry.MODIFY' entitlement\n- The course calendar must be enabled for the specified course\n\n- GradebookColumn\n-\n\n- GradebookColumns must be updated using the Gradebook API endpoint: <code>PATCH /learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}</code>\n\n- OfficeHours\n-\n\n- The user must have the 'course.calendar-entry.MODIFY' entitlement\n- If calendarId = a course id the user must be enrolled in the course and the calendar must be enabled\n\n**Since**: 3400.9.0",
        "parameters": [
          {
            "name": "calendarItemType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Course",
              "GradebookColumn",
              "Institution",
              "OfficeHours",
              "Personal"
            ]
          },
          {
            "name": "calendarItemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "updateSeries",
            "in": "query",
            "description": "update the series calendar items or just one calendar item. true - update the        entire series, false - update a single calendar item. Defaults to false. When updating an entire series the full recurrence        object must be populated just as if creating a new calendar series. If updating a single calendar entry the recurrence        must not be specified.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title of the calendar item. Title length cannot exceed 255 characters."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the calendar item."
                },
                "location": {
                  "type": "string",
                  "description": "Location of the calendar item and it cannot exceed 1024 characters."
                },
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Start date of the calendar item either in the past if the calendar item is for an event that's already started OR in the future if it's for an event to start in the future. This is always set and should occur before the end date."
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "End date of the calendar item either in the past if the calendar item is for an event that's already end OR in the future if it's for an event to end in the future. This is always set and should occur after the start date."
                },
                "disableResizing": {
                  "type": "boolean",
                  "description": "Whether resizing of the calendar item should NOT be allowed."
                },
                "dynamicCalendarItemProps": {
                  "type": "object",
                  "description": "Extra calendar item properties if it is a GradebookColumn calendar item.",
                  "title": "DynamicCalendarItemProps",
                  "readOnly": true,
                  "properties": {
                    "attemptable": {
                      "type": "boolean",
                      "description": "The dynamic calendar item can be attempted (can have attempts made against it) and the current user (in context) has permission/entitlement to grade attempts for the object represented by this calendar item."
                    },
                    "categoryId": {
                      "type": "string",
                      "description": "Returns the gradeableItem categoryId value .it is only set if the calendar event is dynamically created based on a single grade book column"
                    },
                    "dateRangeLimited": {
                      "type": "boolean",
                      "description": "The dynamic calendar item is only visible during a specific windows of time."
                    },
                    "eventType": {
                      "type": "string",
                      "description": "Returns a human readable string describing the type of calendar item represented (e.g. assignment, test, etc.)."
                    },
                    "gradable": {
                      "type": "boolean",
                      "description": "The dynamic calendar item can be graded and the current user (in context) has permission/entitlement to grade attempts for the object represented by this calendar item."
                    }
                  }
                },
                "recurrence": {
                  "description": "Recurring definition if the calendar item is a repeatable calendar item. This object must be defined for <code>OfficeHours</code> type calendar items.",
                  "$ref": "#/definitions/CalendarItemRecurrence"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CalendarItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get Contents",
        "description": "List top-level content items in a course.\n\nUsers with at least one of the following entitlements may access any content item:\n\n- course.adaptiverelease.CREATE\n- course.adaptiverelease.DELETE\n- course.adaptiverelease.MODIFY\n- course.adaptiverelease.VIEW\n- course.configure-areas.EXECUTE\n- course.content-item.copy.EXECUTE\n- course.content.DELETE\n- course.content.MODIFY\n- course.learningstandards.alignment.CREATE\n- course.performance.dashboard.VIEW\n</p>\n\nFor other users, permission to view the content item will depend on the availability settings of the course and  the content item.  The following fields will be filtered out:\n\n- availability.available\n- availability.allowGuests\n- availability.adaptiveRelease\n</p>\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "Search for child content recursively.  A value of 'true' indicates that search results should include all content descendants within the hierarchy of the specified parent.  A value of 'false' indicates results should be limited to immediate children only.  Not setting this field defaults to 'false' behavior; only including immediate children.\n\n**Since**: 3100.2.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "title",
            "in": "query",
            "description": "Search for content title. Will return all Content items whose title contains the supplied search value.\n\n**Since**: 3900.10.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "contentHandler",
            "in": "query",
            "description": "Search for the specific content handler.  Not setting this field will return all content handlers.\n\n**Since**: 3400.5.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for contents with a created date relative to this value.  'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3700.1.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3700.1.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search for contents with a modified date relative to this value.  'modifiedCompare' may also be sent to control search behavior.\n\n**Since**: 3700.4.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Used alongside the 'modified' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3700.4.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "reviewable",
            "in": "query",
            "description": "Search contents by whether they are reviewable or not.\n\n**Since**: 3700.15.0",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Content"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Create Content",
        "description": "Create a new top-level content item. Currently only folders may be created as top-level content items in a Classic course. For Ultra courses any content item is allowed and will be placed under the ROOT folder. Entitlement \"course.content.CREATE\" required to create Course Content.\n\n**Since**: 3000.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/AllowChildCourseContent.allowChildCourseContent"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title"
              ],
              "properties": {
                "parentId": {
                  "type": "string",
                  "description": "The ID of the content's parent.  Note that top-level contents do not have parents. The 'parentId' field is a writable field as of the Bb Learn 3200.6.0 release.  Specifying a new value in PATCH requests allows the Content object to be moved from one parent to another."
                },
                "title": {
                  "type": "string",
                  "description": "The title or name of this content. Typically shown as the main text to click in the course outline when accessing the content."
                },
                "body": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The body text associated with this content. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "description": {
                  "type": "string",
                  "description": "The short description of this content.\n\nThis field is not used in Classic courses.  For Ultra courses this is used to show information directly on the course outline.",
                  "maxLength": 750
                },
                "position": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The position of this content within its parent folder. Position values are zero-based (the first element has a position value of zero, not one). Default position is last in the list of child contents under the parent."
                },
                "launchInNewWindow": {
                  "type": "boolean",
                  "description": "Indicates whether the content is going to open in a new window.\n\n**Since**: 3800.10.0"
                },
                "reviewable": {
                  "type": "boolean",
                  "description": "Indicates whether Review Status is enabled for this content. Content items with review status enabled can be marked as reviewed by students in classic courses and content items with review status enabled in Ultra are either in a Forced Sequence or content that should be counted towards the progress tracking feature as of 3900.19 This can be used to track performance and in Adaptive Release rules to control the release of other content.\n\n**Since**: 3700.15.0"
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the content to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the content is currently available to students.  Instructors can always access the content.  If set to 'PartiallyVisible', the title will be available to students but the body will not.  Defaults to Yes.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n| PartiallyVisible |  |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "PartiallyVisible"
                      ]
                    },
                    "allowGuests": {
                      "type": "boolean",
                      "description": "Whether this content is available to users with the 'guest' role. Defaults to true."
                    },
                    "allowObservers": {
                      "type": "boolean",
                      "description": "Whether or not \"observers\" are allowed access to this Content. Defaults to true.\n\n**Since**: 3900.31.0"
                    },
                    "adaptiveRelease": {
                      "type": "object",
                      "description": "Settings controlling adaptive release of the content to students.",
                      "title": "AdaptiveRelease",
                      "properties": {
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date when this content will become available to students."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date when this content will no longer be available to students."
                        }
                      }
                    }
                  }
                },
                "contentHandler": {
                  "description": "Extended settings specific to this content item's content handler.",
                  "$ref": "#/definitions/ContentHandler"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "507": {
            "description": "Folder quota exceeded",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/createAssignment": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Create Assignment",
        "description": "Create assignment content, grade column and file attachments in one POST. Any files specified with assignment creation must be previously uploaded using the uploads endpoint. Ultra courses supported since 3300.9.0 Classic courses supported since 3400.9.0 </p> For Ultra courses, this will create:\n\n- A content item with a contentHandler.id = resource/x-bb-asmt-test-link\n- A gradebook column with contentId = id of the new content\n- An assessment question with questionHandler.type = presentation that includes the instructions as the question text\n- An assessment question with questionHandler.type = presentation for each given file attachment\n</p> The following entitlements are required to create an Ultra assignment:\n\n- course.content.CREATE\n- course.assessment.CREATE\n- course.content.assessment.deploy.EXECUTE\n- course.gradebook.MODIFY\n- course.assessment.MODIFY, if instructions or files are specified\n</p> For Classic courses, this will create:\n\n- A content item with contentHandler.id = resource/x-bb-assignment\n- A gradebook column with contentId = id of the new content\n- A file attachment for each given file attachment id\nThe following entitlements are required to create a Classic assignment:\n\n- course.content.CREATE\n- course.gradebook.MODIFY\n- course.content.MODIFY, if files are specified\n</p>\n\n**Since**: 3300.9.0",
        "parameters": [
          {
            "$ref": "#/parameters/AllowChildCourseContent.allowChildCourseContent"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title"
              ],
              "properties": {
                "parentId": {
                  "type": "string",
                  "description": "The id of the parent content for the created assignment."
                },
                "title": {
                  "type": "string",
                  "description": "The title used for the created assignment content and gradebook column. Typically shown as the main text to click in the course outline when accessing the assignment."
                },
                "instructions": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The text instructions to use when creating the assignment content. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "description": {
                  "type": "string",
                  "description": "The description to use when creating the assignment content."
                },
                "position": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The position of the created assignment within the other other content of its parent. Position values are zero-based (the first element has a position value of zero, not one). Default position is last in the list of child contents under the parent."
                },
                "fileUploadIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "availability": {
                  "type": "object",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the created assignment is available to students. Instructors can always access the created assignment. If set to 'PartiallyVisible', the title will be available to students but the body will not. Defaults to Yes.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n| PartiallyVisible |  |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "PartiallyVisible"
                      ]
                    },
                    "allowGuests": {
                      "type": "boolean",
                      "description": "Whether the created assignment is available to users with the 'guest' role. Defaults to true."
                    },
                    "allowObservers": {
                      "type": "boolean",
                      "description": "Whether the created assignment is available to users with the 'observer' role. Defaults to true.\n\n**Since**: 3900.31.0"
                    },
                    "adaptiveRelease": {
                      "type": "object",
                      "description": "Settings controlling adaptive release of created assignment to students.",
                      "title": "AdaptiveRelease",
                      "properties": {
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date when the created assignment will become available to students."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date when the created assignment will no longer be available to students."
                        }
                      }
                    }
                  }
                },
                "grading": {
                  "type": "object",
                  "title": "Grading",
                  "properties": {
                    "due": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Date and time that the created assignment will be due. If not specified, this will default to the specified \"availability.adaptiveRelease.end\" date. If that is also not specified, due date defaults to null."
                    },
                    "attemptsAllowed": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of attempts allowed on the created assignment. Defaults to 1. Maximum allowed is 10 for an Ultra Assignment. Value will be ignored if isUnlimitedAttemptsAllowed is set to true."
                    },
                    "gradeSchemaId": {
                      "type": "string",
                      "description": "The grading schema to use for the created assignment. Defaults to Score."
                    },
                    "isUnlimitedAttemptsAllowed": {
                      "type": "boolean",
                      "description": "Determines if the assignment has unlimited number of attempts.\n\n**Since**: 3400.8.0"
                    }
                  }
                },
                "score": {
                  "type": "object",
                  "title": "Score",
                  "properties": {
                    "possible": {
                      "type": "number",
                      "description": "The number of points possible for the created assignment. Defaults to 100."
                    }
                  }
                },
                "originalityReportingTool": {
                  "description": "The Originality Reporting Tool options to be used for the assignment content item.\n\n**Since**: 3800.16.0",
                  "$ref": "#/definitions/OriginalityReportingTool"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateAssignmentResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Logged-on User has insufficient privileges",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get Content",
        "description": "Load a specific content item from a course.\n\nUsers with at least one of the following entitlements may access any content item:\n\n- course.adaptiverelease.CREATE\n- course.adaptiverelease.DELETE\n- course.adaptiverelease.MODIFY\n- course.adaptiverelease.VIEW\n- course.configure-areas.EXECUTE\n- course.content-item.copy.EXECUTE\n- course.content.DELETE\n- course.content.MODIFY\n- course.learningstandards.alignment.CREATE\n- course.performance.dashboard.VIEW\n\nFor other users, permission to view the content item will depend on the availability settings of the course and the content item.  The following fields will be filtered out:\n\n- availability.available\n- availability.allowGuests\n- availability.adaptiveRelease\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "content"
        ],
        "summary": "Delete Content",
        "description": "Delete a content item.\n\nThe 'course.content.DELETE' entitlement is required.\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/AllowChildCourseContent.allowChildCourseContent"
          },
          {
            "$ref": "#/parameters/DeleteGradesParam.deleteGrades"
          }
        ],
        "responses": {
          "400": {
            "description": "Content Handler has not been implemented; or Top Level Content Folders can not be deleted",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Logged-on User has insufficient privileges",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Invalid Content ID",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Cannot delete assessments which contain responses or questions used in other assessments",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "content"
        ],
        "summary": "Update Content",
        "description": "Update a content item.\n\nThe 'course.content.MODIFY' entitlement is required.\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/AllowChildCourseContent.allowChildCourseContent"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "parentId": {
                  "type": "string",
                  "description": "The ID of the content's parent.  Note that top-level contents do not have parents. The 'parentId' field is a writable field as of the Bb Learn 3200.6.0 release.  Specifying a new value in PATCH requests allows the Content object to be moved from one parent to another."
                },
                "title": {
                  "type": "string",
                  "description": "The title or name of this content. Typically shown as the main text to click in the course outline when accessing the content."
                },
                "body": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The body text associated with this content. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "description": {
                  "type": "string",
                  "description": "The short description of this content.\n\nThis field is not used in Classic courses.  For Ultra courses this is used to show information directly on the course outline.",
                  "maxLength": 750
                },
                "position": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The position of this content within its parent folder. Position values are zero-based (the first element has a position value of zero, not one). Default position is last in the list of child contents under the parent."
                },
                "launchInNewWindow": {
                  "type": "boolean",
                  "description": "Indicates whether the content is going to open in a new window.\n\n**Since**: 3800.10.0"
                },
                "reviewable": {
                  "type": "boolean",
                  "description": "Indicates whether Review Status is enabled for this content. Content items with review status enabled can be marked as reviewed by students in classic courses and content items with review status enabled in Ultra are either in a Forced Sequence or content that should be counted towards the progress tracking feature as of 3900.19 This can be used to track performance and in Adaptive Release rules to control the release of other content.\n\n**Since**: 3700.15.0"
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the content to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the content is currently available to students.  Instructors can always access the content.  If set to 'PartiallyVisible', the title will be available to students but the body will not.  Defaults to Yes.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n| PartiallyVisible |  |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "PartiallyVisible"
                      ]
                    },
                    "allowGuests": {
                      "type": "boolean",
                      "description": "Whether this content is available to users with the 'guest' role. Defaults to true."
                    },
                    "allowObservers": {
                      "type": "boolean",
                      "description": "Whether or not \"observers\" are allowed access to this Content. Defaults to true.\n\n**Since**: 3900.31.0"
                    },
                    "adaptiveRelease": {
                      "type": "object",
                      "description": "Settings controlling adaptive release of the content to students.",
                      "title": "AdaptiveRelease",
                      "properties": {
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date when this content will become available to students."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date when this content will no longer be available to students."
                        }
                      }
                    }
                  }
                },
                "contentHandler": {
                  "description": "Extended settings specific to this content item's content handler.",
                  "$ref": "#/definitions/ContentHandler"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "507": {
            "description": "Folder quota exceeded",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/children": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get Content Children",
        "description": "List all child content items directly beneath another content item.  This is only valid for content items that are allowed to have children (e.g. Folders).\n\nUsers with at least one of the following entitlements may access all child contents from a content item:\n\n- course.adaptiverelease.CREATE\n- course.adaptiverelease.DELETE\n- course.adaptiverelease.MODIFY\n- course.adaptiverelease.VIEW\n- course.configure-areas.EXECUTE\n- course.content-item.copy.EXECUTE\n- course.content.DELETE\n- course.content.MODIFY\n- course.learningstandards.alignment.CREATE\n- course.performance.dashboard.VIEW\nIn any of the following cases, the user may also get the child contents from a content item.\n\n- The user has a role in the course other than guest or observer, and doesn't have any of the previously mentioned entitlements.\n- The user has the role of observer, and both the course and the underlying content allow observer access.\n- The user accesses the course as guest, both the course and the underlying content allow guest access, further, the course content menu allows guest access as well for the original courses.\nFor other users, permission to view the content item will depend on the availability settings of the course and  the content item. The following fields will be filtered out:\n\n- availability.available\n- availability.allowGuests\n- availability.adaptiveRelease\n</p>\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "Search for child content recursively.  A value of 'true' indicates that search results should include all content descendants within the hierarchy of the specified parent.  A value of 'false' indicates results should be limited to immediate children only.  Not setting this field defaults to 'false' behavior; only including immediate children.\n\n**Since**: 3100.2.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "title",
            "in": "query",
            "description": "Search for content title. Will return all Content items whose title contains the supplied search value.\n\n**Since**: 3900.10.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "contentHandler",
            "in": "query",
            "description": "Search for the specific content handler.  Not setting this field will return all content handlers.\n\n**Since**: 3400.5.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for contents with a created date relative to this value.  'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3700.1.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3700.1.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search for contents with a modified date relative to this value.  'modifiedCompare' may also be sent to control search behavior.\n\n**Since**: 3700.4.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Used alongside the 'modified' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3700.4.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "reviewable",
            "in": "query",
            "description": "Search contents by whether they are reviewable or not.\n\n**Since**: 3700.15.0",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Content"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Create Child",
        "description": "Create a new child content item beneath an existing content item.  This is only valid for content items that are allowed to have children (e.g. Folders). Entitlement \"course.content.CREATE\" required to create Course Content.\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/AllowChildCourseContent.allowChildCourseContent"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title"
              ],
              "properties": {
                "parentId": {
                  "type": "string",
                  "description": "The ID of the content's parent.  Note that top-level contents do not have parents. The 'parentId' field is a writable field as of the Bb Learn 3200.6.0 release.  Specifying a new value in PATCH requests allows the Content object to be moved from one parent to another."
                },
                "title": {
                  "type": "string",
                  "description": "The title or name of this content. Typically shown as the main text to click in the course outline when accessing the content."
                },
                "body": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The body text associated with this content. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "description": {
                  "type": "string",
                  "description": "The short description of this content.\n\nThis field is not used in Classic courses.  For Ultra courses this is used to show information directly on the course outline.",
                  "maxLength": 750
                },
                "position": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The position of this content within its parent folder. Position values are zero-based (the first element has a position value of zero, not one). Default position is last in the list of child contents under the parent."
                },
                "launchInNewWindow": {
                  "type": "boolean",
                  "description": "Indicates whether the content is going to open in a new window.\n\n**Since**: 3800.10.0"
                },
                "reviewable": {
                  "type": "boolean",
                  "description": "Indicates whether Review Status is enabled for this content. Content items with review status enabled can be marked as reviewed by students in classic courses and content items with review status enabled in Ultra are either in a Forced Sequence or content that should be counted towards the progress tracking feature as of 3900.19 This can be used to track performance and in Adaptive Release rules to control the release of other content.\n\n**Since**: 3700.15.0"
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the content to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the content is currently available to students.  Instructors can always access the content.  If set to 'PartiallyVisible', the title will be available to students but the body will not.  Defaults to Yes.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n| PartiallyVisible |  |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "PartiallyVisible"
                      ]
                    },
                    "allowGuests": {
                      "type": "boolean",
                      "description": "Whether this content is available to users with the 'guest' role. Defaults to true."
                    },
                    "allowObservers": {
                      "type": "boolean",
                      "description": "Whether or not \"observers\" are allowed access to this Content. Defaults to true.\n\n**Since**: 3900.31.0"
                    },
                    "adaptiveRelease": {
                      "type": "object",
                      "description": "Settings controlling adaptive release of the content to students.",
                      "title": "AdaptiveRelease",
                      "properties": {
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date when this content will become available to students."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date when this content will no longer be available to students."
                        }
                      }
                    }
                  }
                },
                "contentHandler": {
                  "description": "Extended settings specific to this content item's content handler.",
                  "$ref": "#/definitions/ContentHandler"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "507": {
            "description": "Folder quota exceeded",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/contentCollection/resources": {
      "get": {
        "tags": [
          "content collection resources"
        ],
        "summary": "Get Resources",
        "description": "Get the top-level content collection folders.\n\nUsers with the entitlement 'bbcms.cs.filesystem.REST.VIEW' or filesystem access can use this endpoint.\n\n**Since**: 3900.41.0",
        "parameters": [
          {
            "name": "modified",
            "in": "query",
            "description": "Search by 'modified' date. Can be used along with 'modifiedCompare'.\n\n**Since**: 3900.41.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search by 'created' date. Can be used along with 'createdCompare'.\n\n**Since**: 3900.41.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Search criteria to be applied to 'modified', When not specified, it will perform as 'greaterOrEqual' by default if 'modified' contains a valid date. Must be one of the following:\n\n- greaterOrEqual\n- lessThan\n\n**Since**: 3900.41.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Search criteria to be applied to 'created', When not specified, it will perform as 'greaterOrEqual' by default if 'created' contains a valid date. Must be one of the following:\n\n- greaterOrEqual\n- lessThan\n\n**Since**: 3900.41.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "size",
            "in": "query",
            "description": "Search by file 'size'. Can be used along 'sizeCompare'. If specified, no folders will be retrieved.\n\n**Since**: 3900.41.0",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "creatorId",
            "in": "query",
            "description": "Search files by 'creatorId'\n\n**Since**: 3900.41.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "sizeCompare",
            "in": "query",
            "description": "Search operator to be applied to 'size', When not specified, it will perform as 'equals' by default if 'size' is specified. Must be one of the following:\n\n- equals - optional\n- notEquals\n- greaterOrEqual\n- greaterThan\n- lessOrEqual\n- lessThan\n\n**Since**: 3900.41.0\n\n\n| Type      | Description\n | --------- | --------- |\n| equals |  |\n| notEquals |  |\n| greaterOrEqual |  |\n| greaterThan |  |\n| lessOrEqual |  |\n| lessThan |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "equals",
              "notEquals",
              "greaterOrEqual",
              "greaterThan",
              "lessOrEqual",
              "lessThan"
            ]
          },
          {
            "$ref": "#/parameters/ContentCollectionResourcesSearchCriteria.type"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ContentCollectionResource"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "429": {
            "description": "The endpoint is being overloaded with requests",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/contentCollection/resources/{resourceId}": {
      "get": {
        "tags": [
          "content collection resources"
        ],
        "summary": "Get Content Collection Resource",
        "description": "Retrieves a content collection resource by id.\n\nResource objects only returned if the requesting User has been granted 'Read' permission on the Resource, or the User has the 'bbcms.cs.fileSystem.REST.VIEW' entitlement.\n\n**Since**: 3900.41.0",
        "parameters": [
          {
            "$ref": "#/parameters/ContentCollectionResourceIdParam.resourceId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContentCollectionResource"
            }
          },
          "404": {
            "description": "The specified item could not be found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "429": {
            "description": "The endpoint is being overloaded with requests",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/contentCollection/resources/{resourceId}/children": {
      "get": {
        "tags": [
          "content collection resources"
        ],
        "summary": "Get Resource Children",
        "description": "Get the direct children resources of the specified content collection resource. The specified resource must be a folder.\n\nUsers with the entitlement 'bbcms.cs.filesystem.REST.VIEW' or filesystem access can use this endpoint.\n\n**Since**: 3900.41.0",
        "parameters": [
          {
            "$ref": "#/parameters/ContentCollectionResourceIdParam.resourceId"
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search by 'modified' date. Can be used along with 'modifiedCompare'.\n\n**Since**: 3900.41.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search by 'created' date. Can be used along with 'createdCompare'.\n\n**Since**: 3900.41.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Search criteria to be applied to 'modified', When not specified, it will perform as 'greaterOrEqual' by default if 'modified' contains a valid date. Must be one of the following:\n\n- greaterOrEqual\n- lessThan\n\n**Since**: 3900.41.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Search criteria to be applied to 'created', When not specified, it will perform as 'greaterOrEqual' by default if 'created' contains a valid date. Must be one of the following:\n\n- greaterOrEqual\n- lessThan\n\n**Since**: 3900.41.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "size",
            "in": "query",
            "description": "Search by file 'size'. Can be used along 'sizeCompare'. If specified, no folders will be retrieved.\n\n**Since**: 3900.41.0",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "creatorId",
            "in": "query",
            "description": "Search files by 'creatorId'\n\n**Since**: 3900.41.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "sizeCompare",
            "in": "query",
            "description": "Search operator to be applied to 'size', When not specified, it will perform as 'equals' by default if 'size' is specified. Must be one of the following:\n\n- equals - optional\n- notEquals\n- greaterOrEqual\n- greaterThan\n- lessOrEqual\n- lessThan\n\n**Since**: 3900.41.0\n\n\n| Type      | Description\n | --------- | --------- |\n| equals |  |\n| notEquals |  |\n| greaterOrEqual |  |\n| greaterThan |  |\n| lessOrEqual |  |\n| lessThan |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "equals",
              "notEquals",
              "greaterOrEqual",
              "greaterThan",
              "lessOrEqual",
              "lessThan"
            ]
          },
          {
            "$ref": "#/parameters/ContentCollectionResourcesSearchCriteria.type"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ContentCollectionResource"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "The supplied values are not correct",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user is not entitled to perform this operation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified parameter is not associated to any existing resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "429": {
            "description": "The endpoint is being overloaded with requests",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/attachments": {
      "get": {
        "tags": [
          "content file attachments"
        ],
        "summary": "Get File Attachments",
        "description": "Get the file attachment meta data associated to the Content Item\n\nSupported Content Item Types: Content File (resource/x-bb-file), Document (resource/x-bb-document), Classic Assignment (resource/x-bb-assignment) (Since 3400.9.0) for a Classic Course\n\n**Since**: 3200.8.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FileAttachment"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "content file attachments"
        ],
        "summary": "Create File Attachment",
        "description": "Attach an uploaded file to a Content item.\n\nSupported Content Item Types: Content File (resource/x-bb-file), Document (resource/x-bb-document), Classic Assignment (resource/x-bb-assignment) for a Classic Course\n\n**Since**: 3400.9.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "in": "body",
            "name": "inputFileAttachment",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FileAttachment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "content file attachments"
        ],
        "summary": "Get File Attachment",
        "description": "Get the file attachment meta data by an attachment ID\n\nSupported Content Item Types: Content File (resource/x-bb-file), Document (resource/x-bb-document), Classic Assignment(resource/x-bb-assignment) (Since 3400.9.0) for a Classic Course\n\n**Since**: 3200.8.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FileAttachment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "content file attachments"
        ],
        "summary": "Delete File Attachment",
        "description": "Delete file attachment meta data by attachment ID\n\nSupported Content Item Types: Content File (resource/x-bb-file), Document (resource/x-bb-document), Classic Assignment(resource/x-bb-assignment) for a Classic Course\n\n**Since**: 3400.9.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/attachments/{attachmentId}/download": {
      "get": {
        "tags": [
          "content file attachments"
        ],
        "summary": "Download",
        "description": "Download the contents of a Content Item.\n\nSupported Content Item Types: Content File (resource/x-bb-file), Document (resource/x-bb-document), Classic Assignment (resource/x-bb-assignment) (Since 3400.9.0) for a Classic Course\n\n**Since**: 3200.8.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "302": {
            "description": "Found",
            "headers": {
              "Location": {
                "type": "string",
                "description": "A URL from which the corresponding file can be downloaded"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/groups": {
      "get": {
        "tags": [
          "content group assignments"
        ],
        "summary": "Get Content Groups",
        "description": "Returns a list of content group associations for the specified content.\n\nCallers not enrolled in the course must have at least one of the following entitlements:\n\n- course.content.designer.VIEW  Callers enrolled in the course will only be able to see Groups that are available to them.\n\n**Since**: 3100.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ContentGroup"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/groups/{groupId}": {
      "get": {
        "tags": [
          "content group assignments"
        ],
        "summary": "Get Content Group",
        "description": "Returns a content group association for the specified content and group.\n\nCallers not enrolled in the course must have at least one of the following entitlements:\n\n- course.content.designer.VIEW  Callers enrolled in the course will only be able to see Groups that are available to them.\n\n**Since**: 3100.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContentGroup"
            }
          },
          "400": {
            "description": "Invalid data specified in the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "User has insufficient privileges",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Group association not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "content group assignments"
        ],
        "summary": "Create Content Group",
        "description": "Creates a content group association.\n\nCallers not enrolled in the course must have at least one of the following entitlements:\n\n- course.content.MODIFY  If the content is going to be accessed in Ultra, the following rules should be followed by the caller:\n\n- If the group is part of a set, all groups with the set should be associated with the content. - The content should be associated exclusively to individual groups or groups within a set, but not both.\n\n**Since**: 3100.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/AllowChildCourseContent.allowChildCourseContent"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "contentId": {
                  "type": "string",
                  "description": "The ID of the associated content."
                },
                "groupId": {
                  "type": "string",
                  "description": "The ID of the association of content and group."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ContentGroup"
            }
          },
          "400": {
            "description": "Invalid Course in body of request; or Invalid association data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Logged-on User has insufficient privileges",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Content does not exist; or Group does not exist",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Group already associated; or Cannot associate individual groups, and groups in a set to the same content item",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "content group assignments"
        ],
        "summary": "Delete Content Group",
        "description": "Deletes a content group association.\n\nIndividual Groups without Content association are not supported in Ultra. Groups existing in this state have undefined behavior, and may be removed.  In Ultra courses, for best performance, immediately either delete the associated group, or associated it with a new Content item.\n\nIf the content is going to be accessed in Ultra, and the group being removed is part of a group set, then the caller should ensure that all groups within that set are removed from the content.\n\nRequired entitlements:\n\n- course.content.DELETE\n\n**Since**: 3100.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/AllowChildCourseContent.allowChildCourseContent"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/resources": {
      "get": {
        "tags": [
          "content resources"
        ],
        "summary": "Get Top Level Course Resources",
        "description": "Returns a list of the top-level course resources.\n\nUsers with the 'bbcms.cs.fileSystem.REST.VIEW' entitlement can view all resources.\n\nAll other users can view resources for which they have been granted the 'Read' permission.\n\n**Since**: 3700.12.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ResourceSearchCriteria.type"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Resource"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "404": {
            "description": "The specified course could not be found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "429": {
            "description": "The endpoint is being overloaded with requests",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/resources/{resourceId}": {
      "get": {
        "tags": [
          "content resources"
        ],
        "summary": "Get Course Resource",
        "description": "Loads a Course Resource by Id.\n\nUsers with the 'bbcms.cs.fileSystem.REST.VIEW' entitlement can view all resources.\n\nAll other users can view resources for which they have been granted the 'Read' permission.\n\n**Since**: 3700.13.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ResourceIdParam.resourceId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "404": {
            "description": "The specified resource could not be loaded for the specified course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "429": {
            "description": "The endpoint is being overloaded with requests",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/resources/{resourceId}/children": {
      "get": {
        "tags": [
          "content resources"
        ],
        "summary": "Get Course Resource Children",
        "description": "Returns a list of Course Resources that are children of the specified Resource.\n\nUsers with the 'bbcms.cs.fileSystem.REST.VIEW' entitlement can view all resources.\n\nAll other users can view resources for which they have been granted the 'Read' permission.\n\n**Since**: 3700.13.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ResourceIdParam.resourceId"
          },
          {
            "$ref": "#/parameters/ResourceSearchCriteria.type"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Resource"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "The specified resource was not a folder; or The children type parameter was not valid. Use File or Folder",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have permission to view the specified resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified resource could not be found in the specified course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "429": {
            "description": "The endpoint is being overloaded with requests",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/users/{userId}/reviewStatus": {
      "get": {
        "tags": [
          "content review"
        ],
        "summary": "Get Review Status",
        "description": "Obtain the review status for a content item. This endpoint will only fetch the reviewStatus if the corresponding content was previously marked as reviewable.\n\n**Since**: 3700.16.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReviewStatus"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "content review"
        ],
        "summary": "Update Review Status",
        "description": "Update the review status for a content item. This endpoint will only update the reviewStatus if the corresponding content was previously marked as reviewable. Updating a content's review status to be reviewed is allowed in an Ultra course but updating a content item as unreviewed is not allowed in an Ultra course starting in 3900.19.0\n\n**Since**: 3700.16.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ContentIdParam.contentId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "reviewed": {
                  "type": "boolean",
                  "description": "The current status of the content's 'reviewed' attribute.\n\n**Since**: 3700.16.0"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReviewStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/announcements": {
      "get": {
        "tags": [
          "course announcements"
        ],
        "summary": "Get Announcements",
        "description": "Return a list of Course Announcements. Users with the 'course.announcements.VIEW' entitlement can view 'available' Course Announcements. Users with the 'course.announcements.VIEW' & 'course.announcements.MODIFY' entitlement can view 'available' & 'unavailable' Course Announcements.\n\n**Since**: 3500.3.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for announcements with a created date relative to this value.  'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3500.3.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.  Defaults to greaterOrEqual if not specified. 'lessThan' also an accepted value.\n\n**Since**: 3500.3.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search for announcements with a modified date relative to this value.  'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3500.3.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Used alongside the 'modified' search parameter. Defaults to greaterOrEqual if not specified. 'lessThan' also an accepted value.\n\n**Since**: 3500.3.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "title",
            "in": "query",
            "description": "Search for announcements with a title like the provided value.\n\n**Since**: 3500.3.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"title(desc),created\" Supported fields are:\n\n- title\n- modified\n\n**Since**: 3500.3.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseAnnouncement"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "course announcements"
        ],
        "summary": "Create Announcement",
        "description": "Create a Course Announcement. Users with the 'course.announcements.CREATE' and 'course.announcements.VIEW' entitlements can create Course Announcements.\n\n**Since**: 3500.3.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of this Announcement."
                },
                "body": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The message body of the Announcement. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "draft": {
                  "type": "boolean",
                  "description": "An indication of whether or not the Announcement is in draft status."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the course to students.",
                  "title": "Availability",
                  "properties": {
                    "duration": {
                      "type": "object",
                      "description": "Duration indicates when the System Announcement is Available based on whether it is Permanent or if the date/time of the request falls within its Start & End dates.",
                      "title": "Duration",
                      "properties": {
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this Announcement starts being Available."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this Announcement stops being Available."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CourseAnnouncement"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to create announcements",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/announcements/{announcementId}": {
      "get": {
        "tags": [
          "course announcements"
        ],
        "summary": "Get Announcement",
        "description": "Get a Course Announcement. Users with the 'course.announcements.VIEW' entitlement can view 'available' Course Announcements. Users with the 'course.announcements.VIEW' & 'course.announcements.MODIFY' entitlement can view 'available' & 'unavailable' Course Announcements.\n\n**Since**: 3500.3.0",
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseAnnouncement"
            }
          },
          "403": {
            "description": "The currently authenticated user has insufficient privileges to update an announcement",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Announcement cannot be found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course announcements"
        ],
        "summary": "Delete Announcement",
        "description": "Delete a Course Announcement. Users with the 'course.announcements.DELETE' and 'course.announcements.VIEW' entitlements can delete Course Announcements.\n\n**Since**: 3500.3.0",
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid request data was found while deleting an announcement",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The currently authenticated user has insufficient privileges to delete an announcement",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Announcement cannot be found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course announcements"
        ],
        "summary": "Update Announcement",
        "description": "Update a Course Announcement. Users with the 'course.announcements.MODIFY' and 'course.announcements.VIEW' entitlements can update Course Announcements.\n\n**Since**: 3500.3.0",
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of this Announcement."
                },
                "body": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The message body of the Announcement. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "draft": {
                  "type": "boolean",
                  "description": "An indication of whether or not the Announcement is in draft status."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the course to students.",
                  "title": "Availability",
                  "properties": {
                    "duration": {
                      "type": "object",
                      "description": "Duration indicates when the System Announcement is Available based on whether it is Permanent or if the date/time of the request falls within its Start & End dates.",
                      "title": "Duration",
                      "properties": {
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this Announcement starts being Available."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this Announcement stops being Available."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseAnnouncement"
            }
          },
          "400": {
            "description": "An invalid request state was found while updating an announcement",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The currently authenticated user has insufficient privileges to update an announcement",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Announcement cannot be found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions": {
      "get": {
        "tags": [
          "course assessments"
        ],
        "summary": "Get Questions",
        "description": "Get the list of questions for an Ultra Assessment.\n\nEither 'course.assessment.CREATE' or 'course.assessment.MODIFY' entitlement is needed to view questions. If the assessment has the external submissions setting enabled, then either the 'course.assessment.VIEW' or 'course.assessment.EXECUTE' entitlement is needed to view questions, and only presentation questions are returned.\n\n**Since**: 3300.9.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "assessmentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Question"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "404": {
            "description": "Access Denied",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "course assessments"
        ],
        "summary": "Create Question",
        "description": "Creates a question for an Ultra Assessment.\n\nThe 'course.assessment.MODIFY' entitlement is needed to create a question.\n\n**Since**: 3300.9.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "assessmentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "text"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of the question."
                },
                "text": {
                  "type": "string",
                  "description": "The main text content for the question. It may include plain and formatted text, and all kinds of content supported by the full text editor."
                },
                "position": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Position of the Question on the Assessment Canvas."
                },
                "points": {
                  "type": "number",
                  "description": "The point value for the question."
                },
                "correctResponseFeedback": {
                  "type": "string",
                  "description": "Feedback displayed to students when their submitted response is correct."
                },
                "incorrectResponseFeedback": {
                  "type": "string",
                  "description": "Feedback displayed to students when their submitted response is incorrect."
                },
                "instructorNotes": {
                  "type": "string",
                  "description": "Text added to the question as a note for the instructor. It is not intended to be displayed to students."
                },
                "questionHandler": {
                  "$ref": "#/definitions/QuestionHandler"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to create questions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "The question can not be created because it conflicts with other data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions/{questionId}": {
      "get": {
        "tags": [
          "course assessments"
        ],
        "summary": "Get Question By Id",
        "description": "Get a question by Id from an Ultra Assessment.\n\nEither 'course.assessment.CREATE' or 'course.assessment.MODIFY' entitlement is needed to view a question.\n\n**Since**: 3300.9.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "assessmentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Access Denied",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Question is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course assessments"
        ],
        "summary": "Delete Question",
        "description": "Delete a question, specified by Id, from an Ultra Assessment.\n\nThe 'course.assessment.DELETE' entitlement is needed to perform the operation.\n\n**Since**: 3300.9.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "assessmentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Access Denied",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Question is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course assessments"
        ],
        "summary": "Update Question",
        "description": "Update a question, specified by Id, from an Ultra Assessment.\n\nThe 'course.assessment.MODIFY' entitlement is needed to perform the operation.\n\n**Since**: 3300.9.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "assessmentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of the question."
                },
                "text": {
                  "type": "string",
                  "description": "The main text content for the question. It may include plain and formatted text, and all kinds of content supported by the full text editor."
                },
                "position": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Position of the Question on the Assessment Canvas."
                },
                "points": {
                  "type": "number",
                  "description": "The point value for the question."
                },
                "correctResponseFeedback": {
                  "type": "string",
                  "description": "Feedback displayed to students when their submitted response is correct."
                },
                "incorrectResponseFeedback": {
                  "type": "string",
                  "description": "Feedback displayed to students when their submitted response is incorrect."
                },
                "instructorNotes": {
                  "type": "string",
                  "description": "Text added to the question as a note for the instructor. It is not intended to be displayed to students."
                },
                "questionHandler": {
                  "$ref": "#/definitions/QuestionHandler"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/catalog/categories/{categoryType}": {
      "get": {
        "tags": [
          "course categories"
        ],
        "summary": "Get Categories",
        "description": "Returns a list of categories of the provided type (course or organization)\n\nEntitlement system.course-categories.VIEW required\n\nUsers with entitlement \"system.course.categories.MODIFY\" for course categories, or \"system.org.categories.MODIFY\" for organization categories can view all fields and all categories.\n\nUsers with system.course-categories.VIEW but not the corresponding MODIFY entitlements have read access to all properties except:\n\n- restricted\n- institutionRoleIds\nIn addition, users without the corresponding MODIFY entitlement have access to a restricted category only if their institution role matches one of the roles in the institutionRoleIds list for that category.\n\n**Since**: 3600.0.0",
        "parameters": [
          {
            "name": "categoryType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Course",
              "Organization"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"title(desc),start\" Supported fields are:\n\n- id\n- categoryId\n- title\n- available\n- created\n\n**Since**: 3700.6.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "title",
            "in": "query",
            "description": "Search for categories with titles that contain this value.\n\n**Since**: 3700.8.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Search for categories with category IDs that contain this value.\n\n**Since**: 3700.8.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for categories with a created date relative to this value.\n\n**Since**: 3700.8.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3700.8.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "dataSourceId",
            "in": "query",
            "description": "Search for categories with a data source id matching this value.\n\n**Since**: 3700.9.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "frontPage",
            "in": "query",
            "description": "Search for categories with a front page indicator matching this value.\n\n**Since**: 3700.9.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "available",
            "in": "query",
            "description": "Search for categories with availability matching this value.\n\n**Since**: 3700.9.0",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Category"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "The request specified invalid or unsupported sort parameters",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to view categories of the provided type",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "course categories"
        ],
        "summary": "Create Category",
        "description": "Creates a new category of the provided type as defined in the request body\n\nEntitlement system.course.categories.MODIFY required to create course categories Entitlement system.org.categories.MODIFY required to create organization categories\n\n**Since**: 3600.0.0",
        "parameters": [
          {
            "name": "categoryType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Course",
              "Organization"
            ]
          },
          {
            "in": "body",
            "name": "category",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "available",
                "categoryId",
                "title"
              ],
              "properties": {
                "parentId": {
                  "type": "string",
                  "description": "The ID of this category's parent category"
                },
                "categoryId": {
                  "type": "string",
                  "description": "The human-readable id of the category"
                },
                "title": {
                  "type": "string",
                  "description": "The title of category"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the category"
                },
                "frontPage": {
                  "type": "boolean",
                  "description": "Boolean indicating whether or not the category should appear on the catalog front page"
                },
                "available": {
                  "type": "boolean",
                  "description": "Boolean indicating whether or not the category is available"
                },
                "restricted": {
                  "type": "boolean",
                  "description": "Boolean indicating whether or not category is available to all roles, or restricted to a specific set of roles."
                },
                "institutionRoleIds": {
                  "type": "array",
                  "description": "The roles for which this category is available, if category is set to restricted. Not populated for lists of categories, only for individual category",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to create categories of the provided type",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "The request specified data which is in conflict with existing data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}": {
      "get": {
        "tags": [
          "course categories"
        ],
        "summary": "Get Category",
        "description": "Returns the category corresponding the provided type (course or organization) and ID\n\nEntitlement system.course-categories.VIEW required\n\nUsers with entitlement \"system.course.categories.MODIFY\" for course categories, or \"system.org.categories.MODIFY\" for organization categories can view all fields and all categories.\n\nUsers with system.course-categories.VIEW but not the corresponding MODIFY entitlements have read access to all properties except:\n\n- restricted\n- institutionRoleIds\nIn addition, users without the corresponding MODIFY entitlement have access to a restricted category only if their institution role matches one of the roles in the institutionRoleIds list for that category.\n\n**Since**: 3600.0.0",
        "parameters": [
          {
            "name": "categoryType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Course",
              "Organization"
            ]
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "403": {
            "description": "The user does not have entitlements to delete categories of the provided type",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "No such category exists",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course categories"
        ],
        "summary": "Delete Category",
        "description": "Deletes the category corresponding to the provided type and id\n\nEntitlement system.course.categories.MODIFY required to delete a course category Entitlement system.org.categories.MODIFY required to delete an organization category\n\n**Since**: 3600.0.0",
        "parameters": [
          {
            "name": "categoryType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Course",
              "Organization"
            ]
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The user does not have entitlements to delete categories of the provided type",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "No such category exists",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course categories"
        ],
        "summary": "Update Category",
        "description": "Updates the category corresponding to the provided type and id.\n\nEntitlement system.course.categories.MODIFY required to modify course categories Entitlement system.org.categories.MODIFY required to modify organization categories\n\n**Since**: 3600.0.0",
        "parameters": [
          {
            "name": "categoryType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Course",
              "Organization"
            ]
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "category",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of category"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the category"
                },
                "frontPage": {
                  "type": "boolean",
                  "description": "Boolean indicating whether or not the category should appear on the catalog front page"
                },
                "available": {
                  "type": "boolean",
                  "description": "Boolean indicating whether or not the category is available"
                },
                "restricted": {
                  "type": "boolean",
                  "description": "Boolean indicating whether or not category is available to all roles, or restricted to a specific set of roles."
                },
                "institutionRoleIds": {
                  "type": "array",
                  "description": "The roles for which this category is available, if category is set to restricted. Not populated for lists of categories, only for individual category",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to create categories of the provided type",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses": {
      "get": {
        "tags": [
          "course categories"
        ],
        "summary": "Get Memberships",
        "description": "Get courses associated with the provided category. Entitlement system.course-categories.VIEW required\n\n**Since**: 3600.0.0",
        "parameters": [
          {
            "name": "categoryType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Course",
              "Organization"
            ]
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>course</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CategoryCourseMembership"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId}": {
      "put": {
        "tags": [
          "course categories"
        ],
        "summary": "Create Membership",
        "description": "Creates a category/course association. The course defined by courseId must match the categoryType.\n\nThe 'admin.course.categorize.MODIFY' entitlement is needed for course associations The 'admin.org.categorize.MODIFY' entitlement is needed for organization associations\n\n**Since**: 3600.0.0",
        "parameters": [
          {
            "name": "categoryType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Course",
              "Organization"
            ]
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CategoryCourseMembership"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course categories"
        ],
        "summary": "Delete Membership",
        "description": "Deletes a category/course association\n\nThe 'admin.course.categorize.MODIFY' entitlement is needed for course associations The 'admin.org.categorize.MODIFY' entitlement is needed for organization associations\n\n**Since**: 3600.0.0",
        "parameters": [
          {
            "name": "categoryType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Course",
              "Organization"
            ]
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/catalog/categories/{categoryType}/{parentId}/children": {
      "get": {
        "tags": [
          "course categories"
        ],
        "summary": "Get Child Categories",
        "description": "Returns a list of categories which are children of the category corresponding to the provided type (course or organization) and Id\n\nEntitlement system.course-categories.VIEW required\n\nUsers with entitlement \"system.course.categories.MODIFY\" for course categories, or \"system.org.categories.MODIFY\" for organization categories can view all fields and all categories.\n\nUsers with system.course-categories.VIEW but not the corresponding MODIFY entitlements have read access to all properties except:\n\n- restricted\n- institutionRoleIds\nIn addition, users without the corresponding MODIFY entitlement have access to a restricted category only if their institution role matches one of the roles in the institutionRoleIds list for that category.\n\n**Since**: 3600.0.0",
        "parameters": [
          {
            "name": "categoryType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Course",
              "Organization"
            ]
          },
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"title(desc),start\" Supported fields are:\n\n- id\n- categoryId\n- title\n- available\n- created\n\n**Since**: 3700.6.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "title",
            "in": "query",
            "description": "Search for categories with titles that contain this value.\n\n**Since**: 3700.8.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Search for categories with category IDs that contain this value.\n\n**Since**: 3700.8.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for categories with a created date relative to this value.\n\n**Since**: 3700.8.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3700.8.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "dataSourceId",
            "in": "query",
            "description": "Search for categories with a data source id matching this value.\n\n**Since**: 3700.9.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "frontPage",
            "in": "query",
            "description": "Search for categories with a front page indicator matching this value.\n\n**Since**: 3700.9.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "available",
            "in": "query",
            "description": "Search for categories with availability matching this value.\n\n**Since**: 3700.9.0",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Category"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "The user does not have entitlements to view categories of the provided type",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/categories": {
      "get": {
        "tags": [
          "course categories"
        ],
        "summary": "Get Memberships",
        "description": "Get categories associated with the provided course. Entitlement system.course-categories.VIEW required\n\n**Since**: 3600.0.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>category</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseCategoryMembership"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/attempts/{attemptId}/files": {
      "get": {
        "tags": [
          "course grade attempts"
        ],
        "summary": "Get Attempt File Meta Data List",
        "description": "Get the list of file metadata for a Student Submission associated to the course and attempt.\n\n- Id\n- Name\n\n**Since**: 3400.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "attemptId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AttemptFile"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "course grade attempts"
        ],
        "summary": "Attach File",
        "description": "\n\nAttach a file to an Attempt for a Student Submission. Currently only supports Classic/9.1 Course Assignments. </p>\n\n**Since**: 3500.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "attemptId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "attemptFileTOPubV1",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the file which has been attached to an Attempt including the file extension."
                },
                "uploadId": {
                  "type": "string"
                },
                "resourceId": {
                  "type": "string",
                  "description" : "A write-only property used to attach a resource file to an Attempt."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AttemptFile"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/attempts/{attemptId}/files/{attemptFileId}": {
      "get": {
        "tags": [
          "course grade attempts"
        ],
        "summary": "Get Attempt File Meta Data",
        "description": "Get the file metadata for a Student Submission associated to the course and attempt.\n\n- Id\n- Name\n\n**Since**: 3400.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "attemptId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "attemptFileId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttemptFile"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course grade attempts"
        ],
        "summary": "Delete Attachment",
        "description": "Delete the file for a Student Submission associated to an attempt.\n\nThe student who owns the file can delete it while the attempt is in progress.\n\n**Since**: 3500.2.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "attemptId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "attemptFileId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/attempts/{attemptId}/files/{attemptFileId}/download": {
      "get": {
        "tags": [
          "course grade attempts"
        ],
        "summary": "Download",
        "description": "Download the contents of the file for a Student Submission.\n\n**Since**: 3400.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "attemptId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "attemptFileId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/gradeNotations": {
      "get": {
        "tags": [
          "course grade notations"
        ],
        "summary": "Get Grade Notations",
        "description": "Returns a list of grade notations.\n\nThe entitlement \"course.user.grades.VIEW\" is needed.\n\n**Since**: 3200.13.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GradeNotation"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "course grade notations"
        ],
        "summary": "Create Grade Notation",
        "description": "Create a grade notation on this course.\n\nThe entitlement \"course.gradebook.MODIFY\" is needed.\n\n**Since**: 3200.13.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "gradeNotationInput",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "code",
                "description"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "description": "The performance code associated with the grade notation."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the grade notation."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GradeNotation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/gradeNotations/{gradeNotationId}": {
      "get": {
        "tags": [
          "course grade notations"
        ],
        "summary": "Get Grade Notation",
        "description": "Returns a specific grade notation.\n\nThe entitlement \"course.user.grades.VIEW\" is needed.\n\n**Since**: 3200.13.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "gradeNotationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradeNotation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course grade notations"
        ],
        "summary": "Delete Grade Notation",
        "description": "Delete a specific grade notation.\n\nThe entitlement \"course.gradebook.MODIFY\" is needed.\n\n**Since**: 3200.13.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "gradeNotationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course grade notations"
        ],
        "summary": "Update Grade Notation",
        "description": "Update a grade notation on this course.\n\nThe entitlement \"course.gradebook.MODIFY\" is needed.\n\n**Since**: 3200.14.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "gradeNotationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "gradeNotationInput",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "The performance code associated with the grade notation."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the grade notation."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradeNotation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/categories": {
      "get": {
        "tags": [
          "course gradebook categories"
        ],
        "summary": "Get Gradebook Categories",
        "description": "Returns a list of gradebook categories in a particular course.\n\nUsers with entitlements 'course.gradebook.MODIFY' or 'course.user.grades.VIEW', or users enrolled in the specified course can retrieve the list of gradebook categories.\n\n**Since**: 3400.2.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/DefaultRowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/DefaultRowBasedPagingParams.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GradebookCategory"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/categories/{categoryId}": {
      "get": {
        "tags": [
          "course gradebook categories"
        ],
        "summary": "Get Gradebook Category",
        "description": "Returns the details of a gradebook category\n\nUsers with entitlements 'course.gradebook.MODIFY' or 'course.user.grades.VIEW', or users enrolled in the specified course can retrieve gradebook category details.\n\n**Since**: 3400.2.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "the ID of the category to return",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradebookCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/schemas": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get Grade Schemas",
        "description": "Returns a list of grade schemas associated with the specified course.\n\nUsers with entitlements 'course.gradebook.MODIFY' or 'course.user.grades.VIEW', or users enrolled in the specified course can retrieve grade schema details.\n\nA subset of the schema properties are available to enrolled users without the 'course.gradebook.MODIFY' entitlement:\n\n- id\n- scaleType\n\n**Since**: 3300.2.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GradeSchema"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Access Denied",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "course grades"
        ],
        "summary": "Create Grade Schema",
        "description": "Create a Tabular Grade Schema on this course. Currently only supports Classic/9.1 Courses.\n\nThe entitlement \"course.gradebook.MODIFY\" is needed.\n\n**Since**: 3300.2.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "gradeSchemaTOPubV1",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "The externalId associated with this grade schema."
                },
                "title": {
                  "type": "string",
                  "description": "The title of this grade schema."
                },
                "description": {
                  "type": "string",
                  "description": "The description of this grade schema."
                },
                "scaleType": {
                  "type": "string",
                  "description": "The scale type of this grade schema.\n\n\n| Type      | Description\n | --------- | --------- |\n| Percent |  |\n| Score |  |\n| Tabular |  |\n| Text |  |\n| CompleteIncomplete |  |\n",
                  "enum": [
                    "Percent",
                    "Score",
                    "Tabular",
                    "Text",
                    "CompleteIncomplete"
                  ]
                },
                "symbols": {
                  "type": "array",
                  "description": "The list of grade symbols for this grade schema. Only returned for Tabular scaleType schemas.",
                  "items": {
                    "$ref": "#/definitions/GradeSymbol"
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GradeSchema"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/schemas/{schemaId}": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get Grade Schema",
        "description": "Loads the grade schema associated with the specified course and schema Id.\n\nUsers with entitlements 'course.gradebook.MODIFY' or 'course.user.grades.VIEW', or users enrolled in the specified course can retrieve the grade schema details.\n\nA subset of the schema properties are available to enrolled users without the 'course.gradebook.MODIFY' entitlement:\n\n- id\n- scaleType\n\n**Since**: 3300.2.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeSchemaIdParam.schemaId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradeSchema"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course grades"
        ],
        "summary": "Delete Grade Schema",
        "description": "Deletes the grade schema associated with the specified course and schema Id.\n\nRequires entitlement 'course.gradebook.MODIFY'\n\nGrade schemas in Ultra courses may not be deleted\n\nA schema must be removable (not in-use, and either tabular or user-created) to be deleted\n\n**Since**: 3300.2.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeSchemaIdParam.schemaId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course grades"
        ],
        "summary": "Update Grade Schema",
        "description": "\n\nUpdates the grade schema associated with the specified course and schema Id. </p>\n\nRequires entitlement 'course.gradebook.MODIFY' </p>\n\nA schema must have a scaleType of Tabular to be updated </p>\n\nIf updating the symbols field, the following criteria must be true:\n\n- All symbols for the schema must be included. Any existing symbols not included in the patch will be deleted.\n- There must be at least 1 symbol for schemas associated with Classic courses, and 2 for Ultra courses.\n- When sorted descending by lowerBound, The lowerBound of a symbol must be equal to the upperBound of the following symbol.  In other words,      there should be no gaps or overlaps between the symbols.\n- The lowerBound, upperBound and absoluteValue of all symbols must be nonnegative.\n- The text field must be unique for each symbol in a schema.\n- The lowerBound and upperBound fields must have a maximum of 3 digits after the decimal point.\n- The absoluteValue field must have a maximum of 3 digits after the decimal point for Classic courses, and 4 for Ultra courses.-  -  </p>\n\n**Since**: 3300.2.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeSchemaIdParam.schemaId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "The externalId associated with this grade schema."
                },
                "title": {
                  "type": "string",
                  "description": "The title of this grade schema."
                },
                "description": {
                  "type": "string",
                  "description": "The description of this grade schema."
                },
                "symbols": {
                  "type": "array",
                  "description": "The list of grade symbols for this grade schema. Only returned for Tabular scaleType schemas.",
                  "items": {
                    "$ref": "#/definitions/GradeSymbol"
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradeSchema"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/gradebook/columns": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get Grade Columns",
        "description": "Returns a list of grade columns.\n\nThe entitlement \"course.gradebook.MODIFY\" is needed. Alternatively, student users may view the grade columns if they are enrolled in the course, and the mygrade tool is available in the course, and the columns are visible to the student. Observers may view grade columns if course access is allowed for observers and the associated observee is a student that satisfies all conditions required by a student user to view grade columns.\n\nStudent or observer users may view a limited subset of grade column fields:\n\n- id\n- name\n- displayName\n- description\n- externalGrade\n- contentId\n- score.possible\n- scoreProviderHandle\n- grading.type\n- grading.due\n- grading.attemptsAllowed\n- grading.scoringModel\n- formula\n- availability.available\n\n**Since**: 3200.10.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "contentId",
            "in": "query",
            "description": "Search for grade columns associated with this content item.\n\n**Since**: 3000.11.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "displayName",
            "in": "query",
            "description": "The 'displayName' value to use as search criteria.\n\nCurrently only supports 'contains' searches.\n\n**Since**: 3300.2.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The 'name' value to use as search criteria.\n\nCurrently only supports 'contains' searches.\n\n**Since**: 3900.11.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "gradebookCategoryId",
            "in": "query",
            "description": "Search for grade columns associated with the 'gradebookCategoryId'.\n\ncomma-delimited list of the gradebook category ids.\n\n**Since**: 3900.11.0",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GradeColumnV2"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "course grades"
        ],
        "summary": "Create Grade Column",
        "description": "Create a manual grade column. The entitlement \"course.gradebook.MODIFY\" is needed.\n\n**Since**: 3200.10.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "grading",
                "name"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "The externalId for this grade column"
                },
                "externalToolId": {
                  "type": "string",
                  "description": "The externalId for this grade column\n\n**Since**: 3500.2.0"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the grade column."
                },
                "displayName": {
                  "type": "string",
                  "description": "The display name of the grade column. Only applicable for Classic courses. Ultra courses will simply use the `name` field.\n\n**Since**: 3300.2.0"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the grade column."
                },
                "externalGrade": {
                  "type": "boolean",
                  "description": "Whether this grade column is an external grade column."
                },
                "score": {
                  "type": "object",
                  "description": "Settings controlling the numerical scoring of this grade column.",
                  "title": "Score",
                  "properties": {
                    "possible": {
                      "type": "number",
                      "description": "The points possible for this grade column."
                    }
                  }
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling the availability/visibility of grade column data.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether this grade column is available to students\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may view the grade column. |\n| No | Students may not view the grade column. |\n",
                      "enum": [
                        "Yes",
                        "No"
                      ]
                    }
                  }
                },
                "grading": {
                  "type": "object",
                  "description": "Settings controlling whether numerical and text grade values for this grade column are calculated, determined based on attempts, or manually entered.",
                  "title": "Grading",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of Grading settings for this Grade Column.\n\n\n| Type      | Description\n | --------- | --------- |\n| Attempts | Indicates score and grade values are determined based on user attempts |\n| Calculated | Indicates score and grade values are determined by applying a calculated formula. |\n| Manual | Indicates score and grade values are manually entered. |\n",
                      "enum": [
                        "Attempts",
                        "Calculated",
                        "Manual"
                      ]
                    },
                    "due": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which attempts are due for the grade column."
                    },
                    "attemptsAllowed": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Number of attempts allowed for the grade column."
                    },
                    "scoringModel": {
                      "type": "string",
                      "description": "The scoring model for the submitted grade column attempts.\n\n\n| Type      | Description\n | --------- | --------- |\n| Last |  |\n| Highest |  |\n| Lowest |  |\n| First |  |\n| Average |  |\n",
                      "enum": [
                        "Last",
                        "Highest",
                        "Lowest",
                        "First",
                        "Average"
                      ]
                    },
                    "schemaId": {
                      "type": "string",
                      "description": "The ID of the grade schema associated with this grade column. Mutable since 3400.2.0\n\n**Since**: 3200.13.0"
                    },
                    "anonymousGrading": {
                      "type": "object",
                      "description": "Settings for anonymous grading",
                      "title": "AnonymousGrading",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of AnonymousGrading settings for this Attempts based Grade Column.\n\n\n| Type      | Description\n | --------- | --------- |\n| None | Indicates anonymous grading is not enabled. |\n| AfterAllGraded | Indicates anonymized grades are released after all attempts have been graded. |\n| Date | Indicates anonymized grades are released after a specified release date. |\n",
                          "enum": [
                            "None",
                            "AfterAllGraded",
                            "Date"
                          ]
                        },
                        "releaseAfter": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Date after which grades are released from being anonymized, if AnonymousGrading type is 'Date'."
                        }
                      },
                      "required": [
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "anonymousGrading",
                    "type"
                  ]
                },
                "gradebookCategoryId": {
                  "type": "string",
                  "description": "The gradebook category ID for the grade column.\n\n**Since**: 3400.2.0"
                },
                "includeInCalculations": {
                  "type": "boolean",
                  "description": "Indicates whether or not this column is included in gradebook calculations. Cannot be set for Ultra courses. Default: true\n\n**Since**: 3800.4.0"
                },
                "showStatisticsToStudents": {
                  "type": "boolean",
                  "description": "Indicates whether or not column statistics are shown to students. Read-only for Ultra courses. Default: false\n\n**Since**: 3800.4.0"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GradeColumnV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get Grade Column",
        "description": "Loads a specific grade column.\n\nThe entitlement \"course.gradebook.MODIFY\" is needed. Alternatively, student users may view the grade column if they are enrolled in the course, and the mygrade tool is available in the course, and the column is visible to the student. Observers may view the grade column if course access is allowed for observers and the associated observee is a student that satisfies all conditions required by a student user to view grade columns.\n\nStudent or observer users may view a limited subset of grade column fields:\n\n- id\n- name\n- description\n- externalGrade\n- contentId\n- score.possible\n- grading.type\n- grading.due\n- grading.attemptsAllowed\n- grading.scoringModel\n- formula\n- availability.available\n\n**Since**: 3200.10.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradeColumnV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course grades"
        ],
        "summary": "Delete Grade Column",
        "description": "Delete a specific grade column. The entitlement \"course.gradebook.MODIFY\" is needed.\n\n**Since**: 3200.10.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "name": "onlyIfEmpty",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Insufficient Permission to delete the requested resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Requested resource could not be found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict in deleting this grade column due to associated grades",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course grades"
        ],
        "summary": "Update Grade Column",
        "description": "Update a manual grade column. The entitlement \"course.gradebook.MODIFY\" is needed.\n\n**Since**: 3200.10.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "The externalId for this grade column"
                },
                "externalToolId": {
                  "type": "string",
                  "description": "The externalId for this grade column\n\n**Since**: 3500.2.0"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the grade column."
                },
                "displayName": {
                  "type": "string",
                  "description": "The display name of the grade column. Only applicable for Classic courses. Ultra courses will simply use the `name` field.\n\n**Since**: 3300.2.0"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the grade column."
                },
                "externalGrade": {
                  "type": "boolean",
                  "description": "Whether this grade column is an external grade column."
                },
                "score": {
                  "type": "object",
                  "description": "Settings controlling the numerical scoring of this grade column.",
                  "title": "Score",
                  "properties": {
                    "possible": {
                      "type": "number",
                      "description": "The points possible for this grade column."
                    }
                  }
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling the availability/visibility of grade column data.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether this grade column is available to students\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may view the grade column. |\n| No | Students may not view the grade column. |\n",
                      "enum": [
                        "Yes",
                        "No"
                      ]
                    }
                  }
                },
                "grading": {
                  "type": "object",
                  "description": "Settings controlling whether numerical and text grade values for this grade column are calculated, determined based on attempts, or manually entered.",
                  "title": "Grading",
                  "properties": {
                    "due": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which attempts are due for the grade column."
                    },
                    "attemptsAllowed": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Number of attempts allowed for the grade column."
                    },
                    "scoringModel": {
                      "type": "string",
                      "description": "The scoring model for the submitted grade column attempts.\n\n\n| Type      | Description\n | --------- | --------- |\n| Last |  |\n| Highest |  |\n| Lowest |  |\n| First |  |\n| Average |  |\n",
                      "enum": [
                        "Last",
                        "Highest",
                        "Lowest",
                        "First",
                        "Average"
                      ]
                    },
                    "schemaId": {
                      "type": "string",
                      "description": "The ID of the grade schema associated with this grade column. Mutable since 3400.2.0\n\n**Since**: 3200.13.0"
                    },
                    "anonymousGrading": {
                      "type": "object",
                      "description": "Settings for anonymous grading",
                      "title": "AnonymousGrading",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of AnonymousGrading settings for this Attempts based Grade Column.\n\n\n| Type      | Description\n | --------- | --------- |\n| None | Indicates anonymous grading is not enabled. |\n| AfterAllGraded | Indicates anonymized grades are released after all attempts have been graded. |\n| Date | Indicates anonymized grades are released after a specified release date. |\n",
                          "enum": [
                            "None",
                            "AfterAllGraded",
                            "Date"
                          ]
                        },
                        "releaseAfter": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Date after which grades are released from being anonymized, if AnonymousGrading type is 'Date'."
                        }
                      }
                    }
                  }
                },
                "gradebookCategoryId": {
                  "type": "string",
                  "description": "The gradebook category ID for the grade column.\n\n**Since**: 3400.2.0"
                },
                "includeInCalculations": {
                  "type": "boolean",
                  "description": "Indicates whether or not this column is included in gradebook calculations. Cannot be set for Ultra courses. Default: true\n\n**Since**: 3800.4.0"
                },
                "showStatisticsToStudents": {
                  "type": "boolean",
                  "description": "Indicates whether or not column statistics are shown to students. Read-only for Ultra courses. Default: false\n\n**Since**: 3800.4.0"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradeColumnV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}/attempts": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get Column Attempts",
        "description": "Returns a list of attempts associated with the specified grade column.\n\nThe 'course.gradebook.MODIFY' entitlement is needed to view column attempts. Alternatively, if the 'userId' query parameter is specified, and the user making the request matches the specified 'userId', then the user may view his/her own attempt.  When querying an anonymous grade column, if the release criteria has not yet been met, then the 'userId' attribute will not be populated for the returned column attempts.  If the release criteria has not been met and the 'userId' query parameter is specified, a 403 response is returned, unless the requesting user matches the specified 'userId' value.\n\nA subset of attempt properties are available to a student when requesting his or her own attempts:\n\n- id\n- userId\n- groupAttemptId\n- status\n- displayGrade.scaleType\n- displayGrade.score\n- displayGrade.text\n- groupOverride\n- feedback\n- studentComments\n- studentSubmission\n- exempt\n- created\n\nWhen this endpoint is called by the API Gateway User, the response will only contain attributes visible to a Grader. If an Attempt is InProgress, then a Student's submission & comments would not be visible to the API Gateway User. If an Attempt is NeedsGrading, then a Student's submission & comments are visible to the API Gateway User. </p> If the caller has the course.assessment.EXECUTE entitlement, and the attempt is associated with an assessment where the flag to require secure taking is enabled, and the attempt status is InProgress, then the studentSubmission is omitted unless the call comes from a secure browser.\n\nIf the caller has the course.assessment.EXECUTE entitlement, and the attempt is associated with an assessment where the flag to require secure reviewing is enabled, and the attempt status is not InProgress, then the studentSubmission is omitted unless the call comes from a secure browser.\n\n**Since**: 3300.0.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Search for grade column attempts submitted by this user. This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:jsmith                     |\n | userName   | userName:jsmith                       |\n | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 |\n \n\n**Since**: 3100.4.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "attemptStatuses",
            "in": "query",
            "description": "Search for grade column attempts with one of these statuses.\n\n**Since**: 3100.4.0\n\n\n| Type      | Description\n | --------- | --------- |\n| NotAttempted | none of the students in a group has submitted an attempt; applies only to group assessments |\n| Abandoned |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| InProgress | attempt activity has commenced, but has not been submitted for grading |\n| Suspended |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| Canceled |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| NeedsGrading | attempt has been submitted for grading, but has not been fully graded |\n| Completed | a grade has been entered for the attempt |\n| InProgressAgain | attempt has been graded, but more student activity occurred after the grade was entered; applies only to collaborative tools such as discussions |\n| NeedsGradingAgain | additional student activity occurring after a grade was entered requires that the attempt be regraded; applies only to collaborative tools such as discussions |\n",
            "required": false,
            "type": "string",
            "enum": [
              "NotAttempted",
              "Abandoned",
              "InProgress",
              "Suspended",
              "Canceled",
              "NeedsGrading",
              "Completed",
              "InProgressAgain",
              "NeedsGradingAgain"
            ]
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for attempts with created date relative to this value. 'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3800.0.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter. Defaults to greaterOrEqual if not specified.\n\n**Since**: 3800.0.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search for attempts with modified date relative to this value. 'modifiedCompare' may also be sent to control search behavior.\n\n**Since**: 3800.0.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Used alongside the 'modified' search parameter. Defaults to greaterOrEqual if not specified.\n\n**Since**: 3800.0.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "attemptDate",
            "in": "query",
            "description": "Search for attempts with attempt date relative to this value. 'attemptDateCompare' may also be sent to control search behavior.\n\n**Since**: 3800.0.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "attemptDateCompare",
            "in": "query",
            "description": "Used alongside the 'attemptDate' search parameter. Defaults to greaterOrEqual if not specified.\n\n**Since**: 3800.0.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AttemptV2"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "course grades"
        ],
        "summary": "Create Column Attempt",
        "description": "Create an Attempt on the specified Grade Column. Currently supports Classic and Ultra Course Assignments. Student attributes (studentSubmission & studentComments) can only be specified by Student Users. Grader attributes (text, score, notes & feedback, attemptDate) can only be specified by Grader Users. Graders must have the entitlement \"course.gradebook.MODIFY\" for the course.  Graders are allowed to create attempts that contain \"studentSubmission\" text on behalf of a student if the authenticated application for this request has the \"course.attempt.nonowner.SUBMIT\" entitlement and the attempt has a \"status\" of NeedsGrading. </p> If the caller has the course.assessment.EXECUTE entitlement, and the attempt is associated with an assessment where the flag to require secure taking is enabled, then the caller must be in a secure browser in order to create the attempt.\n\n**Since**: 3300.12.0",
        "parameters": [
          {
            "name": "columnId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "attemptInput",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "The user ID associated with this attempt.  Defaults to the authenticated user on create.  Can be specified as a user other than the authenticated user if the authenticated user has the \"course.gradebook.MODIFY\" entitlement and the authenticated application has the \"course.attempt.nonowner.SUBMIT\" entitlement."
                },
                "status": {
                  "type": "string",
                  "description": "The status of this attempt.\n\n\n| Type      | Description\n | --------- | --------- |\n| NotAttempted | none of the students in a group has submitted an attempt; applies only to group assessments |\n| Abandoned |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| InProgress | attempt activity has commenced, but has not been submitted for grading |\n| Suspended |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| Canceled |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| NeedsGrading | attempt has been submitted for grading, but has not been fully graded |\n| Completed | a grade has been entered for the attempt |\n| InProgressAgain | attempt has been graded, but more student activity occurred after the grade was entered; applies only to collaborative tools such as discussions |\n| NeedsGradingAgain | additional student activity occurring after a grade was entered requires that the attempt be regraded; applies only to collaborative tools such as discussions |\n",
                  "enum": [
                    "NotAttempted",
                    "Abandoned",
                    "InProgress",
                    "Suspended",
                    "Canceled",
                    "NeedsGrading",
                    "Completed",
                    "InProgressAgain",
                    "NeedsGradingAgain"
                  ]
                },
                "text": {
                  "type": "string",
                  "description": "The text grade associated with this attempt."
                },
                "score": {
                  "type": "number",
                  "description": "The score associated with this attempt."
                },
                "reconciliationMode": {
                  "type": "string",
                  "description": "The reconciliation mode to use when reconciling the attempt grade.  When modifying reconciliationMode, score is also required.  A new score will not be calculated based on the reconciliationMode\n\n**Since**: 3700.2.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Average |  |\n| Highest |  |\n| Lowest |  |\n| Custom |  |\n",
                  "enum": [
                    "Average",
                    "Highest",
                    "Lowest",
                    "Custom"
                  ]
                },
                "notes": {
                  "type": "string",
                  "description": "The instructor notes associated with this attempt."
                },
                "feedback": {
                  "type": "string",
                  "description": "The instructor feedback associated with this attempt."
                },
                "studentComments": {
                  "type": "string",
                  "description": "The student comments associated with this attempt."
                },
                "studentSubmission": {
                  "type": "string",
                  "description": "The student submission text associated with this attempt."
                },
                "exempt": {
                  "type": "boolean",
                  "description": "Whether the score associated with this attempt is ignored when computing the user's grade for the associated grade column."
                },
                "attemptDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return the attempt date associated with this attempt."
                },
                "attemptReceipt": {
                  "description": "The attempt receipt associated with this attempt.\n\n**Since**: 3900.22.0",
                  "$ref": "#/definitions/EmbeddedAttemptReceipt"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AttemptV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}/attempts/{attemptId}": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get Column Attempt",
        "description": "Loads the grade column attempt for the specified id.\n\nThe 'course.gradebook.MODIFY' entitlement is needed to view an attempt. Alternatively, if the user making the request is also the user associated with the attempt grade, then the user may view his/her own attempt.  When accessing an anonymous grade column attempt, if the release criteria has not yet been met, then the 'userId' attribute will not be populated for the returned attempt.\n\nA subset of attempt properties are available to a student when requesting his or her own attempt:\n\n- id\n- userId\n- groupAttemptId\n- status\n- displayGrade.scaleType\n- displayGrade.score\n- displayGrade.text\n- groupOverride\n- feedback\n- studentComments\n- studentSubmission\n- exempt\n- created\n\nWhen this endpoint is called by the API Gateway User, the response will only contain attributes visible to a Grader. If an Attempt is InProgress, then a Student's submission & comments would not be visible to the API Gateway User. If an Attempt is NeedsGrading, then a Student's submission & comments are visible to the API Gateway User. </p> If the caller has the course.assessment.EXECUTE entitlement, and the attempt is associated with an assessment where the flag to require secure taking is enabled, and the attempt status is InProgress, then the studentSubmission is omitted unless the call comes from a secure browser.\n\nIf the caller has the course.assessment.EXECUTE entitlement, and the attempt is associated with an assessment where the flag to require secure reviewing is enabled, and the attempt status is not InProgress, then the studentSubmission is omitted unless the call comes from a secure browser.\n\n**Since**: 3300.0.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "name": "attemptId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttemptV2"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course grades"
        ],
        "summary": "Update Column Attempt",
        "description": "Update an existing Attempt on a Grade Column. </p> Students can only modify the studentSubmission, studentComments and status of their own attempt if the status is InProgress. The status can only be set to NeedsGrading.  Doing so is the equivalent of submitting the attempt. </p> Instructors can modify all mutable fields but studentSubmission and studentComments as long as the status is not InProgress. Setting the status to Complete is the equivalent of posting a graded attempt.  The \"course.gradebook.MODIFY\" entitlement is required to update score, text, notes, feedback and set the status to Complete. </p> If the caller has the course.assessment.EXECUTE entitlement, and the attempt is associated with an assessment where the flag to require secure taking is enabled, then the caller must be in a secure browser in order to create the attempt. Classic course support since 3500.2.0\n\n**Since**: 3300.12.0",
        "parameters": [
          {
            "name": "columnId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "attemptId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "attemptInput",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "The status of this attempt.\n\n\n| Type      | Description\n | --------- | --------- |\n| NotAttempted | none of the students in a group has submitted an attempt; applies only to group assessments |\n| Abandoned |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| InProgress | attempt activity has commenced, but has not been submitted for grading |\n| Suspended |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| Canceled |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| NeedsGrading | attempt has been submitted for grading, but has not been fully graded |\n| Completed | a grade has been entered for the attempt |\n| InProgressAgain | attempt has been graded, but more student activity occurred after the grade was entered; applies only to collaborative tools such as discussions |\n| NeedsGradingAgain | additional student activity occurring after a grade was entered requires that the attempt be regraded; applies only to collaborative tools such as discussions |\n",
                  "enum": [
                    "NotAttempted",
                    "Abandoned",
                    "InProgress",
                    "Suspended",
                    "Canceled",
                    "NeedsGrading",
                    "Completed",
                    "InProgressAgain",
                    "NeedsGradingAgain"
                  ]
                },
                "text": {
                  "type": "string",
                  "description": "The text grade associated with this attempt."
                },
                "score": {
                  "type": "number",
                  "description": "The score associated with this attempt."
                },
                "reconciliationMode": {
                  "type": "string",
                  "description": "The reconciliation mode to use when reconciling the attempt grade.  When modifying reconciliationMode, score is also required.  A new score will not be calculated based on the reconciliationMode\n\n**Since**: 3700.2.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Average |  |\n| Highest |  |\n| Lowest |  |\n| Custom |  |\n",
                  "enum": [
                    "Average",
                    "Highest",
                    "Lowest",
                    "Custom"
                  ]
                },
                "notes": {
                  "type": "string",
                  "description": "The instructor notes associated with this attempt."
                },
                "feedback": {
                  "type": "string",
                  "description": "The instructor feedback associated with this attempt."
                },
                "studentComments": {
                  "type": "string",
                  "description": "The student comments associated with this attempt."
                },
                "studentSubmission": {
                  "type": "string",
                  "description": "The student submission text associated with this attempt."
                },
                "exempt": {
                  "type": "boolean",
                  "description": "Whether the score associated with this attempt is ignored when computing the user's grade for the associated grade column."
                },
                "attemptReceipt": {
                  "description": "The attempt receipt associated with this attempt.\n\n**Since**: 3900.22.0",
                  "$ref": "#/definitions/EmbeddedAttemptReceipt"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttemptV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}/users": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get Column Grades",
        "description": "Returns a list of grades associated with the specified grade column.  By default this operation does not include 'ReadyToPost' grades when returning grade details for calculated grade columns. This can be changed by setting the query parameter \"includeUnpostedGrades\" to true. The columns considered as 'ReadyToPost' are those which have a grade associated but have the status NEEDS_GRADING.\n\nUsers with entitlement 'course.gradebook.MODIFY' can retrieve grades for any or all enrolled users. Requests for grades in a columns whose attempts are not visible to instructors will return with a status of \"403 - Forbidden.\"\n\nEnrolled users without the 'course.gradebook.MODIFY' entitlement may only view their own grade; such users cannot retrieve grades of other users.  A request for the grade in a columns that has been hidden from students in the gradebook will return with a status \"403 - Forbidden.\".  A subset of grade properties are available to a student when requesting his or her own grades:\n\n- userId\n- columnId\n- status\n- displayGrade\n- exempt\n- feedback\n- changeIndex\n\n**Since**: 3300.0.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "$ref": "#/parameters/DefaultRowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/DefaultRowBasedPagingParams.limit"
          },
          {
            "name": "changeIndex",
            "in": "query",
            "description": "Retrieve only items modified after the given change index.\n\n**Since**: 3300.4.0",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "includeUnpostedGrades",
            "in": "query",
            "description": "If true, calculated columns exposed in the response will be processed such that any unposted grades are included in their calculations. If false, only posted grades will be included in calculations. Entitlements course.gradebook-grades.VIEW, course.gradebook.MODIFY and course.gradebook-grades.EXECUTE are required to use this parameter.\n\n**Since**: 3800.4.0",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GradeV2"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Access Denied",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Grade detail values have not yet been populated",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}/users/lastChanged": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get Column Grade Last Changed",
        "description": "Loads the grade column grade with the maximum change index. This change index can be used to determine the relative order in which the grades were created and/or updated. This operation does not include 'ReadyToPost' grades when determining the maximum change index grade.\n\nUsers with entitlement 'course.gradebook.MODIFY' can retrieve grades for any or all enrolled users. Requests for grades in a columns whose attempts are not visible to instructors will return with a status of \"403 - Forbidden.\"\n\nEnrolled users without the 'course.gradebook.MODIFY' entitlement may only view their own grade; such users cannot retrieve grades of other users. A request for the grade in a columns that has been hidden from students in the gradebook will return with a status \"403 - Forbidden.\".\n\n**Since**: 3300.4.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradeV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/GradeV2"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Grade detail values have not yet been populated",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}/users/{userId}": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get Column Grade",
        "description": "Loads the grade column grade for a specific user.  If grade details have yet to be entered for the specified user, then no grade details will be included in the returned grade object.  This operation does not include 'ReadyToPost' grades when returning grade details for calculated grade columns.\n\nUsers with entitlement 'course.gradebook.MODIFY' can retrieve grades for any or all enrolled users. Requests for grades in a columns whose attempts are not visible to instructors will return with a status of \"403 - Forbidden.\"\n\nEnrolled users without the 'course.gradebook.MODIFY' entitlement may only view their own grade; such users cannot retrieve grades of other users.  A request for the grade in a columns that has been hidden from students in the gradebook will return with a status \"403 - Forbidden.\".  A subset of grade properties are available to a student when requesting his or her own grades:\n\n- userId\n- columnId\n- status\n- displayGrade\n- exempt\n- feedback\n- changeIndex\n\n**Since**: 3300.0.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradeV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Grade detail values have not yet been populated",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course grades"
        ],
        "summary": "Update Column Grade",
        "description": "Update the grade column grade for a specific user, including the text grade, score, instructor notes and feedback, and exempt status.  When updating text grade or score, the resulting grade is always marked as 'Posted'.  This end-point, currently, does not support marking the grade as 'ReadyToPost'.  Grade overrides may be cleared by either specifying the 'score' attribute as null, or the 'text'; attribute as null, '', or '-' in the body of the request. The entitlement 'course.gradebook.MODIFY' is required to perform this operation.\n\n**Since**: 3300.0.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "The overridden text representation of this grade. This field is only used for overriding the grade via text value"
                },
                "score": {
                  "type": "number",
                  "description": "The overridden score of this grade. This field is only used for overriding the grade"
                },
                "notes": {
                  "type": "string",
                  "description": "The instructor notes associated with this grade. This notes field is used for grades on manual grade columns.   That is, when column.grading.type = Manual.  It is also used when column.grading.type = Attempts and the grade has been manually overridden."
                },
                "feedback": {
                  "type": "string",
                  "description": "The instructor feedback associated with this grade.  This feedback is used for grades on manual grade columns.   That is, when column.grading.type = Manual.  It is also used when column.grading.type = Attempts and the grade has been manually overridden."
                },
                "exempt": {
                  "type": "boolean",
                  "description": "Whether the score associated with this grade is ignored when computing the course grade."
                },
                "gradeNotationId": {
                  "type": "string",
                  "description": "The Id of a Grade Notation which can be optionally associated with this Grade. If a Grade Notation is specified for this Grade, then the DisplayGrade's Text attribute will contain the Grade Notation's Description."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradeV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Grade detail values have not yet been populated",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/gradebook/users/{userId}": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get User Grades",
        "description": "Loads the course grades for a specific user.\n\nUsers with entitlement \"course.gradebook.MODIFY\" have read access to all the properties of the collection results.\n\nUsers without entitlement \"course.gradebook.MODIFY\" requesting grades for themselves (i.e., userId = current user id) have read access to a restricted subset of properties of the collections result. These are the properties available to a student when requesting his or her own grades:\n\n- userId\n- columnId\n- status\n- text\n- score\n- exempt\n- feedback\n\n**Since**: 3300.0.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GradeV2"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/periods": {
      "get": {
        "tags": [
          "course grading periods"
        ],
        "summary": "Get Grading Periods",
        "description": "Returns a list of grading periods.\n\nThe entitlement \"course.gradebook.MODIFY\" or \"course.gradebook-metadata.VIEW\" is needed. Note that grading period Ids may be visible on GradableItems based on GradableItem (column / assignment) entitlement restrictions.\n\nThis endpoint supports paging, sorting, and the filtering of fields returned on result object.\n\n**Since**: 3300.3.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties,  with an optional \"(desc)\" or \"(asc)\" suffix to request an ascending or descending sort for that property. e.g. \"title(desc),description\" Supported fields are:\n\n- id\n- title\n- position\n- dateMode\n- description\n\n**Since**: 3300.2.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GradingPeriod"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "course grading periods"
        ],
        "summary": "Create Grading Period",
        "description": "Create a grading period.\n\nThe entitlement \"course.gradebook.MODIFY\" is needed.\n\nThis endpoint supports the filtering of fields returned on result object.\n\nThis endpoint has an optional request parameter \"associate\", which will default false. If associate=true, then when the period is updated all assignments in this course  with a due date within the bounds of the grading period's start and end dates (if set)  will associate themselves to the updated grading period.\n\n**Since**: 3300.3.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "associate",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of the grading period. Length is limited to 64 characters."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the grading period. Length is limited to 1000 characters."
                },
                "position": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The relative position of the grading period to other grading periods when viewed in the grade book."
                },
                "dateMode": {
                  "type": "string",
                  "description": "Property may be set to DoNotUseDates to explicitly blank dates,  in which case startDate and endDate are ignored; otherwise set to  UseDates; in this case startDate and endDate must be included and valid.\n\n\n| Type      | Description\n | --------- | --------- |\n| DoNotUseDates | Do not use dates |\n| UseDates | Use dates |\n",
                  "enum": [
                    "DoNotUseDates",
                    "UseDates"
                  ]
                },
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "If start and end are set, and start is before end, these define temporal  coverage of grading period which may be used to associate GradableItems (Columns) by due date. Start dates will be persisted as starting at  00:00:00 on the submitted day."
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "If start and end are set, and start is before end, these define temporal  coverage of grading period which may be used to associate GradableItems (Columns) by due date. End dates will be persisted as ending at  23:59:59 on the submitted day."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GradingPeriod"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/periods/{periodId}": {
      "get": {
        "tags": [
          "course grading periods"
        ],
        "summary": "Get Grading Period",
        "description": "Returns a specific grading period.\n\nThe entitlement \"course.gradebook.MODIFY\" or \"course.gradebook-metadata.VIEW\" is needed. Note that grading period Ids may be visible on GradableItems based on GradableItem (column / assignment) entitlement restrictions.\n\nThis endpoint supports the filtering of fields returned on result object.\n\n**Since**: 3300.3.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "periodId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradingPeriod"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course grading periods"
        ],
        "summary": "Delete Grading Period",
        "description": "Delete a specific grading period. The entitlement \"course.gradebook.MODIFY\" is needed.\n\n**Since**: 3300.3.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "periodId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course grading periods"
        ],
        "summary": "Update Grading Period",
        "description": "Update a grading period. The entitlement \"course.gradebook.MODIFY\" is needed.\n\nThis endpoint supports the filtering of fields returned on result object.\n\nThis endpoint has an optional request parameter \"associate\", which will default false. If associate=true, then when the period is updated all assignments in this course  with a due date within the bounds of the grading period's start and end dates (if set)  will associate themselves to the updated grading period.\n\n**Since**: 3300.3.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "periodId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "associate",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of the grading period. Length is limited to 64 characters."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the grading period. Length is limited to 1000 characters."
                },
                "position": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The relative position of the grading period to other grading periods when viewed in the grade book."
                },
                "dateMode": {
                  "type": "string",
                  "description": "Property may be set to DoNotUseDates to explicitly blank dates,  in which case startDate and endDate are ignored; otherwise set to  UseDates; in this case startDate and endDate must be included and valid.\n\n\n| Type      | Description\n | --------- | --------- |\n| DoNotUseDates | Do not use dates |\n| UseDates | Use dates |\n",
                  "enum": [
                    "DoNotUseDates",
                    "UseDates"
                  ]
                },
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "If start and end are set, and start is before end, these define temporal  coverage of grading period which may be used to associate GradableItems (Columns) by due date. Start dates will be persisted as starting at  00:00:00 on the submitted day."
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "If start and end are set, and start is before end, these define temporal  coverage of grading period which may be used to associate GradableItems (Columns) by due date. End dates will be persisted as ending at  23:59:59 on the submitted day."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradingPeriod"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/groups/{groupId}/users": {
      "get": {
        "tags": [
          "course group users"
        ],
        "summary": "Get Group Memberships",
        "description": "Returns a list of group memberships objects for the specified group.\n\nCallers not enrolled in the group must have at least one of the following entitlements:\n\n- course.group.VIEW\n\n**Since**: 3600.0.0",
        "parameters": [
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>user</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GroupMembership"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/groups/{groupId}/users/{userId}": {
      "get": {
        "tags": [
          "course group users"
        ],
        "summary": "Get Group Membership",
        "description": "Loads a group membership in the specified group.\n\nCallers not enrolled in the group must have at least one of the following entitlements:\n\n- course.group.VIEW\n\n**Since**: 3600.0.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupMembership"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "course group users"
        ],
        "summary": "Create Group Membership",
        "description": "Creates a group membership in the specified group for the user. For Ultra if the user is already enrolled in another group of the same content item (of the group he wishes to enroll) previously to creating the new membership the previous one is deleted (Move operation). If the conditions for the join operation are not fullfilled the operation will be canceled and a 409 Conflict error returned with a message specifying the reason.\n\nMinimal entitlements required:\n\n- course.group-user.manage.EXECUTE\n\n**Since**: 3600.0.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GroupMembership"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Cloud Document is already launched by one group member",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Not allowed to enroll before enrollment start date; or Not allowed to enroll after enrollment end date; or Maximum number of members exceeded; or Enrolled group has an attempt submitted; or Group has an attempt submitted; or Enrolled group has a grade; or Group has a grade; or The user is already enrolled in the group",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course group users"
        ],
        "summary": "Delete Group Membership",
        "description": "Deletes a group from the specified course.\n\nRequired entitlements:\n\n- course.group-user.manage.EXECUTE\n\n**Since**: 3600.0.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/groups": {
      "get": {
        "tags": [
          "course groups"
        ],
        "summary": "Get Groups",
        "description": "Returns a list of all top-level groups in the specified course.\n\nCallers with the following entitlement can view all groups in the course:\n\n- course.groups.VIEW\nCallers enrolled in course can view all groups they're enrolled in, and all self-enrollment groups\n\n**Since**: 3800.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The group 'name' value to use as search criteria.  See also: nameCompare.\n\n**Since**: 3900.10.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "nameCompare",
            "in": "query",
            "description": "Used alongside the 'name' search parameter.\n\nDefaults to StartsWith if not specified.\n\n**Since**: 3900.10.0\n\n\n| Type      | Description\n | --------- | --------- |\n| equals |  |\n| notEquals |  |\n| contains |  |\n| notContains |  |\n| startsWith |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "equals",
              "notEquals",
              "contains",
              "notContains",
              "startsWith"
            ]
          },
          {
            "name": "inGroupSet",
            "in": "query",
            "description": "Indicates whether only groups in a GroupSet (or groups NOT in a GroupSet) should be included\n\n**Since**: 3900.10.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for groups with created date relative to this value. 'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3800.8.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3800.8.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search for groups with modified date relative to this value. 'modifiedCompare' may also be sent to control search behavior.\n\n**Since**: 3800.8.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Used alongside the 'modified' search parameter.\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3800.8.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name(desc)\" Supported fields are:\n\n- name\n- externalId\n\n**Since**: 3100.4.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GroupV2"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "course groups"
        ],
        "summary": "Create Group",
        "description": "Creates a group in the specified course.\n\nFor Ultra Courses, Individual Groups are only supported when associated with a Content Item. To avoid undefined behavior, groups created this way in Ultra courses should be linked to Content Items via the Create Content Group endpoint as soon as possible after creation.\n\nIndividual Groups without Content association cannot be copied to Ultra courses, and will be removed as part of the Course Conversion process if converted to Ultra.\n\nCallers must have the following entitlement:\n\n- 'course.groups.CREATE'\n\n**Since**: 3800.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An externally-defined unique ID for the group. Defaults to a random UUID if not provided during create."
                },
                "name": {
                  "type": "string",
                  "description": "The title of the group."
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The description of the group. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the group to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the Group is currently available to students.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the group. |\n| No | Students may not access the group. |\n| SignupOnly | Students may only signup and see the group listed, not yet access it. |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "SignupOnly"
                      ]
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling enrollment of the group to students.",
                  "title": "Enrollment",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Whether the Group allows self enrollment or only enrolled by instructor. This can only be set on creation.\n\n\n| Type      | Description\n | --------- | --------- |\n| InstructorOnly | Students are added to the Group by the instructor |\n| SelfEnrollment | Students are added to the Group by self enrollment |\n",
                      "enum": [
                        "InstructorOnly",
                        "SelfEnrollment"
                      ]
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum allowed enrollment size for self enrolled groups."
                    },
                    "signupSheet": {
                      "type": "object",
                      "description": "Settings controlling signup to the group for students. Only applicable if Enrollment.Type allows self enrollment.",
                      "title": "SignupSheet",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the signup sheet"
                        },
                        "description": {
                          "type": "string",
                          "format": "BbML",
                          "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                          "description": "The description of the signup sheet This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                        },
                        "showMembers": {
                          "type": "boolean",
                          "description": "A boolean indicating whether or not members can be seen by others prior to signing up."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GroupV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/groups/sets": {
      "get": {
        "tags": [
          "course groups"
        ],
        "summary": "Get Group Sets",
        "description": "Returns a list of all groupsets\n\nCallers not enrolled in the course must have the following entitlement:\n\n- course.groups.VIEW\n- course.groups.admin.VIEW\n\n**Since**: 3800.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The group 'name' value to use as search criteria.  See also: nameCompare.\n\n**Since**: 3900.10.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "nameCompare",
            "in": "query",
            "description": "Used alongside the 'name' search parameter.\n\nDefaults to StartsWith if not specified.\n\n**Since**: 3900.10.0\n\n\n| Type      | Description\n | --------- | --------- |\n| equals |  |\n| notEquals |  |\n| contains |  |\n| notContains |  |\n| startsWith |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "equals",
              "notEquals",
              "contains",
              "notContains",
              "startsWith"
            ]
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for groups with created date relative to this value. 'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3800.8.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3800.8.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search for groups with modified date relative to this value. 'modifiedCompare' may also be sent to control search behavior.\n\n**Since**: 3800.8.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Used alongside the 'modified' search parameter.\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3800.8.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name(desc)\" Supported fields are:\n\n- name\n- externalId\n\n**Since**: 3100.4.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GroupV2"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "course groups"
        ],
        "summary": "Create Group Set",
        "description": "Creates a groupset in the specified course.\n\nCallers must have the following entitlement:\n\n- 'course.groups.CREATE'\n\n**Since**: 3800.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An externally-defined unique ID for the group. Defaults to a random UUID if not provided during create."
                },
                "name": {
                  "type": "string",
                  "description": "The title of the group."
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The description of the group. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the group to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the Group is currently available to students.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the group. |\n| No | Students may not access the group. |\n| SignupOnly | Students may only signup and see the group listed, not yet access it. |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "SignupOnly"
                      ]
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling enrollment of the group to students.",
                  "title": "Enrollment",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Whether the Group allows self enrollment or only enrolled by instructor. This can only be set on creation.\n\n\n| Type      | Description\n | --------- | --------- |\n| InstructorOnly | Students are added to the Group by the instructor |\n| SelfEnrollment | Students are added to the Group by self enrollment |\n",
                      "enum": [
                        "InstructorOnly",
                        "SelfEnrollment"
                      ]
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum allowed enrollment size for self enrolled groups."
                    },
                    "signupSheet": {
                      "type": "object",
                      "description": "Settings controlling signup to the group for students. Only applicable if Enrollment.Type allows self enrollment.",
                      "title": "SignupSheet",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the signup sheet"
                        },
                        "description": {
                          "type": "string",
                          "format": "BbML",
                          "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                          "description": "The description of the signup sheet This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                        },
                        "showMembers": {
                          "type": "boolean",
                          "description": "A boolean indicating whether or not members can be seen by others prior to signing up."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GroupV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/groups/sets/{groupId}": {
      "get": {
        "tags": [
          "course groups"
        ],
        "summary": "Get Group Set",
        "description": "Loads a groupset in the specified course.\n\nUsers calling this end point should meet at least one of these entitlement checks.\n\n- course.groups.VIEW\n- course.groups.admin.VIEW\n\n**Since**: 3800.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course groups"
        ],
        "summary": "Delete Group Set",
        "description": "Deletes a groupset from the specified course.\n\nRequired entitlements:\n\n- course.group.DELETE\n\n**Since**: 3800.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course groups"
        ],
        "summary": "Update Group Set",
        "description": "Updates a groupset in the specified course.\n\nMinimal entitlements required:\n\n- course.group.MODIFY\n\n**Since**: 3800.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An externally-defined unique ID for the group. Defaults to a random UUID if not provided during create."
                },
                "name": {
                  "type": "string",
                  "description": "The title of the group."
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The description of the group. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the group to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the Group is currently available to students.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the group. |\n| No | Students may not access the group. |\n| SignupOnly | Students may only signup and see the group listed, not yet access it. |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "SignupOnly"
                      ]
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling enrollment of the group to students.",
                  "title": "Enrollment",
                  "properties": {
                    "limit": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum allowed enrollment size for self enrolled groups."
                    },
                    "signupSheet": {
                      "type": "object",
                      "description": "Settings controlling signup to the group for students. Only applicable if Enrollment.Type allows self enrollment.",
                      "title": "SignupSheet",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the signup sheet"
                        },
                        "description": {
                          "type": "string",
                          "format": "BbML",
                          "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                          "description": "The description of the signup sheet This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                        },
                        "showMembers": {
                          "type": "boolean",
                          "description": "A boolean indicating whether or not members can be seen by others prior to signing up."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/groups/sets/{groupId}/groups": {
      "get": {
        "tags": [
          "course groups"
        ],
        "summary": "Get Group Set Children",
        "description": "Returns a list of all groups within a groupset\n\nCallers not enrolled in the group must have the following entitlement:\n\n- course.groups.VIEW\n\n**Since**: 3800.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The group 'name' value to use as search criteria.  See also: nameCompare.\n\n**Since**: 3900.10.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "nameCompare",
            "in": "query",
            "description": "Used alongside the 'name' search parameter.\n\nDefaults to StartsWith if not specified.\n\n**Since**: 3900.10.0\n\n\n| Type      | Description\n | --------- | --------- |\n| equals |  |\n| notEquals |  |\n| contains |  |\n| notContains |  |\n| startsWith |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "equals",
              "notEquals",
              "contains",
              "notContains",
              "startsWith"
            ]
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for groups with created date relative to this value. 'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3800.8.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3800.8.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search for groups with modified date relative to this value. 'modifiedCompare' may also be sent to control search behavior.\n\n**Since**: 3800.8.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Used alongside the 'modified' search parameter.\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3800.8.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name(desc)\" Supported fields are:\n\n- name\n- externalId\n\n**Since**: 3100.4.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GroupV2"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "course groups"
        ],
        "summary": "Create Group Set Child",
        "description": "Creates a group within a groupset.\n\nCallers must have the following entitlement:\n\n- 'course.groups.CREATE'\n\n**Since**: 3800.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An externally-defined unique ID for the group. Defaults to a random UUID if not provided during create."
                },
                "name": {
                  "type": "string",
                  "description": "The title of the group."
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The description of the group. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the group to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the Group is currently available to students.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the group. |\n| No | Students may not access the group. |\n| SignupOnly | Students may only signup and see the group listed, not yet access it. |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "SignupOnly"
                      ]
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling enrollment of the group to students.",
                  "title": "Enrollment",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Whether the Group allows self enrollment or only enrolled by instructor. This can only be set on creation.\n\n\n| Type      | Description\n | --------- | --------- |\n| InstructorOnly | Students are added to the Group by the instructor |\n| SelfEnrollment | Students are added to the Group by self enrollment |\n",
                      "enum": [
                        "InstructorOnly",
                        "SelfEnrollment"
                      ]
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum allowed enrollment size for self enrolled groups."
                    },
                    "signupSheet": {
                      "type": "object",
                      "description": "Settings controlling signup to the group for students. Only applicable if Enrollment.Type allows self enrollment.",
                      "title": "SignupSheet",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the signup sheet"
                        },
                        "description": {
                          "type": "string",
                          "format": "BbML",
                          "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                          "description": "The description of the signup sheet This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                        },
                        "showMembers": {
                          "type": "boolean",
                          "description": "A boolean indicating whether or not members can be seen by others prior to signing up."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GroupV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/groups/{groupId}": {
      "get": {
        "tags": [
          "course groups"
        ],
        "summary": "Get Group",
        "description": "Loads a group in the specified course.\n\nCallers not enrolled in the course must have the following entitlement:\n\n- course.groups.VIEW\n\n**Since**: 3800.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course groups"
        ],
        "summary": "Delete Group",
        "description": "Deletes a groupset from the specified course.\n\nRequired entitlements:\n\n- course.group.DELETE\n\n**Since**: 3800.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course groups"
        ],
        "summary": "Update Group",
        "description": "Updates a group in the specified course.\n\nMinimal entitlements required:\n\n- course.group.MODIFY\n\n**Since**: 3800.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An externally-defined unique ID for the group. Defaults to a random UUID if not provided during create."
                },
                "name": {
                  "type": "string",
                  "description": "The title of the group."
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The description of the group. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the group to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the Group is currently available to students.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the group. |\n| No | Students may not access the group. |\n| SignupOnly | Students may only signup and see the group listed, not yet access it. |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "SignupOnly"
                      ]
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling enrollment of the group to students.",
                  "title": "Enrollment",
                  "properties": {
                    "limit": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum allowed enrollment size for self enrolled groups."
                    },
                    "signupSheet": {
                      "type": "object",
                      "description": "Settings controlling signup to the group for students. Only applicable if Enrollment.Type allows self enrollment.",
                      "title": "SignupSheet",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the signup sheet"
                        },
                        "description": {
                          "type": "string",
                          "format": "BbML",
                          "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                          "description": "The description of the signup sheet This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                        },
                        "showMembers": {
                          "type": "boolean",
                          "description": "A boolean indicating whether or not members can be seen by others prior to signing up."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupV2"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/users": {
      "get": {
        "tags": [
          "course memberships"
        ],
        "summary": "Get Course Memberships",
        "description": "Returns a list of user memberships for the specified course or organization.\n\nCallers not enrolled in the course must have at least one of the following entitlements:\n\n- For courses: 'course.user.VIEW', 'system.user.course.enrollment.VIEW', or 'system.courseuserlist.VIEW'\n- For organizations: 'course.user.VIEW', 'system.user.org.enrollment.VIEW', or 'system.orguserlist.VIEW'\nCallers enrolled in the course will only be able to see memberships that are available and that have opted to be included in the course roster.\n\nFor callers enrolled in the course as well as those with the 'course.user.VIEW' entitlement, system fields such as externalId and dataSourceId will not be visible.\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "role",
            "in": "query",
            "description": "Search for memberships with a course role id that matches this value.\n\n**Since**: 3500.5.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for memberships with a created date relative to this value.  'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3100.0.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search for memberships with a modified date relative to this value. 'modifiedCompare' may also be sent to control search behavior.\n\n**Since**: 3800.9.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Used alongside the 'modified' search parameter. Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3800.9.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "dataSourceId",
            "in": "query",
            "description": "Search for memberships with this dataSourceId.  This may optionally be the data source's externalId using the syntax \"externalId:math101\".\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastAccessed",
            "in": "query",
            "description": "Search for memberships with a last accessed date relative to this value.  'lastAccessedCompare' may also be sent to control search behavior.\n\n**Since**: 3300.9.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "lastAccessedCompare",
            "in": "query",
            "description": "Used alongside the 'lastAccessed' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3300.9.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "availability.available",
            "in": "query",
            "description": "Search for users with availability.available properties that contain this value.\n\n**Since**: 3100.0.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n| Disabled |   **Since**: 3100.0.0 |\n",
            "required": false,
            "type": "string",
            "enum": [
              "Yes",
              "No",
              "Disabled"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"created(desc)\" Supported fields are:\n\n- created\n- lastAccessed (Since 3300.9.0)\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>user</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseMembership"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/users/{userId}": {
      "get": {
        "tags": [
          "course memberships"
        ],
        "summary": "Get Membership",
        "description": "Loads a user membership in the specified course.\n\nEntitlement and field visibility rules are the same as those when loading the memberships collection.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>user</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseMembership"
            }
          },
          "400": {
            "description": "Invalid data specified in the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "User has insufficient privileges",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Membership not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "course memberships"
        ],
        "summary": "Create Membership",
        "description": "Creates a user membership in the specified course.\n\nMinimal entitlements required:\n\n- For courses: 'system.enrollment.CREATE' with 'system.user.VIEW' or just 'course.user-enroll.EXECUTE' - For organizations: 'org.enrollment.CREATE' with 'system.user.VIEW' or just 'course.user-enroll.EXECUTE' - For courses or organizations that have enabled self enrollment: 'system.generic.VIEW'\nIf 'system.enrollment.CREATE' or 'org.enrollment.CREATE' are present, the user must be in the same domain as the logged on user.\n\nBy default courseRoleId is Student and availability.available is Yes.  Providing different values for these fields requires extra entitlements:\n\n- For courses: 'course.user-role.MODIFY' or 'course.user.MODIFY'\n- For organizations: 'course.user-role.MODIFY' or 'org.user.MODIFY'\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "childCourseId": {
                  "type": "string",
                  "description": "The primary ID of the child, cross-listed course, in which the user is directly enrolled. </p> This field is read only in Learn versions 3000.11.0 through 3400.0.0. As of 3400.1.0, this field is mutable.  </p> If this membership's course is a parent course in a cross-listed set, the childCourseId can be updated to move the membership enrollment between child courses and the parent course in  the set.  Patching the childCourseId to \"null\" will move the membership to the parent course.\n\n**Since**: 3000.11.0"
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this course.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "availability": {
                  "description": "Settings controlling availability of the course membership.",
                  "$ref": "#/definitions/Availability"
                },
                "courseRoleId": {
                  "type": "string",
                  "description": "The user's role in the course.\n\nThese roles are also valid for an organization, although they are named differently in the UI.\n\nCustom course roles may also be referenced by their IDs.\n\n\n| Type      | Description\n | --------- | --------- |\n| Instructor | Has access to all areas in the Control Panel. This role is generally given to those developing, teaching, or facilitating the class. Instructors may access a course that is unavailable to students. This role is customizable and may have different capabilities from what is documented here. |\n| BbFacilitator | The facilitator is an instructor like role. Facilitators are restricted versions of an instructor, in that they are able to deliver course instruction and administer all aspects of a pre-constructed course, but are not allowed to modify or alter the course. This role is customizable and may have different capabilities from what is documented here. |\n| TeachingAssistant | The teaching assistant role is that of a co-teacher. Teaching assistants are able to administer all areas of a course. Their only limitations are those imposed by the instructor or Blackboard administrator at your school. This role is customizable and may have different capabilities from what is documented here. |\n| CourseBuilder | Manages the course without having access to student grades. This role is customizable and may have different capabilities from what is documented here. |\n| Grader | Assists the instructor in the creation, management, delivery, and grading of items. This role is customizable and may have different capabilities from what is documented here. |\n| Student |  |\n| Guest | Has no access to the Control Panel. Areas within the course are made available to guests, but typically they can only view course materials; they do not have access to tests or assessments, and do not have permission to post on discussion boards. This role's behavior is immutable. |\n",
                  "enum": [
                    "Instructor",
                    "BbFacilitator",
                    "TeachingAssistant",
                    "CourseBuilder",
                    "Grader",
                    "Student",
                    "Guest"
                  ]
                },
                "displayOrder": {
                  "type": "integer",
                  "format": "int32",
                  "description": "For primary instructor implementation, position or displayOrder cannot be negative, the minimum position is 1, with which is the primary instructor (aka. Leader instructor). Multiple primary instructor have the same displayOrder 1.\n\nThis operation only takes effect when the course role is non-student and non-guest roles, otherwise it's silently ignored, since <code>displayOrder</code> is for this design.\n\nAll cases violating the above restrictions will be set as <code>null</code> All display orders don't keep uniqueness, just save as-is."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CourseMembership"
            }
          },
          "400": {
            "description": "Invalid Course in body of request; or User not in same Domain as Logged-on User; or User is an Observer; or Access Code Incorrect; or User is the System Guest; or Invalid CourseMembership data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "User is a System Admin and the Logged-on User is not a System Administrator; or Logged-on User has insufficient privileges",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "User does not exist; or Role does not exist",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "User already enrolled",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course memberships"
        ],
        "summary": "Delete Membership",
        "description": "Deletes a user membership from the specified course.\n\nRequired entitlements:\n\n- For courses: 'system.enrollment.DELETE' or 'course.user.DELETE'\n- For organizations: 'system.enrollment.DELETE' or 'org.enrollment.DELETE'\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course memberships"
        ],
        "summary": "Update Membership",
        "description": "Updates a user membership in the specified course. \n\n | Field                  | Entitlements Required                                                                    |\n |------------------------|------------------------------------------------------------------------------------------|\n | dataSourceId           | 'course.user.MODIFY' or 'org.user.MODIFY'                                                |\n | childCourseId          | 'course.user.MODIFY' or 'org.user.MODIFY'                                                |\n | courseRoleId           | 'course.user.MODIFY', 'org.user.MODIFY', or 'course.user-role.MODIFY'                    |\n | availability.available | 'course.user.MODIFY', 'org.user.MODIFY', or 'course.course-availability.MODIFY'          |\n | displayOrder           | 'course.user.MODIFY', 'org.user.MODIFY', or 'course.user-role.primary-instructor.MODIFY' |\n \n\nIn addition, callers must have standard view entitlements to receive a response.  Without view entitlements the operation will be performed but an empty result object will be returned.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "childCourseId": {
                  "type": "string",
                  "description": "The primary ID of the child, cross-listed course, in which the user is directly enrolled. </p> This field is read only in Learn versions 3000.11.0 through 3400.0.0. As of 3400.1.0, this field is mutable.  </p> If this membership's course is a parent course in a cross-listed set, the childCourseId can be updated to move the membership enrollment between child courses and the parent course in  the set.  Patching the childCourseId to \"null\" will move the membership to the parent course.\n\n**Since**: 3000.11.0"
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this course.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "availability": {
                  "description": "Settings controlling availability of the course membership.",
                  "$ref": "#/definitions/Availability"
                },
                "courseRoleId": {
                  "type": "string",
                  "description": "The user's role in the course.\n\nThese roles are also valid for an organization, although they are named differently in the UI.\n\nCustom course roles may also be referenced by their IDs.\n\n\n| Type      | Description\n | --------- | --------- |\n| Instructor | Has access to all areas in the Control Panel. This role is generally given to those developing, teaching, or facilitating the class. Instructors may access a course that is unavailable to students. This role is customizable and may have different capabilities from what is documented here. |\n| BbFacilitator | The facilitator is an instructor like role. Facilitators are restricted versions of an instructor, in that they are able to deliver course instruction and administer all aspects of a pre-constructed course, but are not allowed to modify or alter the course. This role is customizable and may have different capabilities from what is documented here. |\n| TeachingAssistant | The teaching assistant role is that of a co-teacher. Teaching assistants are able to administer all areas of a course. Their only limitations are those imposed by the instructor or Blackboard administrator at your school. This role is customizable and may have different capabilities from what is documented here. |\n| CourseBuilder | Manages the course without having access to student grades. This role is customizable and may have different capabilities from what is documented here. |\n| Grader | Assists the instructor in the creation, management, delivery, and grading of items. This role is customizable and may have different capabilities from what is documented here. |\n| Student |  |\n| Guest | Has no access to the Control Panel. Areas within the course are made available to guests, but typically they can only view course materials; they do not have access to tests or assessments, and do not have permission to post on discussion boards. This role's behavior is immutable. |\n",
                  "enum": [
                    "Instructor",
                    "BbFacilitator",
                    "TeachingAssistant",
                    "CourseBuilder",
                    "Grader",
                    "Student",
                    "Guest"
                  ]
                },
                "displayOrder": {
                  "type": "integer",
                  "format": "int32",
                  "description": "For primary instructor implementation, position or displayOrder cannot be negative, the minimum position is 1, with which is the primary instructor (aka. Leader instructor). Multiple primary instructor have the same displayOrder 1.\n\nThis operation only takes effect when the course role is non-student and non-guest roles, otherwise it's silently ignored, since <code>displayOrder</code> is for this design.\n\nAll cases violating the above restrictions will be set as <code>null</code> All display orders don't keep uniqueness, just save as-is."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseMembership"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "User has insufficient privileges",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Course not found; or Course-membership not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/users/{userId}/courses": {
      "get": {
        "tags": [
          "course memberships"
        ],
        "summary": "Get User Memberships",
        "description": "Returns a list of course and organization memberships for the specified user.\n\nUsers can always view their own memberships.  Callers viewing the memberships of another user require at least one of the following entitlements:\n\n- 'system.user.course.enrollment.VIEW' allows callers to see course memberships\n- 'system.user.org.enrollment.VIEW' allows callers to see organization memberships\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "role",
            "in": "query",
            "description": "Search for memberships with a course role id that matches this value.\n\n**Since**: 3500.5.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for memberships with a created date relative to this value.  'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3100.0.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search for memberships with a modified date relative to this value. 'modifiedCompare' may also be sent to control search behavior.\n\n**Since**: 3800.9.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Used alongside the 'modified' search parameter. Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3800.9.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "dataSourceId",
            "in": "query",
            "description": "Search for memberships with this dataSourceId.  This may optionally be the data source's externalId using the syntax \"externalId:math101\".\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastAccessed",
            "in": "query",
            "description": "Search for memberships with a last accessed date relative to this value.  'lastAccessedCompare' may also be sent to control search behavior.\n\n**Since**: 3300.9.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "lastAccessedCompare",
            "in": "query",
            "description": "Used alongside the 'lastAccessed' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3300.9.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "availability.available",
            "in": "query",
            "description": "Search for users with availability.available properties that contain this value.\n\n**Since**: 3100.0.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n| Disabled |   **Since**: 3100.0.0 |\n",
            "required": false,
            "type": "string",
            "enum": [
              "Yes",
              "No",
              "Disabled"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"created(desc)\" Supported fields are:\n\n- created\n- lastAccessed (Since 3300.9.0)\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>course</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UserMembership"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/messages": {
      "get": {
        "tags": [
          "course messages"
        ],
        "summary": "Get Messages",
        "description": "Retrieve all the messages for a course by specified folder. This endpoint currently supports only Original courses.\n\nThe \"course.message.VIEW\" entitlement is required to view Course Messages.\n\n**Since**: 3900.2.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/CourseMessageSearchCriteria.folderType"
          },
          {
            "$ref": "#/parameters/CourseMessageSearchCriteria.folderName"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"isRead(desc),start\" Supported fields are:\n\n- isRead\n- postedDate\n\n**Since**: 3900.2.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>sender</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseMessage"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "The specified course isn't an Classic course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user isn't enrolled in the course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified object is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "The current course migration is in progress",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "course messages"
        ],
        "summary": "Create Message",
        "description": "Creates a new Course Message. This endpoint currently supports only Original courses.\n\nThe \"course.message.CREATE\" entitlement is required to create or reply a course message\n\n**Since**: 3900.2.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of the message"
                },
                "subject": {
                  "type": "string",
                  "description": "The subject of the message."
                },
                "body": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The body text of the message. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "isRead": {
                  "type": "boolean",
                  "description": "Whether or not the message has been read"
                },
                "attachment": {
                  "description": "Metadata for the file attached to the message, if one exists",
                  "$ref": "#/definitions/CourseMessageAttachment"
                },
                "toUsers": {
                  "type": "array",
                  "description": "The to participants of the message",
                  "items": {
                    "type": "string"
                  }
                },
                "ccUsers": {
                  "type": "array",
                  "description": "The cc participants of the message",
                  "items": {
                    "type": "string"
                  }
                },
                "bccUsers": {
                  "type": "array",
                  "description": "The bcc participants of the message",
                  "items": {
                    "type": "string"
                  }
                },
                "isExistingAttachment": {
                  "type": "boolean",
                  "description": "Whether or not the attachment is the existing attachment for the message"
                },
                "isReply": {
                  "type": "boolean",
                  "description": "Whether or not this message is a reply to another message"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CourseMessage"
            }
          },
          "400": {
            "description": "The specified course is an Ultra course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user isn't enrolled in the course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified course can't be found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "The current course migration is in progress",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/messages/folders": {
      "get": {
        "tags": [
          "course messages"
        ],
        "summary": "Get Folders",
        "description": "Retrieve all the folders for a course. This endpoint currently supports only Original courses.\n\nThe \"course.message.VIEW\" entitlement is required to view a Course Message folders.\n\n**Since**: 3900.2.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseMessageFolder"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "The specified course is an Ultra course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user isn't enrolled in the course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified message is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "The current course migration is in progress",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/messages/{messageId}": {
      "delete": {
        "tags": [
          "course messages"
        ],
        "summary": "Delete Message",
        "description": "Delete a message.\n\nThe 'course.message.DELETE' entitlement is required to delete the message.\n\n**Since**: 3900.2.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/CourseMessageSearchCriteria.folderType"
          },
          {
            "$ref": "#/parameters/CourseMessageSearchCriteria.folderName"
          }
        ],
        "responses": {
          "400": {
            "description": "The specified course is an Ultra course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The current user isn't enrolled in the course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified message is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "The current course migration is in progress",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course messages"
        ],
        "summary": "Update Message",
        "description": "Update the read status of the message. This endpoint currently supports only Original courses.\n\n**Since**: 3900.2.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "isRead": {
                  "type": "boolean",
                  "description": "Whether or not the message has been read"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseMessage"
            }
          },
          "400": {
            "description": "The specified course is an Ultra course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user isn't enrolled in the course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified message is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "The current course migration is in progress",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/messages/{messageId}/participants": {
      "get": {
        "tags": [
          "course messages"
        ],
        "summary": "Get Message Participants",
        "description": "Retrieve all participants for the specified message.\n\nThe \"course.message.VIEW\" entitlement is required to view a Course Message participants.\n\n**Since**: 3900.2.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "participationType",
            "in": "query",
            "description": "Search the participation type\n\n**Since**: 3800.20.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"PARTICIPATION_TYPE(desc),start\" Supported fields are:\n\n- participationType\n\n**Since**: 3900.2.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>user</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseMessageParticipant"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "The specified course is an Ultra course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The current user isn't enrolled in the course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The specified message is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "The current course migration is in progress",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/tocItems": {
      "get": {
        "tags": [
          "course toc"
        ],
        "summary": "Get Toc Items",
        "description": "Returns a list of Course TOC entries associated to a course.\n\nEntitlement course.configure-areas.EXECUTE required\n\n**Since**: 3900.31.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseToc"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/tocItems/{tocId}": {
      "patch": {
        "tags": [
          "course toc"
        ],
        "summary": "Update Toc Item",
        "description": "Updates a specific TOC entry. Only allowGuests and allowObservers flags are modifiable, the remaining fields are read-only. User should keep in mind that in order to modify such TOC fields, Course's allowGuest and allowObservers configuration must be enabled. Also, if user wants to update a TOC register's allowGuest flag and TOC is associated to a CONTENT or APPLICATION target type, Course Tool Settings must have allowGuests flag enabled. If user wants to update a TOC register's allowObserver flag and TOC is associated to an APPLICATION target type, Course Tool Settings must have allowObservers flag enabled.\n\nEntitlement course.configure-areas.EXECUTE required\n\n**Since**: 3900.31.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "tocId",
            "in": "path",
            "description": "Id of the TOC to be modified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON Course TOC object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "allowGuests": {
                  "type": "boolean",
                  "description": "Whether or not Guests can view this ToC."
                },
                "allowObservers": {
                  "type": "boolean",
                  "description": "Whether or not Observers can view this ToC."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseToc"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/children": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get Course Children",
        "description": "Returns a list of course cross-listings.\n\nThe 'system.course.cross-list.VIEW' or 'system.org.cross-list.VIEW' or 'course.children.VIEW' entitlement is needed.\n\n**Since**: 3000.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>childCourse</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseChild"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Course not a cross-listed parent",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Parent or child course not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/children/{childCourseId}": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get Child",
        "description": "Loads a specific course cross-listing.\n\nThe 'system.course.cross-list.VIEW' or 'system.org.cross-list.VIEW' entitlement is needed.\n\n**Since**: 3000.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ChildCourseIdParam.childCourseId"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>childCourse</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseChild"
            }
          },
          "400": {
            "description": "Course not a cross-listed parent",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Parent or child course not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "courses"
        ],
        "summary": "Add Child Course",
        "description": "Merges two courses (or organizations) together. Commonly referred to as cross-listing. Only a single level of parent/child relationship is supported (ie. Parent courses may not become children, similarly, a child cannot become a parent)\n\nMinimal entitlements required:\n\n- For courses: 'system.course.cross-list.VIEW'\n- For organizations: 'system.org.cross-list.VIEW'\n\nUpon being merged, all enrollments in the child course are replicated in the parent course, and any future enrollment changes in the child course are also synchronized automatically with the parent course. Duplicate student enrollments will result in a 409 CONFLICT unless the 'ignoreEnrollmentErrors' query parameter is set to true. Users in other roles, such as grader, teaching assistant, or guest, are assigned roles based on the last time they are added to the parent course.\n\n**Since**: 3400.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ChildCourseIdParam.childCourseId"
          },
          {
            "$ref": "#/parameters/IgnoreCourseMergeEnrollmentErrors.ignoreEnrollmentErrors"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CourseChild"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "courses"
        ],
        "summary": "Remove Child Course",
        "description": "Delete a course-course relationship, resulting in two unrelated courses.\n\nMinimal entitlements required:\n\n- For courses: 'system.course.separate-out.VIEW'\n- For organizations: 'system.org.separate-out.VIEW'\n\n**Since**: 3900.4.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/ChildCourseIdParam.childCourseId"
          },
          {
            "name": "separationStyle",
            "in": "query",
            "description": "The method by which the courses will be separated.  Default: CompleteSeparation\n\n**Since**: 3900.4.0\n\n\n| Type      | Description\n | --------- | --------- |\n| completeSeparation | Re-enable the child course with enrollments and remove all the child enrollments from the master course. |\n| enrollmentsInBoth | Re-enable the child course with enrollments but leave all the child enrollments in the master course as well, marking them as unavailable. |\n",
            "required": false,
            "type": "string",
            "enum": [
              "completeSeparation",
              "enrollmentsInBoth"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/crossListSet": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get Cross List Set",
        "description": "Returns the course cross-listing set for the specified course. This will return any and all parent/child associations regardless of the specified course being a parent or child course. The result will be empty if the specified course is not cross-listed.\n\nThe 'system.course.cross-list.VIEW' or 'system.org.cross-list.VIEW' entitlement is needed.\n\n**Since**: 3400.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseChild"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/tasks/{taskId}": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get Task",
        "description": "Check the status of a queued task associated with a Course. Returns 200 unless task is complete. If task is complete this endpoint will return a 303 SEE OTHER with a Location header providing a URI to the GET Course endpoint. Statistical data shows that the average copy task duration is under a second. However, very large courses can take several minutes. Also important to note is that these background tasks can potentially be queued behind other system tasks therefore prolonging the time a task stays in the `Queued` status. We recommend that this endpoint be polled every 60 seconds while waiting for a Course copy to complete.\n\nUsers with entitlements 'system.course.copy.EXECUTE' can view the task status.\n\n**Since**: 3300.0.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseTask"
            }
          },
          "400": {
            "description": "Invalid task type",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "303": {
            "description": "See Other",
            "schema": {
              "$ref": "#/definitions/CourseTask"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "A URI to the resulting entity generated by this task"
              }
            }
          },
          "404": {
            "description": "Task not found for this course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v2/courses/{courseId}/copy": {
      "post": {
        "tags": [
          "courses"
        ],
        "summary": "Copy Course",
        "description": "Creates a copy of an existing Course into a new Course or an existing course. It is possible to limit the course content to be copied using options.\n\nUsers with entitlements 'system.course.copy.EXECUTE' can create a course copy. Users with entitlements 'system.org.copy.EXECUTE' can create an organization copy. Users with entitlement 'course.content.copy.exact.EXECUTE' can copy Course/Organization materials to a new or existing course Users with entitlement 'course.content.copy.new.EXECUTE' can copy Course/Organization materials to a new course. All users's must also have 'course.content.copy.EXECUTE' entitlement associated with the specified source courseId.\n\n**Since**: 3800.2.0",
        "parameters": [
          {
            "in": "body",
            "name": "copyRequest",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "targetCourse"
              ],
              "properties": {
                "targetCourse": {
                  "type": "object",
                  "description": "The destination course to copy into. This can be either a new course, defined by the courseId field, or an existing course, defined by the id field.",
                  "title": "TargetCourseV2",
                  "properties": {
                    "courseId": {
                      "type": "string",
                      "description": "The CourseId that will represent the new course."
                    },
                    "id": {
                      "description": "An identifier representing an existing course to be copied into.",
                      "$ref": "#/definitions/CourseIdParam"
                    }
                  }
                },
                "copy": {
                  "type": "object",
                  "description": "The options which will be used when copying the specified course",
                  "title": "CopyV2",
                  "properties": {
                    "adaptiveReleaseRules": {
                      "type": "boolean",
                      "description": "Represents whether or not the adaptive release rules will be copied."
                    },
                    "announcements": {
                      "type": "boolean",
                      "description": "Represents whether or not the announcements will be copied."
                    },
                    "assessments": {
                      "type": "boolean",
                      "description": "Represents whether or not the assessments will be copied."
                    },
                    "blogs": {
                      "type": "boolean",
                      "description": "Represents whether or not the blogs will be copied."
                    },
                    "calendar": {
                      "type": "boolean",
                      "description": "Represents whether or not the calendar will be copied."
                    },
                    "contacts": {
                      "type": "boolean",
                      "description": "Represents whether or not the contacts information will be copied."
                    },
                    "contentAlignments": {
                      "type": "boolean",
                      "description": "Represents whether or not the content alignments will be copied."
                    },
                    "contentAreas": {
                      "type": "boolean",
                      "description": "Represents whether or not the content areas will be copied."
                    },
                    "discussions": {
                      "type": "string",
                      "description": "Represents whether and how to copy the discussion forum\n\n\n| Type      | Description\n | --------- | --------- |\n| None | Discussion board will not be copied |\n| ForumsAndStarterPosts | Discussion board with Formus and starter posts will be copied |\n| ForumsOnly | Discussion board with only forums will be copied |\n",
                      "enum": [
                        "None",
                        "ForumsAndStarterPosts",
                        "ForumsOnly"
                      ]
                    },
                    "glossary": {
                      "type": "boolean",
                      "description": "Represents whether or not the glossary will be copied."
                    },
                    "gradebook": {
                      "type": "boolean",
                      "description": "Represents whether or not the grade book, columns and settings will be copied."
                    },
                    "groupSettings": {
                      "type": "boolean",
                      "description": "Represents whether or not the group settings will be copied."
                    },
                    "journals": {
                      "type": "boolean",
                      "description": "Represents whether or not the journals will be copied."
                    },
                    "retentionRules": {
                      "type": "boolean",
                      "description": "Represents whether or not the retention rules will be copied."
                    },
                    "rubrics": {
                      "type": "boolean",
                      "description": "Represents whether or not the rubrics will be copied."
                    },
                    "settings": {
                      "type": "object",
                      "description": "The course settings to be copied",
                      "title": "SettingsCopyOptionsV2",
                      "properties": {
                        "availability": {
                          "type": "boolean",
                          "description": "Represents whether or not the Availability setting will be copied."
                        },
                        "bannerImage": {
                          "type": "boolean",
                          "description": "Represents whether or not the banner image will be copied."
                        },
                        "duration": {
                          "type": "boolean",
                          "description": "Represents whether or not the duration settings will be copied."
                        },
                        "enrollmentOptions": {
                          "type": "boolean",
                          "description": "Represents whether or not the enrollment options will be copied."
                        },
                        "guestAccess": {
                          "type": "boolean",
                          "description": "Represents whether or not the guest access settings will be copied."
                        },
                        "languagePack": {
                          "type": "boolean",
                          "description": "Represents whether or not the languange packs will be copied."
                        },
                        "navigationSettings": {
                          "type": "boolean",
                          "description": "Represents whether or not the navigation settings will be copied."
                        },
                        "observerAccess": {
                          "type": "boolean",
                          "description": "Represents whether or not the observer access settings will be copied."
                        }
                      }
                    },
                    "tasks": {
                      "type": "boolean",
                      "description": "Represents whether or not the tasks will be copied."
                    },
                    "wikis": {
                      "type": "boolean",
                      "description": "Represents whether or not the wikis will be copied."
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "type": "string",
                "description": "A URI to query the status of the corresponding copy operation"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v3/courses": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get Courses",
        "description": "Returns a list of courses and organizations.\n\nTo view disabled courses a user must have the entitlement 'system.course.VIEW'.\n\nUsers with the 'course.configure-properties.EXECUTE' course entitlement, or the 'system.course.properties.MODIFY' system entitlement can access all course properties.\n\nUsers enrolled in the course have read access to all properties except:\n\n- uuid\n- externalId\n- dataSourceId\n- created\n- allowGuests\n- enrollment.accessCode\n\nUsers who are not enrolled in the course and do not have associated entitlements only have read access to the following properties:\n\n- id\n- courseId\n- name\n- description\n- organization\n- readOnly\n- termId\n- availability.available\n- availability.duration.type\n- availability.duration.start\n- availability.duration.end\n- availability.duration.daysOfUse\nIf the course enrollment is self-enroll, all users can view the course as though they were enrolled.\n\n**Since**: 3800.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search for courses with a modified date relative to this value.  'modifiedCompare' may also be sent to control search behavior.\n\n**Since**: 3500.4.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Used alongside the 'modified' search parameter. Defaults to greaterOrEqual if not specified.\n\n**Since**: 3500.4.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "courseId",
            "in": "query",
            "description": "Search for courses with courseId properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search for courses with name properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Search for courses with description properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Search for courses with externalId properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for courses with a created date relative to this value.  'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "allowGuests",
            "in": "query",
            "description": "Search for courses which are configured to allow/disallow guest access, based on input.  Default: n/a (return courses regardless of guests allowed)\n\n**Since**: 3200.3.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.  Defaults to greaterOrEqual if not specified.\n\n**Since**: 3100.0.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "availability.available",
            "in": "query",
            "description": "Search for courses with availability.available properties that contain this value.\n\n**Since**: 3000.13.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the course. |\n| No | Students may not access the course. |\n| Disabled | Disabled by the SIS. Students may not access the course.  **Since**: 3100.0.0 |\n| Term | Availability is inherited from the term settings. Requires a termId be set. |\n",
            "required": false,
            "type": "string",
            "enum": [
              "Yes",
              "No",
              "Disabled",
              "Term"
            ]
          },
          {
            "name": "dataSourceId",
            "in": "query",
            "description": "Search for courses with this dataSourceId.  This may optionally be the data source's externalId using the syntax \"externalId:math101\".\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "termId",
            "in": "query",
            "description": "Search for courses with this termId.  This may optionally be the term's externalId using the syntax \"externalId:spring2015\".\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization",
            "in": "query",
            "description": "Search for courses by organization flag.  A value of 'true' indicates that search results should be limited to only Organizations.  A value of 'false' indicates results should be limited to Courses.  Not setting this field indicates that both Courses and Organizations should be returned.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name(desc),created\" Supported fields are:\n\n- courseId\n- name\n- externalId\n- created\n- modified\n\n**Since**: 3400.8.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseV2"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "courses"
        ],
        "summary": "Create Course",
        "description": "Creates a course or organization.\n\nThe 'system.course.CREATE' entitlement is needed to create a course, while 'system.org.CREATE' is needed for an organization.\n\n**Since**: 3800.1.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "courseId",
                "name"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An optional externally-defined unique ID for the course. Defaults to the courseId.\n\nFormerly known as 'batchUid'.",
                  "maxLength": 256
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this course. This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "courseId": {
                  "type": "string",
                  "description": "The Course ID attribute, shown to users in the UI.",
                  "maxLength": 100
                },
                "name": {
                  "type": "string",
                  "description": "The name of the course.",
                  "maxLength": 333
                },
                "description": {
                  "type": "string",
                  "description": "The description of the course."
                },
                "organization": {
                  "type": "boolean",
                  "description": "Whether this object represents an Organization. Defaults to false."
                },
                "ultraStatus": {
                  "type": "string",
                  "description": "Whether the course is rendered using Classic or Ultra Course View.\n\n\n| Type      | Description\n | --------- | --------- |\n| Undecided | The ultra status is not decided. |\n| Classic | The course is decided as classic. |\n| Ultra | The course is decided as ultra |\n| UltraPreview | The course is currently in Ultra mode but during the preview state where it may still be reverted via a Restore to the classic state |\n",
                  "enum": [
                    "Undecided",
                    "Classic",
                    "Ultra",
                    "UltraPreview"
                  ]
                },
                "allowGuests": {
                  "type": "boolean",
                  "description": "Whether guests (users with the role guest) are allowed access to the course. Modifiable only for Classic course. Defaults to true for Classic Courses and false for Ultra Courses."
                },
                "allowObservers": {
                  "type": "boolean",
                  "description": "Whether observers are allowed access to the course. Modifiable only for Classic course. Defaults to false.\n\n**Since**: 3900.31.0"
                },
                "closedComplete": {
                  "type": "boolean",
                  "description": "This status does not affect availability of the course for viewing in any way. closedComplete is valid for both Ultra and Classic courses. If an Ultra course is in closedComplete mode, updates are not possible. For a Classic course in closedComplete mode, updates are still possible (through Web UI but not through REST i.e. closed is enforced for original courses when updated through REST the same way Ultra courses are blocked) but new notifications are not generated."
                },
                "termId": {
                  "type": "string",
                  "description": "The ID of the term associated to this course. This may optionally be the term's externalId using the syntax \"externalId:spring.2016\"."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the course to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the course is currently available to students. Instructors can always access the course if they have 'Access unavailable course' entitlement. If set to 'Term', the course's parent term availability settings will be used.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the course. |\n| No | Students may not access the course. |\n| Disabled | Disabled by the SIS. Students may not access the course. @since 3100.0.0 |\n| Term | Availability is inherited from the term settings. Requires a termId be set. |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "Disabled",
                        "Term"
                      ]
                    },
                    "duration": {
                      "type": "object",
                      "description": "Settings controlling the length of time the course is available.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The intended length of the course. Possible values are:\n\n- Continuous: The course is active on an ongoing basis. This is the default.\n- DateRange: The course will only be available between specific date ranges.\n- FixedNumDays: The course will only be available for a set number of days.\n- Term: The course's parent term duration settings will be used.\n\n\n| Type      | Description\n | --------- | --------- |\n| Continuous | Course is active on an ongoing basis. |\n| DateRange | Course is only intended to be available between specific date ranges |\n| FixedNumDays | Course is only available for a set number of days |\n| Term | Course availablity is dictated by its associated term |\n",
                          "enum": [
                            "Continuous",
                            "DateRange",
                            "FixedNumDays",
                            "Term"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course starts. May only be set if availability.duration.type is DateRange."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course ends. May only be set if availability.duration.type is DateRange."
                        },
                        "daysOfUse": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of days this course can be used. May only be set if availability.duration.type is FixedNumDays."
                        }
                      }
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling how students may enroll in the course.",
                  "title": "Enrollment",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Specifies the enrollment options for the course. Defaults to InstructorLed.\n\n\n| Type      | Description\n | --------- | --------- |\n| InstructorLed | Enrollment tasks for the course can only performed by the instructor |\n| SelfEnrollment | Instructors have the ability to enroll users, and students can also enroll themselves in the course |\n| EmailEnrollment | Instructors have the ability to enroll users, and students can email requests to the instructor for enrollment |\n",
                      "enum": [
                        "InstructorLed",
                        "SelfEnrollment",
                        "EmailEnrollment"
                      ]
                    },
                    "start": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollments are allowed for the course. May only be set if enrollment.type is SelfEnrollment."
                    },
                    "end": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollment in this course ends. May only be set if enrollment.type is SelfEnrollment."
                    },
                    "accessCode": {
                      "type": "string",
                      "description": "The enrollment access code associated with this course. May only be set if enrollment.type is SelfEnrollment.",
                      "maxLength": 50
                    }
                  }
                },
                "locale": {
                  "type": "object",
                  "description": "Settings controlling localization within the course.",
                  "title": "Locale",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The locale of this course.",
                      "maxLength": 20
                    },
                    "force": {
                      "type": "boolean",
                      "description": "Whether students are forced to use the course's specified locale."
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CourseV2"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to create courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "A course with the same courseId or externalId already exists",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v3/courses/{courseId}": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get Course",
        "description": "Loads a specific course or organization.\n\nTo view disabled courses a user must have the entitlement 'system.course.VIEW'.\n\nUsers with the 'course.configure-properties.EXECUTE' entitlement can access all course properties.\n\nUsers enrolled in the course have read access to all properties except:\n\n- uuid\n- externalId\n- dataSourceId\n- created\n- allowGuests\n- enrollment.accessCode\n\nUsers with no access to the course only have read access to the following properties:\n\n- id\n- courseId\n- name\n- description\n- organization\n- closedComplete\n- termId\n- availability.available\n- availability.duration.type\n- availability.duration.start\n- availability.duration.end\n- availability.duration.daysOfUse\nIf the course enrollment is self-enroll, all users can view the course as though they were enrolled.\n\n**Since**: 3800.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseV2"
            }
          },
          "400": {
            "description": "Failed to create course; or The request did not specify a valid courseId",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The course is not found or is unavailable and the user does not have the permission to view unavailable courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "courses"
        ],
        "summary": "Delete Course",
        "description": "Registers a queued task to delete a course or organization in asynchronous fashion.\n\nThe 'system.course.DELETE' entitlement is needed to delete a course, while 'system.org.DELETE' is needed for an organization.\n\n**Since**: 3800.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "removeFiles",
            "in": "query",
            "description": "Whether to delete course files.  Defaults to true.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "type": "string",
                "description": "A URI to query the status of the corresponding delete operation"
              }
            }
          },
          "400": {
            "description": "Invalid courseId provided",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user is not authorized to delete the specified Course object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "courses"
        ],
        "summary": "Update Course",
        "description": "Updates a course or organization.\n\nTo update a course, the user must have either 'system.course|org.properties.MODIFY' or 'course.configure-properties.EXECUTE' entitlements.  However, if the user has the latter entitlement, then additional entitlements are needed to be able to update certain fields, as shown below: \n\n | Field                           | Entitlements Required                                                  |\n |---------------------------------|------------------------------------------------------------------------|\n | name                            | course.name.MODIFY                                                     |\n | description                     | course.name.MODIFY                                                     |\n | allowGuests                     | course.configure-guest-access.EXECUTE                                  |\n | enrollment.type                 | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | enrollment.start                | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | enrollment.end                  | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | enrollment.accessCode           | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | availability.available          | course.configure-properties.EXECUTE, course.availability.MODIFY        |\n | locale.id                       | course.configure-properties.EXECUTE, course.locale.MODIFY              |\n | locale.force                    | course.configure-properties.EXECUTE, course.locale.MODIFY              |\n | availability.duration.type      | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n | availability.duration.start     | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n | availability.duration.end       | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n | availability.duration.daysOfUse | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n \n\n**Since**: 3800.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An optional externally-defined unique ID for the course. Defaults to the courseId.\n\nFormerly known as 'batchUid'.",
                  "maxLength": 256
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this course. This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the course.",
                  "maxLength": 333
                },
                "description": {
                  "type": "string",
                  "description": "The description of the course."
                },
                "allowGuests": {
                  "type": "boolean",
                  "description": "Whether guests (users with the role guest) are allowed access to the course. Modifiable only for Classic course. Defaults to true for Classic Courses and false for Ultra Courses."
                },
                "allowObservers": {
                  "type": "boolean",
                  "description": "Whether observers are allowed access to the course. Modifiable only for Classic course. Defaults to false.\n\n**Since**: 3900.31.0"
                },
                "closedComplete": {
                  "type": "boolean",
                  "description": "This status does not affect availability of the course for viewing in any way. closedComplete is valid for both Ultra and Classic courses. If an Ultra course is in closedComplete mode, updates are not possible. For a Classic course in closedComplete mode, updates are still possible (through Web UI but not through REST i.e. closed is enforced for original courses when updated through REST the same way Ultra courses are blocked) but new notifications are not generated."
                },
                "termId": {
                  "type": "string",
                  "description": "The ID of the term associated to this course. This may optionally be the term's externalId using the syntax \"externalId:spring.2016\"."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the course to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the course is currently available to students. Instructors can always access the course if they have 'Access unavailable course' entitlement. If set to 'Term', the course's parent term availability settings will be used.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the course. |\n| No | Students may not access the course. |\n| Disabled | Disabled by the SIS. Students may not access the course. @since 3100.0.0 |\n| Term | Availability is inherited from the term settings. Requires a termId be set. |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "Disabled",
                        "Term"
                      ]
                    },
                    "duration": {
                      "type": "object",
                      "description": "Settings controlling the length of time the course is available.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The intended length of the course. Possible values are:\n\n- Continuous: The course is active on an ongoing basis. This is the default.\n- DateRange: The course will only be available between specific date ranges.\n- FixedNumDays: The course will only be available for a set number of days.\n- Term: The course's parent term duration settings will be used.\n\n\n| Type      | Description\n | --------- | --------- |\n| Continuous | Course is active on an ongoing basis. |\n| DateRange | Course is only intended to be available between specific date ranges |\n| FixedNumDays | Course is only available for a set number of days |\n| Term | Course availablity is dictated by its associated term |\n",
                          "enum": [
                            "Continuous",
                            "DateRange",
                            "FixedNumDays",
                            "Term"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course starts. May only be set if availability.duration.type is DateRange."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course ends. May only be set if availability.duration.type is DateRange."
                        },
                        "daysOfUse": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of days this course can be used. May only be set if availability.duration.type is FixedNumDays."
                        }
                      }
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling how students may enroll in the course.",
                  "title": "Enrollment",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Specifies the enrollment options for the course. Defaults to InstructorLed.\n\n\n| Type      | Description\n | --------- | --------- |\n| InstructorLed | Enrollment tasks for the course can only performed by the instructor |\n| SelfEnrollment | Instructors have the ability to enroll users, and students can also enroll themselves in the course |\n| EmailEnrollment | Instructors have the ability to enroll users, and students can email requests to the instructor for enrollment |\n",
                      "enum": [
                        "InstructorLed",
                        "SelfEnrollment",
                        "EmailEnrollment"
                      ]
                    },
                    "start": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollments are allowed for the course. May only be set if enrollment.type is SelfEnrollment."
                    },
                    "end": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollment in this course ends. May only be set if enrollment.type is SelfEnrollment."
                    },
                    "accessCode": {
                      "type": "string",
                      "description": "The enrollment access code associated with this course. May only be set if enrollment.type is SelfEnrollment.",
                      "maxLength": 50
                    }
                  }
                },
                "locale": {
                  "type": "object",
                  "description": "Settings controlling localization within the course.",
                  "title": "Locale",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The locale of this course.",
                      "maxLength": 20
                    },
                    "force": {
                      "type": "boolean",
                      "description": "Whether students are forced to use the course's specified locale."
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseV2"
            }
          },
          "400": {
            "description": "The request did not specify a valid course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to modify courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The course was not found or is unavailable and the user does not have the permission to view unavailable courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "A course with the same courseId or externalId already exists",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/dataSources": {
      "get": {
        "tags": [
          "data sources"
        ],
        "summary": "Get Data Sources",
        "description": "Returns a list of data sources.\n\nThe 'system.datasource.manager.VIEW' entitlement is needed.\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/DataSourceSearchCriteriaQueryParams.externalId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DataSource"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "data sources"
        ],
        "summary": "Create Data Source",
        "description": "Creates a data source.\n\nThe 'system.datasource.manager.VIEW' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "externalId"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An externally-defined unique ID for the data source.\n\nFormerly known as 'batchUid'."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the data source."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/dataSources/{dataSourceId}": {
      "get": {
        "tags": [
          "data sources"
        ],
        "summary": "Get Data Source",
        "description": "Loads a data source.\n\nThe 'system.datasource.manager.VIEW' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/DataSourceIdParam.dataSourceId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "data sources"
        ],
        "summary": "Delete Data Source",
        "description": "Deletes a data source.\n\nThe 'system.datasource.manager.VIEW' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/DataSourceIdParam.dataSourceId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "data sources"
        ],
        "summary": "Update Data Source",
        "description": "Updates a data source.\n\nThe 'system.datasource.manager.VIEW' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/DataSourceIdParam.dataSourceId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An externally-defined unique ID for the data source.\n\nFormerly known as 'batchUid'."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the data source."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/discussions": {
      "get": {
        "tags": [
          "discussions"
        ],
        "summary": "Get Discussions",
        "description": "Get all discussions associated with the specified Ultra Course. The course must have ultra view enabled.\n\nRequires the following entitlement:\n\n- discussion.forum.VIEW\n</p> Enrolled users should be able to access this resource regardless of entitlement if the discussion is set to available. Any non-enrolled user with the required entitlements already mentioned above will be able to get an empty list response if consulted courseId does not have any discussion, otherwise, a 403 error should rise.\n\n**Since**: 3900.19.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"title(desc),available\" Supported fields are:\n\n- id\n- title\n- available\n- gradable\n- createdDate\n- modifiedDate\n- gradebookColumnId\n\n**Since**: 3900.19.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "title",
            "in": "query",
            "description": "Search for forums with title properties that contain this value.  Search is case-insensitive.\n\n**Since**: 3900.25.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "gradable",
            "in": "query",
            "description": "Search for forums which are configured to be gradable or not, based on input.\n\n**Since**: 3900.25.0",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Discussion"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "discussions"
        ],
        "summary": "Create Discussion",
        "description": "Create a discussion within the specified Ultra Course. If the discussion is created as gradable an associated gradebook column is also created. Such gradebook column can be updated via the course grades API.\n\nRequires the following entitlements:\n\n- discussion.forum.CREATE\n- discussion.post.CREATE\n- discussion.thread.CREATE\n- course.content.CREATE.\n</p>\n\n**Since**: 3900.27.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "discussion",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title",
                "topic"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title given to the discussion forum",
                  "maxLength": 333
                },
                "available": {
                  "type": "boolean",
                  "description": "Indicates if the discussion is available"
                },
                "gradable": {
                  "type": "boolean",
                  "description": "Indicates if the discussion allows grading"
                },
                "topic": {
                  "description": "Topic of the Discussion. Only applicable to Ultra discussions.",
                  "$ref": "#/definitions/Topic"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Discussion"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/discussions/{discussionId}": {
      "get": {
        "tags": [
          "discussions"
        ],
        "summary": "Get Discussion",
        "description": "Get a discussion in the Ultra Course with the specified id.\n\nRequires the following entitlement:\n\n- discussion.forum.VIEW\n</p> Enrolled users should be able to access this resource regardless of entitlement if the discussion is set to available\n\n**Since**: 3900.19.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/DiscussionIdParam.discussionId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Discussion"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "discussions"
        ],
        "summary": "Update Discussion",
        "description": "Update a discussion in an Ultra Course.\n\nThis operation is always a partial-update. So user should only send data that he want to change. If the discussion is updated to be gradable an associated gradebook column is also created. Such gradebook column can be updated via the course grades API. List of entitlements which allow a logged on user to update a forum.\n\n- discussion.forum.MODIFY\n\n**Since**: 3900.27.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/DiscussionIdParam.discussionId"
          },
          {
            "in": "body",
            "name": "discussionTOPubV1",
            "description": "JSON discussionTOPubV1 object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title given to the discussion forum",
                  "maxLength": 333
                },
                "available": {
                  "type": "boolean",
                  "description": "Indicates if the discussion is available"
                },
                "gradable": {
                  "type": "boolean",
                  "description": "Indicates if the discussion allows grading"
                },
                "topic": {
                  "description": "Topic of the Discussion. Only applicable to Ultra discussions.",
                  "$ref": "#/definitions/Topic"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Discussion"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/discussions/{discussionId}/groups": {
      "get": {
        "tags": [
          "discussions"
        ],
        "summary": "Get Discussion Groups",
        "description": "Get the groups associated to a discussion from an Ultra Course, or an empty list if there are none.\n\nRequires the following entitlement:\n\n- course.content.designer.VIEW\n</p>\n\n**Since**: 3900.27.0",
        "parameters": [
          {
            "$ref": "#/parameters/DiscussionIdParam.discussionId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"threadId(desc)\" Supported fields are:\n\n- groupId\n- threadId\n\n**Since**: 3900.27.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DiscussionGroup"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/discussions/{discussionId}/groups/{groupId}": {
      "put": {
        "tags": [
          "discussions"
        ],
        "summary": "Create Discussion Group Association",
        "description": "Sets the specified group inside a discussion from an Ultra Course. This will create a group thread. A discussion that already has messages, including drafts, will not be able to be changed into a group discussion. After the first group has been set, all subsequent groups must belong to the same group set. If the forum content is conditioned behind a memberships criteria, no group associations shall be created by this endpoint.\n\nRequires the following entitlement:\n\n- course.content.MODIFY\n</p>\n\n**Since**: 3900.27.0",
        "parameters": [
          {
            "$ref": "#/parameters/DiscussionIdParam.discussionId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DiscussionGroup"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/discussions/{discussionId}/messages": {
      "get": {
        "tags": [
          "discussions"
        ],
        "summary": "Get Discussion Messages",
        "description": "Get the messages of the specified discussion in an Ultra Course.\n\nRequires the following entitlement:\n\n- discussion.post.VIEW\n\nEnrolled users should be able to access this resource regardless of entitlement if the discussion is set to available For group discussions, students will be able to access only the messages associated with groups in which they are enrolled. Entitled users will have access to messages associated with all groups, but can filter returned messages based on groupId using the groupId query parameter A draft message can only be seen by its own author\n\n**Since**: 3900.19.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/DiscussionIdParam.discussionId"
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Search for messages which are associated with this groupId.\n\n**Since**: 3900.19.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Search for messages made by this userId.\n\n**Since**: 3900.25.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Search for messages with status.\n\n**Since**: 3900.25.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Published | Message is published in the discussion and visible for all users. |\n| Deleted | Message is shown in the discussion as soft-deleted. |\n| Draft | Message is stored as a draft and only visible for the author user. |\n",
            "required": false,
            "type": "string",
            "enum": [
              "Published",
              "Deleted",
              "Draft"
            ]
          },
          {
            "name": "isRead",
            "in": "query",
            "description": "Search for read or unread messages.\n\n**Since**: 3900.25.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for messages filtering by 'created'. If createdCompare is not set, it will perform as 'greaterOrEqual' by default.\n\n**Since**: 3900.25.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search for messages filtering by 'modified'. If modifiedCompare is not set, it will perform as 'greaterOrEqual' by default.\n\n**Since**: 3900.25.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "posted",
            "in": "query",
            "description": "Search for messages filtering by 'posted'. If postedCompare is not set, it will perform as 'greaterOrEqual' by default.\n\n**Since**: 3900.25.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "edited",
            "in": "query",
            "description": "Search for messages filtering by 'edited'. If editedCompare is not set, it will perform as 'greaterOrEqual' by default.\n\n**Since**: 3900.25.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Operation to be applied to 'created'. When not specified, it will perform as 'greaterOrEqual' by default if 'created' contains a valid date\n\nMust be one of the following:\n\n- greaterOrEqual\n- lessThan\n\n**Since**: 3900.25.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Operation to be applied to 'modified'. When not specified, it will perform as 'greaterOrEqual' by default if 'modified' contains a valid date\n\nMust be one of the following:\n\n- greaterOrEqual\n- lessThan\n\n**Since**: 3900.25.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "postedCompare",
            "in": "query",
            "description": "Operation to be applied to 'posted'. When not specified, it will perform as 'greaterOrEqual' by default if 'posted' contains a valid date\n\nMust be one of the following:\n\n- greaterOrEqual\n- lessThan\n\n**Since**: 3900.25.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "editedCompare",
            "in": "query",
            "description": "Operation to be applied to 'edited'. When not specified, it will perform as 'greaterOrEqual' by default if 'edited' contains a valid date\n\nMust be one of the following:\n\n- greaterOrEqual\n- lessThan\n\n**Since**: 3900.25.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"createdDate(desc),givenName\" Supported fields are:\n\n- id\n- discussionId\n- parentId\n- threadId\n- userId\n- groupId\n- givenName\n- familyName\n- status\n- body\n- createdDate\n- modifiedDate\n- isRead\n\n**Since**: 3900.19.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Message"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "discussions"
        ],
        "summary": "Create Message",
        "description": "Create a message in the main thread of a discussion from an Ultra Course. This corresponds to a direct reply to the topic.\n\nRequires the following entitlements:\n\n- discussion.post.CREATE\n\nFor group discussions, instructors must specify a valid group id for the message to be created in the specific group thread.\n\n**Since**: 3900.27.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/DiscussionIdParam.discussionId"
          },
          {
            "in": "body",
            "name": "message",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "body"
              ],
              "properties": {
                "groupId": {
                  "type": "string",
                  "description": "The Id of the group, only set for group discussions."
                },
                "status": {
                  "type": "string",
                  "description": "Status of the message.\n\n\n| Type      | Description\n | --------- | --------- |\n| Published | Message is published in the discussion and visible for all users. |\n| Deleted | Message is shown in the discussion as soft-deleted. |\n| Draft | Message is stored as a draft and only visible for the author user. |\n",
                  "enum": [
                    "Published",
                    "Deleted",
                    "Draft"
                  ]
                },
                "body": {
                  "type": "string",
                  "description": "Body of the message, in BbML format."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/discussions/{discussionId}/messages/{messageId}": {
      "delete": {
        "tags": [
          "discussions"
        ],
        "summary": "Delete Message",
        "description": "Deletes a message in a discussion from an Ultra Course. If the message has no replies, it is fully deleted. Otherwise, it is soft-deleted unless explicitly requested for complete deletion using the query parameter `deleteReplies`.\n\nRequires the following entitlement:\n\n- discussion.post.MODIFY\n- discussion.draft.DELETE\n- discussion.post.DELETE\n- discussion.post.author.DELETE\n- discussion.post.author.DELETE\n\n**Since**: 3900.27.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/DiscussionIdParam.discussionId"
          },
          {
            "$ref": "#/parameters/MessageIdParam.messageId"
          },
          {
            "name": "deleteReplies",
            "in": "query",
            "description": "Whether the DELETE request should delete the replies or not. If true, the message and its replies are hard-deleted. Otherwise, the message is soft-deleted. If the message doesn't have replies, it is hard-deleted in any case.\n\n**Since**: 3900.27.0",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "discussions"
        ],
        "summary": "Update Message",
        "description": "Update a message of a discussion from an Ultra Course.\n\nRequires the following entitlement:\n\n- discussion.draft.MODIFY\n- discussion.post.MODIFY\n- discussion.post.author.MODIFY\n\n**Since**: 3900.27.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/DiscussionIdParam.discussionId"
          },
          {
            "$ref": "#/parameters/MessageIdParam.messageId"
          },
          {
            "in": "body",
            "name": "messageTOPubV1",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "Status of the message.\n\n\n| Type      | Description\n | --------- | --------- |\n| Published | Message is published in the discussion and visible for all users. |\n| Deleted | Message is shown in the discussion as soft-deleted. |\n| Draft | Message is stored as a draft and only visible for the author user. |\n",
                  "enum": [
                    "Published",
                    "Deleted",
                    "Draft"
                  ]
                },
                "body": {
                  "type": "string",
                  "description": "Body of the message, in BbML format."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/discussions/{discussionId}/messages/{messageId}/replies": {
      "get": {
        "tags": [
          "discussions"
        ],
        "summary": "Get Message Replies",
        "description": "Get the replies of the specified message in a discussion from an Ultra Course.\n\nRequires the following entitlement:\n\n- discussion.post.VIEW\n\nEnrolled users should be able to access this resource regardless of entitlement if the discussion is set to available A draft message can only be seen by its own author\n\n**Since**: 3900.19.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/DiscussionIdParam.discussionId"
          },
          {
            "$ref": "#/parameters/MessageIdParam.messageId"
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Search for messages which are associated with this groupId.\n\n**Since**: 3900.19.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Search for messages made by this userId.\n\n**Since**: 3900.25.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Search for messages with status.\n\n**Since**: 3900.25.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Published | Message is published in the discussion and visible for all users. |\n| Deleted | Message is shown in the discussion as soft-deleted. |\n| Draft | Message is stored as a draft and only visible for the author user. |\n",
            "required": false,
            "type": "string",
            "enum": [
              "Published",
              "Deleted",
              "Draft"
            ]
          },
          {
            "name": "isRead",
            "in": "query",
            "description": "Search for read or unread messages.\n\n**Since**: 3900.25.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for messages filtering by 'created'. If createdCompare is not set, it will perform as 'greaterOrEqual' by default.\n\n**Since**: 3900.25.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search for messages filtering by 'modified'. If modifiedCompare is not set, it will perform as 'greaterOrEqual' by default.\n\n**Since**: 3900.25.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "posted",
            "in": "query",
            "description": "Search for messages filtering by 'posted'. If postedCompare is not set, it will perform as 'greaterOrEqual' by default.\n\n**Since**: 3900.25.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "edited",
            "in": "query",
            "description": "Search for messages filtering by 'edited'. If editedCompare is not set, it will perform as 'greaterOrEqual' by default.\n\n**Since**: 3900.25.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Operation to be applied to 'created'. When not specified, it will perform as 'greaterOrEqual' by default if 'created' contains a valid date\n\nMust be one of the following:\n\n- greaterOrEqual\n- lessThan\n\n**Since**: 3900.25.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Operation to be applied to 'modified'. When not specified, it will perform as 'greaterOrEqual' by default if 'modified' contains a valid date\n\nMust be one of the following:\n\n- greaterOrEqual\n- lessThan\n\n**Since**: 3900.25.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "postedCompare",
            "in": "query",
            "description": "Operation to be applied to 'posted'. When not specified, it will perform as 'greaterOrEqual' by default if 'posted' contains a valid date\n\nMust be one of the following:\n\n- greaterOrEqual\n- lessThan\n\n**Since**: 3900.25.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "editedCompare",
            "in": "query",
            "description": "Operation to be applied to 'edited'. When not specified, it will perform as 'greaterOrEqual' by default if 'edited' contains a valid date\n\nMust be one of the following:\n\n- greaterOrEqual\n- lessThan\n\n**Since**: 3900.25.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"createdDate(desc),givenName\" Supported fields are:\n\n- id\n- discussionId\n- parentId\n- threadId\n- userId\n- groupId\n- givenName\n- familyName\n- status\n- body\n- createdDate\n- modifiedDate\n- isRead\n\n**Since**: 3900.19.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Message"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "discussions"
        ],
        "summary": "Create Message Reply",
        "description": "Create a reply to the specified message in a discussion from an Ultra Course.\n\nRequires the following entitlement:\n\n- discussion.post.CREATE\n\n**Since**: 3900.27.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/DiscussionIdParam.discussionId"
          },
          {
            "$ref": "#/parameters/MessageIdParam.messageId"
          },
          {
            "in": "body",
            "name": "messageTOPubV1",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "body"
              ],
              "properties": {
                "groupId": {
                  "type": "string",
                  "description": "The Id of the group, only set for group discussions."
                },
                "status": {
                  "type": "string",
                  "description": "Status of the message.\n\n\n| Type      | Description\n | --------- | --------- |\n| Published | Message is published in the discussion and visible for all users. |\n| Deleted | Message is shown in the discussion as soft-deleted. |\n| Draft | Message is stored as a draft and only visible for the author user. |\n",
                  "enum": [
                    "Published",
                    "Deleted",
                    "Draft"
                  ]
                },
                "body": {
                  "type": "string",
                  "description": "Body of the message, in BbML format."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/goals": {
      "get": {
        "tags": [
          "goals"
        ],
        "summary": "Get Goals",
        "description": "Returns a list of Goals.\n\nThe 'system.learningstandards.VIEW' entitlement is required.\n\n**Since**: 3900.53.0",
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "description": "Optional search criteria parameter to filter by category id.\n\n**Since**: 3900.53.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "goalSetId",
            "in": "query",
            "description": "Optional search criteria parameter to filter by goal set id.\n\n**Since**: 3900.53.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Optional search criteria parameter to filter by goal type.\n\n**Since**: 3900.53.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"title(desc)\" Supported fields are:\n\n- id\n- title\n\n**Since**: 3900.53.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Goal"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/goals/sets": {
      "get": {
        "tags": [
          "goals"
        ],
        "summary": "Get Goal Sets",
        "description": "Returns a list of Goal Sets.\n\nThe 'system.learningstandards.VIEW' entitlement is required.\n\n**Since**: 3900.53.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name(desc)\" Supported fields are:\n\n- id\n\n**Since**: 3900.53.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GoalSet"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/goals/sets/types": {
      "get": {
        "tags": [
          "goals"
        ],
        "summary": "Get Types",
        "description": "Returns a list of Goals Set Types.\n\nThe 'system.learningstandards.VIEW' entitlement is required.\n\n**Since**: 3900.53.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/GoalsSetTypesSortCriteria.sort"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GoalSetType"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/goals/sets/{goalSetId}": {
      "get": {
        "tags": [
          "goals"
        ],
        "summary": "Get Goal Set By Id",
        "description": "Returns the Goal Set specified by Id.\n\nThe 'system.learningstandards.VIEW' entitlement is required.\n\n**Since**: 3900.53.0",
        "parameters": [
          {
            "$ref": "#/parameters/GoalSetIdParam.goalSetId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GoalSet"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/goals/sets/{goalSetId}/categories": {
      "get": {
        "tags": [
          "goals"
        ],
        "summary": "Get Categories",
        "description": "Returns a list of Categories for a given Goal Set.\n\nThe 'system.learningstandards.VIEW' entitlement is required.\n\n**Since**: 3900.53.0",
        "parameters": [
          {
            "$ref": "#/parameters/GoalSetIdParam.goalSetId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/GoalSetCategorySortCriterial.sort"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GoalCategory"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/goals/sets/{goalSetId}/categories/{goalSetCategoryId}": {
      "get": {
        "tags": [
          "goals"
        ],
        "summary": "Get Goal Set Category By Id",
        "description": "Returns the Goal Set Category specified by Id.\n\nThe 'system.learningstandards.VIEW' entitlement is required.\n\n**Since**: 3900.53.0",
        "parameters": [
          {
            "$ref": "#/parameters/GoalSetIdParam.goalSetId"
          },
          {
            "$ref": "#/parameters/GoalSetCategoryIdParam.goalSetCategoryId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GoalCategory"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/goals/sets/{goalSetId}/categories/{goalSetCategoryId}/goals": {
      "get": {
        "tags": [
          "goals"
        ],
        "summary": "Get Goals From Set And Category",
        "description": "Returns a list of Goals from a Goal Set and Category\n\nThe 'system.learningstandards.VIEW' entitlement is required.\n\n**Since**: 3900.53.0",
        "parameters": [
          {
            "$ref": "#/parameters/GoalSetIdParam.goalSetId"
          },
          {
            "$ref": "#/parameters/GoalSetCategoryIdParam.goalSetCategoryId"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "Search for child goals recursively. A value of 'true' return all top-level goals and any descendant goals. A value of 'false', only top-level goals are returned and this is the default behavior.\n\n**Since**: 3900.53.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Optional search criteria parameter to filter by category id.\n\n**Since**: 3900.53.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "goalSetId",
            "in": "path",
            "description": "Optional search criteria parameter to filter by goal set id.\n\n**Since**: 3900.53.0",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Optional search criteria parameter to filter by goal type.\n\n**Since**: 3900.53.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"title(desc)\" Supported fields are:\n\n- id\n- title\n\n**Since**: 3900.53.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Goal"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/goals/{goalId}": {
      "get": {
        "tags": [
          "goals"
        ],
        "summary": "Get Goal By Id",
        "description": "Returns the Goal specified by Id.\n\nThe 'system.learningstandards.VIEW' entitlement is required.\n\n**Since**: 3900.53.0",
        "parameters": [
          {
            "$ref": "#/parameters/GoalIdParam.goalId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Goal"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/goals/{goalId}/children": {
      "get": {
        "tags": [
          "goals"
        ],
        "summary": "Get Children Goals",
        "description": "Returns the list of Children Goals from the specified Parent Goal.\n\nThe 'system.learningstandards.VIEW' entitlement is required.\n\n**Since**: 3900.53.0",
        "parameters": [
          {
            "$ref": "#/parameters/GoalIdParam.goalId"
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Optional search criteria parameter to filter by category id.\n\n**Since**: 3900.53.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "goalSetId",
            "in": "query",
            "description": "Optional search criteria parameter to filter by goal set id.\n\n**Since**: 3900.53.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Optional search criteria parameter to filter by goal type.\n\n**Since**: 3900.53.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"title(desc)\" Supported fields are:\n\n- id\n- title\n\n**Since**: 3900.53.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Goal"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/nodes": {
      "get": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Get Nodes For Course",
        "description": "Obtains a list of nodes to which a given course is directly associated.\n\nUsers with the 'system.multiinst.node.course.association.VIEW' entitlement and the 'system.multiinst.node.org.association.VIEW' system entitlement can access all node association information.\n\n**Since**: 3800.10.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>node</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseHierarchyNode"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/institutionalHierarchy/nodes": {
      "get": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Get Nodes",
        "description": "Returns the Top-level institutional hierarchy nodes\n\nEntitlement system.multiinst.hierarchy.manager.VIEW required\n\nUsers with entitlement \"system.multiinst.hierarchy.manager.VIEW\" for Node management can view all fields.\n\n**Since**: 3800.10.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "Search Institutional Hierarchy Nodes recursively. If true, returns all descendant nodes of the specified Node. If false, only immediate children are returned (defualt: false)\n\n**Since**: 3800.14.0",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Node"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Create Node",
        "description": "Creates a new institutional hierarchy node\n\nEntitlement system.multiinst.hierarchy.manager.CREATE required\n\nUsers with entitlement \"system.multiinst.hierarchy.manager.CREATE\" for Node management can create a new Node.\n\n**Since**: 3800.15.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "Node unique identifier",
                  "maxLength": 256
                },
                "title": {
                  "type": "string",
                  "description": "Node display name",
                  "maxLength": 256
                },
                "description": {
                  "type": "string",
                  "description": "Node description",
                  "maxLength": 1000
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}": {
      "get": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Get Node",
        "description": "Returns the institutional hierarchy node corresponding the provided ID\n\nEntitlement system.multiinst.hierarchy.manager.VIEW required\n\nUsers with entitlement \"system.multiinst.hierarchy.manager.VIEW\" for Node management can view all fields.\n\n**Since**: 3800.10.0",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Delete Node",
        "description": "Deletes an institutional hierarchy node. The root node cannot be deleted. This deletes orphan children in a cascading fashion.\n\nThe 'system.multiinst.hierarchy.manager.DELETE' entitlement is required.\n\n**Since**: 3800.15.0",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Update Node",
        "description": "Updates Institutional Hierarchy Node information.\n\nEntitlement system.multiinst.hierarchy.manager.MODIFY is required\n\n**Since**: 3800.15.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "Node unique identifier",
                  "maxLength": 256
                },
                "title": {
                  "type": "string",
                  "description": "Node display name",
                  "maxLength": 256
                },
                "description": {
                  "type": "string",
                  "description": "Node description",
                  "maxLength": 1000
                }
              }
            }
          },
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}/children": {
      "get": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Get Node Children",
        "description": "Returns the children of the institutional hierarchy node corresponding to the provided ID\n\nEntitlement system.multiinst.hierarchy.manager.VIEW required\n\nUsers with entitlement \"system.multiinst.hierarchy.manager.VIEW\" for Node management can view all fields.\n\n**Since**: 3800.10.0",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "Search Institutional Hierarchy Nodes recursively. If true, returns all descendant nodes of the specified Node. If false, only immediate children are returned (defualt: false)\n\n**Since**: 3800.14.0",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Node"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Create Child Node",
        "description": "Create a new institutional hierarchy node whose parent corresponds to the supplied nodeId\n\nEntitlement system.multiinst.hierarchy.manager.CREATE required\n\nUsers with entitlement \"system.multiinst.hierarchy.manager.CREATE\" for Node management can create a new Node.\n\n**Since**: 3800.15.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "Node unique identifier",
                  "maxLength": 256
                },
                "title": {
                  "type": "string",
                  "description": "Node display name",
                  "maxLength": 256
                },
                "description": {
                  "type": "string",
                  "description": "Node description",
                  "maxLength": 1000
                }
              }
            }
          },
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}/courses": {
      "get": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Get Node Course Associations",
        "description": "Returns a list of node-course relationships for the specified node.\n\nUsers with the 'system.multiinst.node.course.association.VIEW' entitlement and the 'system.multiinst.node.org.association.VIEW' system entitlement can access all node association information.\n\n**Since**: 3800.10.0",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/CourseNodeFilterCriteriaV1.null.course.organization"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>course</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/HierarchyNodeCourse"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}/courses/{courseId}": {
      "put": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Create Node Course Association",
        "description": "Creates a node-course relationship for the specified node and course.\n\nUsers with the 'system.multiinst.node.course.association.CREATE' entitlement can create Course - Hierarchy Node associations. Users with the 'system.multiinst.node.org.association.CREATE' entitlement can create Organization - Hierarchy Node associations\n\n**Since**: 3800.17.0",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "isPrimary": {
                  "type": "boolean",
                  "description": "Whether or not this association represents the primary node association of the course"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/HierarchyNodeCourse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Delete Node Course Association",
        "description": "Deletes the association between a given Node and a Course\n\nEntitlement system.multiinst.node.course.association.DELETE required to delete Node-Course associations Entitlement system.multiinst.node.org.association.DELETE required to delete Node-Organization associations\n\n**Since**: 3800.17.0",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Update Node Course Association",
        "description": "Update a specified node-course association.\n\nUsers with the 'system.multiinst.node.course.association.CREATE' entitlement can update Course - Hierarchy Node associations Users with the 'system.multiinst.node.org.association.CREATE' entitlement can update Organization - Hierarchy Node associations\n\n**Since**: 3800.17.0",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "isPrimary": {
                  "type": "boolean",
                  "description": "Whether or not this association represents the primary node association of the course"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HierarchyNodeCourse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}/tools/{toolType}": {
      "get": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Get Tools",
        "description": "Returns a list of tools associated to a node\n\nEntitlement system.multiinst.node.tools.MODIFY required\n\nUsers with entitlement \"system.multiinst.node.tools.MODIFY\" for Node management can make use of this Endpoint.\n\n**Since**: 3900.16.0",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "name": "toolType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Course",
              "Organization",
              "Content"
            ]
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/InstitutionalHierarchyTool"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}/tools/{toolType}/{toolId}": {
      "patch": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Patch Tool",
        "description": "Modifies a tool related to a specific node and tool type. The modified tool is returned if modification runs succesfuly\n\nEntitlements system.multiinst.node.tools.MODIFY and system.multiinst.node.tools.lock.override.MODIFY are required\n\nUsers with entitlement \"system.multiinst.node.tools.MODIFY\" and \"system.multiinst.node.tools.lock.override.MODIFY\" for Node management can make use of this Endpoint.\n\n**Since**: 3900.16.0",
        "parameters": [
          {
            "in": "body",
            "name": "IHToolParam",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "toolSettings": {
                  "description": "General Tool Settings.",
                  "$ref": "#/definitions/SettingsAttribute"
                },
                "guestSettings": {
                  "description": "Tool Settings for a guest user.",
                  "$ref": "#/definitions/SettingsAttribute"
                },
                "observerSettings": {
                  "description": "Tool Settings for an observer user.",
                  "$ref": "#/definitions/SettingsAttribute"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "name": "toolType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Course",
              "Organization",
              "Content"
            ]
          },
          {
            "name": "toolId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "updateExistingOriginalCourses",
            "in": "query",
            "description": "Scope of updated Tool Settings. By default if the parameter is not present or is set as false, the updated settings will be applied to new Original courses and all Ultra courses (new and existing). If present and value is true, the updated settings will be applied to all new and existing courses (Original and Ultra).\n\n**Since**: 3900.16.0",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InstitutionalHierarchyTool"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/InstitutionalHierarchyTool"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "A URI to query the status of the corresponding tools saving operation"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}/users": {
      "get": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Get Node User Associations",
        "description": "Returns a list of node-user relationships for the specified node.\n\nUsers with the 'system.multiinst.node.user.association.VIEW' entitlement can access all node association information.\n\n**Since**: 3900.8.0",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>user</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/HierarchyNodeUser"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}/users/{userId}": {
      "put": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Create Node User Association",
        "description": "Creates the association between a given Node and a User.\n\nEntitlement 'system.multiinst.node.user.association.CREATE' is required.\n\n**Since**: 3900.8.0",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/HierarchyNodeUser"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Delete Node User Association",
        "description": "Deletes the association between a given Node and a User.\n\nEntitlement 'system.multiinst.node.user.association.DELETE' is required.\n\n**Since**: 3900.8.0",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/users/{userId}/nodes": {
      "get": {
        "tags": [
          "institutional hierarchy"
        ],
        "summary": "Get Nodes For User",
        "description": "Obtains the Institutional Hierarchy Nodes associated to a User.\n\nEntitlement system.multiinst.node.user.association.VIEW is required\n\n**Since**: 3900.8.0",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>node</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UserHierarchyNode"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}/admins": {
      "get": {
        "tags": [
          "institutional hierarchy administrators"
        ],
        "summary": "Get Node Admins",
        "description": "Lists all the Administrators from an Institutional Hierarchy Node.\n\nThe 'system.multiinst.node.admin.association.VIEW' entitlement is required.\n\n**Since**: 3900.37.0",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"title(desc)\" Supported fields are:\n\n- userId\n\n**Since**: 3900.37.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>user</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/NodeAdmin"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/institutionalHierarchy/nodes/{nodeId}/admins/{userId}": {
      "get": {
        "tags": [
          "institutional hierarchy administrators"
        ],
        "summary": "Get Node Admin",
        "description": "Gets information of the specified user as an administrator of the specified node.\n\nThe 'system.multiinst.node.admin.association.VIEW' entitlement is required.\n\n**Since**: 3900.37.0",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>user</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NodeAdmin"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "institutional hierarchy administrators"
        ],
        "summary": "Set Node Admin Association",
        "description": "Create an association between the specified user as an administrator and the specified node with the provided system roles, giving a <strong>201 CREATED</strong> status code as a result. If the association already exists, system roles are updated giving a <strong>200 OK</strong> code as a result. Custom roles are supported, also by adding \u00b4:custom\u00b4 as role sufix, for example 'aCustomRole:custom'. This sufix helps to distinguish custom roles with same name as system-created roles, for example: 'SystemSupport:custom' would be taken as a custom role, otherwise will be taken as System Support role. Non-administrative system roles (Guest, Integration, User/None, Observer) are not supported. </p> User with 'system.multiinst.node.admin.association.shared.roles.CREATE' entitlement are able to create associations on nodes where they are currently administrators and only with System Roles they already have. </p> User with 'system.multiinst.node.admin.association.all.roles.CREATE' entitlement can assign any administrators to any nodes without restrictions and with any amount of administrative System Roles.\n\n**Since**: 3900.37.0",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "nodeRoles"
              ],
              "properties": {
                "nodeRoles": {
                  "type": "array",
                  "description": "List of roles the Admin User has within the Node.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NodeAdmin"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NodeAdmin"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "institutional hierarchy administrators"
        ],
        "summary": "Delete Node Admin",
        "description": "Removes an user as node administrator.\n\nThe 'system.multiinst.node.admin.association.DELETE' entitlement is required.\n\n**Since**: 3900.37.0",
        "parameters": [
          {
            "$ref": "#/parameters/NodeIdParam.nodeId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/lti/domains": {
      "get": {
        "tags": [
          "lti"
        ],
        "summary": "Get Domain Configs",
        "description": "This endpoint returns the list of LTI domain configs\n\nNo entitlements required to view the data exposed by this endpoint (Since: 3900.46.0)\n\nEntitlement system.administration.VIEW required for versions 3900.45.0 and before\n\n**Since**: 3300.9.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LTIDomainConfig"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "lti"
        ],
        "summary": "Create Domain Config",
        "description": "Creates an LTI Domain Config.\n\nThe 'system.administration.VIEW' entitlement is needed to create a domain.\n\n**Since**: 3300.9.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "primaryDomain": {
                  "type": "string",
                  "description": "The primary domain name associated with this configuration."
                },
                "clientId": {
                  "type": "string",
                  "description": "The client id associated with this configuration. Only applicable for LTI versions 1.3+, excluding 2.0\n\n**Since**: 3600.0.0"
                },
                "key": {
                  "type": "string"
                },
                "secret": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "description": "Enum that indicates if the set of domains associated with this config can or cannot be linked to.\n\n\n| Type      | Description\n | --------- | --------- |\n| Approved |  |\n| Excluded |  |\n| NeedsApproval |   **Since**: 3300.9.0 |\n",
                  "enum": [
                    "Approved",
                    "Excluded",
                    "NeedsApproval"
                  ]
                },
                "sendUserDataType": {
                  "type": "string",
                  "description": "Enum indicating when user data can be sent to the LTI tool provider.\n\n\n| Type      | Description\n | --------- | --------- |\n| Never |  |\n| Sslonly |  |\n| Always |   **Since**: 3300.9.0 |\n",
                  "enum": [
                    "Never",
                    "Sslonly",
                    "Always"
                  ]
                },
                "sendRole": {
                  "type": "boolean",
                  "description": "Whether the user's role can be sent to the LTI tool provider."
                },
                "sendName": {
                  "type": "boolean",
                  "description": "Whether the user's name can be sent to the LTI tool provider."
                },
                "sendEmail": {
                  "type": "boolean",
                  "description": "Whether the user's email address can be sent to the LTI tool provider."
                },
                "useSplashScreen": {
                  "type": "boolean",
                  "description": "Whether a splash screen is shown before launching the LTI link.\n\nCannot be set to true if allowMembershipService is true."
                },
                "allowMembershipService": {
                  "type": "boolean",
                  "description": "Whether the Tool is allowed to call the LTI Names and Roles service and get the course memberships."
                },
                "allowGradesService": {
                  "type": "boolean",
                  "description": "Whether the Tool is allowed to call the LTI Assignment and Grades service and manage line items and grades.\n\n**Since**: 3600.0.0"
                },
                "publicKey": {
                  "type": "string",
                  "description": "The public key of the tool, if specified. It is optional and can be null\n\n**Since**: 3800.17.0"
                },
                "jwksUrl": {
                  "type": "string",
                  "description": "The JWKS URL of the tool, if specified. It is optional and can be null\n\n**Since**: 3800.17.0"
                },
                "customParameters": {
                  "type": "object",
                  "example": {
                    "key1": "value1",
                    "key2": "value2"
                  },
                  "description": "The custom parameters for the given domain.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "name": {
                  "type": "string",
                  "description": "The name of the domain configuration\n\n**Since**: 3900.23.0"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the domain configuration\n\n**Since**: 3900.23.0"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LTIDomainConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/lti/domains/{domainId}": {
      "get": {
        "tags": [
          "lti"
        ],
        "summary": "Get Domain Config",
        "description": "This endpoint returns the LTI domain config with the specified Id\n\nNo entitlements required to view the data exposed by this endpoint (Since: 3900.46.0)\n\nEntitlement system.administration.VIEW required for versions 3900.45.0 and before\n\n**Since**: 3300.9.0",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LTIDomainConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "lti"
        ],
        "summary": "Delete Domain Config",
        "description": "Deletes an LTI Domain Config.\n\nThe 'system.administration.VIEW' entitlement is needed to delete a domain.\n\n**Since**: 3300.9.0",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "lti"
        ],
        "summary": "Update Domain Config",
        "description": "Updates an LTI Domain Config.\n\nThe 'system.administration.VIEW' entitlement is needed to update a domain.\n\n**Since**: 3300.9.0",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "primaryDomain": {
                  "type": "string",
                  "description": "The primary domain name associated with this configuration."
                },
                "clientId": {
                  "type": "string",
                  "description": "The client id associated with this configuration. Only applicable for LTI versions 1.3+, excluding 2.0\n\n**Since**: 3600.0.0"
                },
                "key": {
                  "type": "string"
                },
                "secret": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "description": "Enum that indicates if the set of domains associated with this config can or cannot be linked to.\n\n\n| Type      | Description\n | --------- | --------- |\n| Approved |  |\n| Excluded |  |\n| NeedsApproval |   **Since**: 3300.9.0 |\n",
                  "enum": [
                    "Approved",
                    "Excluded",
                    "NeedsApproval"
                  ]
                },
                "sendUserDataType": {
                  "type": "string",
                  "description": "Enum indicating when user data can be sent to the LTI tool provider.\n\n\n| Type      | Description\n | --------- | --------- |\n| Never |  |\n| Sslonly |  |\n| Always |   **Since**: 3300.9.0 |\n",
                  "enum": [
                    "Never",
                    "Sslonly",
                    "Always"
                  ]
                },
                "sendRole": {
                  "type": "boolean",
                  "description": "Whether the user's role can be sent to the LTI tool provider."
                },
                "sendName": {
                  "type": "boolean",
                  "description": "Whether the user's name can be sent to the LTI tool provider."
                },
                "sendEmail": {
                  "type": "boolean",
                  "description": "Whether the user's email address can be sent to the LTI tool provider."
                },
                "useSplashScreen": {
                  "type": "boolean",
                  "description": "Whether a splash screen is shown before launching the LTI link.\n\nCannot be set to true if allowMembershipService is true."
                },
                "allowMembershipService": {
                  "type": "boolean",
                  "description": "Whether the Tool is allowed to call the LTI Names and Roles service and get the course memberships."
                },
                "allowGradesService": {
                  "type": "boolean",
                  "description": "Whether the Tool is allowed to call the LTI Assignment and Grades service and manage line items and grades.\n\n**Since**: 3600.0.0"
                },
                "publicKey": {
                  "type": "string",
                  "description": "The public key of the tool, if specified. It is optional and can be null\n\n**Since**: 3800.17.0"
                },
                "jwksUrl": {
                  "type": "string",
                  "description": "The JWKS URL of the tool, if specified. It is optional and can be null\n\n**Since**: 3800.17.0"
                },
                "customParameters": {
                  "type": "object",
                  "example": {
                    "key1": "value1",
                    "key2": "value2"
                  },
                  "description": "The custom parameters for the given domain.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "name": {
                  "type": "string",
                  "description": "The name of the domain configuration\n\n**Since**: 3900.23.0"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the domain configuration\n\n**Since**: 3900.23.0"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LTIDomainConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/lti/placements": {
      "get": {
        "tags": [
          "lti"
        ],
        "summary": "Get Placements",
        "description": "Returns a list of LTI placements\n\nSupports the standard paging and sorting query parameters, with a maximum page size of 1000.\n\n**Since**: 3300.0.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "handle",
            "in": "query",
            "description": "Search for placements with handle properties that contain this value.\n\n**Since**: 3200.12.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search for placements with name properties that contain this value.\n\n**Since**: 3200.12.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Search for placements with type properties that contain this value.\n\n**Since**: 3200.12.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Application | Application or Student Tool Placement |\n| ContentHandler | Content Type placement |\n| ContentItemMessage | Content-item Message placement (see IMSGlobal spec)  **Since**: 3300.5.0 |\n| System | System-level Tools |\n| Administrator | Administrator-level Tools  **Since**: 3400.1.0 |\n| UltraUI | Ultra-UI Extensions  **Since**: 3700.6.0 |\n| BaseNavigation | Base Navigation |\n| CourseNavigation | Course Navigation |\n| Proctoring | Proctoring  **Since**: 3900.10.0 |\n| CloudDocument | Cloud Document Type Placement  **Since**: 3900.34.0 |\n",
            "required": false,
            "type": "string",
            "enum": [
              "Application",
              "ContentHandler",
              "ContentItemMessage",
              "System",
              "Administrator",
              "UltraUI",
              "BaseNavigation",
              "CourseNavigation",
              "Proctoring",
              "CloudDocument"
            ]
          },
          {
            "name": "authorId",
            "in": "query",
            "description": "Search for placements with author ID properties that contain this value.\n\n**Since**: 3200.12.0\n\n**Deprecated**: since 3900.0.0; Field was never used and has been removed",
            "required": false,
            "type": "string"
          },
          {
            "name": "courseId",
            "in": "query",
            "description": "Search for LTI placements that are available for this course. Note this only applies to Application, ContentHandler, and ContentItemMessage types currently\n\n**Since**: 3900.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "domainId",
            "in": "query",
            "description": "Search for LTI placements that are associated to a specific domainId\n\n**Since**: 3900.46.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "availability.available",
            "in": "query",
            "description": "Search for placements with a specific availability value\n\n**Since**: 3900.46.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "Yes",
              "No"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name.family(desc),created\"\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LTIPlacement"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "lti"
        ],
        "summary": "Create Placement",
        "description": "Creates an LTI placement\n\nThe 'system.administration.VIEW' entitlement is required to create placements\n\n**Since**: 3300.0.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "handle",
                "name",
                "type",
                "url"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the placement. Not required to be unique. Maximum length of 50 characters, BAD_REQUEST error with message is returned if greater than 50 characters.",
                  "maxLength": 50
                },
                "description": {
                  "type": "string",
                  "description": "The description of the placement. Not required to be unique. Maximum length is 1000 characters, BAD_REQUEST error with message is returned if greater than 1000 characters.",
                  "maxLength": 1000
                },
                "iconUrl": {
                  "type": "string",
                  "description": "The URL of the icon for this placement, if any. Not required to be unique, must be a complete and valid URL. Maximum length is 255 characters, BAD_REQUEST error with message is returned if greater than 255 characters or incomplete URL.",
                  "maxLength": 255
                },
                "handle": {
                  "type": "string",
                  "description": "The handle that uniquely identifies this placement. Required to be unique. Maximum length is 32 characters, BAD_REQUEST error with message is returned if greater than 32 characters.",
                  "maxLength": 32
                },
                "type": {
                  "type": "string",
                  "description": "The type of placement.\n\n\n| Type      | Description\n | --------- | --------- |\n| Application | Application or Student Tool Placement |\n| ContentHandler | Content Type placement |\n| ContentItemMessage | Content-item Message placement (see IMSGlobal spec)  **Since**: 3300.5.0 |\n| System | System-level Tools |\n| Administrator | Administrator-level Tools  **Since**: 3400.1.0 |\n| UltraUI | Ultra-UI Extensions  **Since**: 3700.6.0 |\n| BaseNavigation | Base Navigation |\n| CourseNavigation | Course Navigation |\n| Proctoring | Proctoring  **Since**: 3900.10.0 |\n| CloudDocument | Cloud Document Type Placement  **Since**: 3900.34.0 |\n",
                  "enum": [
                    "Application",
                    "ContentHandler",
                    "ContentItemMessage",
                    "System",
                    "Administrator",
                    "UltraUI",
                    "BaseNavigation",
                    "CourseNavigation",
                    "Proctoring",
                    "CloudDocument"
                  ]
                },
                "url": {
                  "type": "string",
                  "description": "The URL of the tool provider. Not required to be unique, must be a complete and valid URL. Maximum length is 1024 characters, BAD_REQUEST error with message is returned if greater than 1024 characters or incomplete URL.",
                  "maxLength": 1024
                },
                "key": {
                  "type": "string"
                },
                "secret": {
                  "type": "string"
                },
                "authorId": {
                  "type": "string",
                  "description": "Id of the creator of the placement\n\n**Deprecated**: since 3900.0 not used"
                },
                "instructorCreated": {
                  "type": "boolean",
                  "description": "Whether an instructor created the placement or not (otherwise admin)\n\n**Deprecated**: since 3900.0 not used"
                },
                "allowStudents": {
                  "type": "boolean",
                  "description": "Whether the course tool is visible by students, or only to non-students (e.g. instructors). Defaults to true, allowing students to see the tool."
                },
                "allowGrading": {
                  "type": "boolean",
                  "description": "Whether this placement can accept grades from the tool provider and a grade column can be created for it. This only applies to Enum[Type]#`ContentHandler` types. All others don't support grading and will be set to false."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the placement.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the placement is available within the system.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n",
                      "enum": [
                        "Yes",
                        "No"
                      ]
                    }
                  }
                },
                "launchInNewWindow": {
                  "type": "boolean",
                  "description": "Whether this placement link should be opened in a new window or not."
                },
                "customParameters": {
                  "type": "object",
                  "example": {
                    "key1": "value1",
                    "key2": "value2"
                  },
                  "description": "Custom launch parameters for the tool.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LTIPlacement"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/lti/placements/{placementId}": {
      "get": {
        "tags": [
          "lti"
        ],
        "summary": "Get Placement",
        "description": "Returns the LTI placement with the specified Id\n\n**Since**: 3300.0.0",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LTIPlacement"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "lti"
        ],
        "summary": "Delete Placement",
        "description": "Deletes an LTI placement with the specified Id\n\nThe 'system.administration.VIEW' entitlement is required to delete placements\n\n**Since**: 3300.0.0",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "lti"
        ],
        "summary": "Update Placement",
        "description": "Updates an LTI placement with the given Id\n\nThe 'system.administration.VIEW' entitlement is required to update placements\n\n**Since**: 3300.0.0",
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the placement. Not required to be unique. Maximum length of 50 characters, BAD_REQUEST error with message is returned if greater than 50 characters.",
                  "maxLength": 50
                },
                "description": {
                  "type": "string",
                  "description": "The description of the placement. Not required to be unique. Maximum length is 1000 characters, BAD_REQUEST error with message is returned if greater than 1000 characters.",
                  "maxLength": 1000
                },
                "iconUrl": {
                  "type": "string",
                  "description": "The URL of the icon for this placement, if any. Not required to be unique, must be a complete and valid URL. Maximum length is 255 characters, BAD_REQUEST error with message is returned if greater than 255 characters or incomplete URL.",
                  "maxLength": 255
                },
                "url": {
                  "type": "string",
                  "description": "The URL of the tool provider. Not required to be unique, must be a complete and valid URL. Maximum length is 1024 characters, BAD_REQUEST error with message is returned if greater than 1024 characters or incomplete URL.",
                  "maxLength": 1024
                },
                "key": {
                  "type": "string"
                },
                "secret": {
                  "type": "string"
                },
                "authorId": {
                  "type": "string",
                  "description": "Id of the creator of the placement\n\n**Deprecated**: since 3900.0 not used"
                },
                "instructorCreated": {
                  "type": "boolean",
                  "description": "Whether an instructor created the placement or not (otherwise admin)\n\n**Deprecated**: since 3900.0 not used"
                },
                "allowStudents": {
                  "type": "boolean",
                  "description": "Whether the course tool is visible by students, or only to non-students (e.g. instructors). Defaults to true, allowing students to see the tool."
                },
                "allowGrading": {
                  "type": "boolean",
                  "description": "Whether this placement can accept grades from the tool provider and a grade column can be created for it. This only applies to Enum[Type]#`ContentHandler` types. All others don't support grading and will be set to false."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the placement.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the placement is available within the system.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n",
                      "enum": [
                        "Yes",
                        "No"
                      ]
                    }
                  }
                },
                "launchInNewWindow": {
                  "type": "boolean",
                  "description": "Whether this placement link should be opened in a new window or not."
                },
                "customParameters": {
                  "type": "object",
                  "example": {
                    "key1": "value1",
                    "key2": "value2"
                  },
                  "description": "Custom launch parameters for the tool.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LTIPlacement"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/performance/contentReviewStatus": {
      "get": {
        "tags": [
          "performance dashboard"
        ],
        "summary": "Get Review Status By Course Id",
        "description": "List the content review statuses for all the users enrolled in a course. Users calling this endpoint must have the following entitlement: this entitlement check.\n\n- course.performance.dashboard.VIEW\n\n**Since**: 3700.15.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Optional search criteria to filter by user id.\n\n**Since**: 3700.15.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AggregateReviewStatus"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/proctoring/services": {
      "get": {
        "tags": [
          "proctoring"
        ],
        "summary": "Get Proctoring Services",
        "description": "Returns a list of proctoring services Supports the standard paging query parameters, with a maximum page size of 1000. No entitlement check is performed as this data is not restricted. Any secure fields such as keys/secrets are not included in the results.\n\n**Since**: 3500.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/ProctoringServicesSearchCriteriaV1.null.availability.available"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ProctoringService"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          }
        }
      }
    },
    "/learn/api/public/v1/proctoring/services/{proctoringServiceId}": {
      "get": {
        "tags": [
          "proctoring"
        ],
        "summary": "Get Proctoring Service",
        "description": "Returns the proctoring service with the specified Id No entitlement check is performed as this data is not restricted. Any secure fields such as keys/secrets are not included in the results.\n\n**Since**: 3500.6.0",
        "parameters": [
          {
            "name": "proctoringServiceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProctoringService"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/pronouns": {
      "get": {
        "tags": [
          "pronouns"
        ],
        "summary": "Get Pronouns",
        "description": "Returns a list of pronouns\n\nSupports the standard paging query parameters, with a maximum page size of 200.\n\n**Since**: 3900.26.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Pronoun"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          }
        }
      },
      "post": {
        "tags": [
          "pronouns"
        ],
        "summary": "Create Pronoun",
        "description": "Create a pronoun\n\nUsers with the 'system.pronouns.MODIFY' entitlement can create pronouns.\n\nPending pronouns created will be submitted to the System Administrator for approval and will not be immediately added to the list, regardless of entitlement.\n\n**Since**: 3900.26.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name",
                "status"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the pronoun.",
                  "maxLength": 100
                },
                "status": {
                  "type": "string",
                  "description": "The status of the pronoun.\n\n\n| Type      | Description\n | --------- | --------- |\n| Pending |  |\n| Approved |  |\n",
                  "enum": [
                    "Pending",
                    "Approved"
                  ]
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Pronoun"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/Pronoun"
            }
          },
          "400": {
            "description": "Pronoun text (name property) must pass XSS validation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/pronouns/{pronounId}": {
      "delete": {
        "tags": [
          "pronouns"
        ],
        "summary": "Delete Pronoun",
        "description": "Delete a pronoun\n\nThe 'system.pronouns.MODIFY' entitlement is needed in order to delete the pronoun.\n\n**Since**: 3900.26.0",
        "parameters": [
          {
            "name": "pronounId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "pronouns"
        ],
        "summary": "Update Pronoun",
        "description": "Update a pronoun\n\nThe 'system.pronouns.MODIFY' entitlement is needed in order to update the pronoun.\n\n**Since**: 3900.26.0",
        "parameters": [
          {
            "name": "pronounId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the pronoun.",
                  "maxLength": 100
                },
                "status": {
                  "type": "string",
                  "description": "The status of the pronoun.\n\n\n| Type      | Description\n | --------- | --------- |\n| Pending |  |\n| Approved |  |\n",
                  "enum": [
                    "Pending",
                    "Approved"
                  ]
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Pronoun"
            }
          },
          "400": {
            "description": "Pronoun text (name property) must pass XSS validation",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courseRoles": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get Course Roles",
        "description": "\n\nReturns a list of course roles.  This list will contain all the course roles the context user has access to see. </p>\n\nIf the context user has any of these entitlements, then the user can see all course roles:\n\n- system.courserole.CREATE\n- system.enrollment.CREATE\n- system.courserole.manager.VIEW\n- system.courserole.DELETE\n</p>\n\nOtherwise, these course role entitlements are checked for any courses the context user is enrolled in:\n\n- course.user-enroll.EXECUTE\n- system.courserole.CREATE\n- system.enrollment.CREATE\n- system.courserole.manager.VIEW\n- system.courserole.DELETE\n- course.user-role.MODIFY\n</p>\n\nIf the logged in user has any of those course role entitlements for a Course where Course.organization = false, then the user can see course roles where Availability.Available = Course or CourseAndOrganization </p>\n\nIf the logged in user has any of those course role entitlements for a Course where Course.organization = true, then the user can see course roles where Availability.Available = Organization or CourseAndOrganization </p>\n\n**Since**: 3300.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name.family(desc),created\"\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "custom",
            "in": "query",
            "description": "Search course roles by whether they are a custom or system generated course role.\n\n**Since**: 3300.5.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "Search course roles using their roleId's.  Any course role with a roleId that contains the given string will be returned.  The search is case insensitive.\n\n**Since**: 3300.5.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseRole"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Access Denied",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courseRoles/{roleId}": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get Course Role",
        "description": "\n\nReturns a single course role.  The path id can be either the CourseRole.id field like \"/courseRoles/_5_1\" or the CourseRole.roleId field like \"/courseRoles/roleId:Student\". </p>\n\nA 403 (FORBIDDEN) status is returned if the context user does not have access to see the course role. </p>\n\nIf the context user has any of these entitlements, then the user can see all course roles:\n\n- system.courserole.CREATE\n- system.enrollment.CREATE\n- system.courserole.manager.VIEW\n- system.courserole.DELETE\n</p>\n\nOtherwise, these course role entitlements are checked for any courses the context user is enrolled in:\n\n- course.user-enroll.EXECUTE\n- system.courserole.CREATE\n- system.enrollment.CREATE\n- system.courserole.manager.VIEW\n- system.courserole.DELETE\n- course.user-role.MODIFY\n</p>\n\nIf the logged in user has any of those course role entitlements for a Course where Course.organization = false, then the user can see course roles where Availability.Available = Course or CourseAndOrganization </p>\n\nIf the logged in user has any of those course role entitlements for a Course where Course.organization = true, then the user can see course roles where Availability.Available = Organization or CourseAndOrganization </p>\n\n**Since**: 3300.5.0",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The course role ID.  This may be the primary ID, or the roleId. The suffix \":custom\" will be appended to the roleId of a custom course role if that roleId conflicts with the roleId of a system generated course role.  For example, if a custom role roleId is specified as \"Student\" then the roleId will actually be \"Student:custom\" since there is already a system generated course role with the roleId of \"Student\".  \n\n | ID type    | Examples                                                   |\n |------------|------------------------------------------------------------|\n | primary    | _123_1                                                     |\n | roleId     | roleId:Student, roleId:MyCustomRole, roleId:Student:custom |\n \n\n**Since**: 3300.5.0",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseRole"
            }
          },
          "400": {
            "description": "The request did not specify a valid roleId",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The course role is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/institutionRoles": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get Institution Roles",
        "description": "Returns a list of institution roles.\n\nUsers must have the entitlement 'system.institutionrole.VIEW' to access this endpoint.\n\n**Since**: 3300.4.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"roleId(desc)\" Supported fields are:\n\n- roleId\n- custom\n\n**Since**: 3300.4.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "Search for institution roles with roleId properties that contain this value.\n\n**Since**: 3300.4.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "custom",
            "in": "query",
            "description": "Search for institution roles by custom flag.  A value of 'true' indicates that search results should be limited to only custom roles.  A value of 'false' indicates results should be limited to built-in roles.  Not setting this field indicates that all institution roles should be returned.\n\n**Since**: 3300.4.0",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/InstitutionRole"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Access Denied",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/institutionRoles/{roleId}": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get Institution Role",
        "description": "Loads a specific institution role.\n\nUsers must have the entitlement 'system.institutionrole.VIEW' to access this endpoint.\n\n**Since**: 3300.4.0",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The institution role ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | roleId     | roleId:STUDENT                        |\n \n\n**Since**: 3300.5.0",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InstitutionRole"
            }
          },
          "400": {
            "description": "The request did not specify a valid roleId",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The institution role is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/systemRoles": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get System Roles",
        "description": "Returns a list of system roles.\n\nUsers must have the 'system.systemrole.manager.VIEW' entitlement to access this endpoint.\n\n**Since**: 3300.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "Search for system roles with roleId\n\n**Since**: 3300.5.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "custom",
            "in": "query",
            "description": "Search for system roles by custom flag.  A value of 'true' indicates that search results should be limited to only custom roles.  A value of 'false' indicates results should be limited to built-in roles.  Not setting this field indicates that all system roles should be returned.\n\n**Since**: 3300.5.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"roleId(desc)\"\n\nSupported fields are:\n\n<ul> - roleId\n- custom\n</ul>\n**Since**: 3300.5.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SystemRole"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Access Denied",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/systemRoles/{roleId}": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get System Role",
        "description": "Get a specific system role by roleId. See the roleId parameter for valid roleId formats.\n\nUsers must have the 'system.systemrole.manager.VIEW' entitlement to access this endpoint.\n\n**Since**: 3300.5.0",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The System Role ID.  This may be the primary ID, or the secondary roleId type. The suffix \":custom\" will be appended to the roleId of a custom system role if that roleId conflicts with the roleId of a system generated role.  For example, if a custom role roleId is specified as \"Guest\" then the roleId will actually be \"Guest:custom\" since there is already a system generated role with the roleId of \"Guest\". \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | roleId     | roleId:column1                        |\n \n\n**Since**: 3300.5.0",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemRole"
            }
          },
          "400": {
            "description": "The request did not specify a valid roleId",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Access Denied",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The system role is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/columns/{columnId}/rubrics/associations": {
      "get": {
        "tags": [
          "rubric associations"
        ],
        "summary": "Get Rubric Associations By Column Id",
        "description": "Returns the list of Rubric Associations related to the specified gradebook column within the specified course.\n\nUser must have the following entitlements in order to see the associations.\n\n- course.rubrics.VIEW\n- course.gradebook-metadata.VIEW\n- course.gradebook.MODIFY\n\n**Since**: 3900.60.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RubricAssociation"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/rubrics/{rubricId}/associations": {
      "get": {
        "tags": [
          "rubric associations"
        ],
        "summary": "Get Rubric Associations",
        "description": "Returns a list of rubric associations for a given course Id and rubric Id. If provided course Id is from an Original course, associations might include both Gradebook and Assessments entities. If provided course Id is from an Ultra course, only associations with Gradebook entities will be fetched.\n\nUser most have the following entitlement in order to see the provided course's rubrics.\n\n- course.rubrics.VIEW\n\n**Since**: 3900.60.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RubricIdParam.rubricId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name.family(desc),created\"\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RubricAssociation"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/rubrics/{rubricId}/associations/{rubricAssociationId}": {
      "get": {
        "tags": [
          "rubric associations"
        ],
        "summary": "Get Rubric Association By Id",
        "description": "Returns a rubric association for a given course Id, rubric Id and rubric association Id.\n\nUser most have the following entitlement in order to see the provided course's rubrics.\n\n- course.rubrics.VIEW\n\n**Since**: 3900.60.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RubricIdParam.rubricId"
          },
          {
            "$ref": "#/parameters/RubricAssociationIdParam.rubricAssociationId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RubricAssociation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/rubrics": {
      "get": {
        "tags": [
          "rubrics"
        ],
        "summary": "Get Rubrics",
        "description": "Returns a list of rubrics for a given course.\n\nUser most have the following entitlement in order to see the provided course's rubrics.\n\n- course.rubrics.VIEW\n\n**Since**: 3900.46.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/RubricsSortCriteria.sort"
          },
          {
            "$ref": "#/parameters/RubricsSearchCriteria.created"
          },
          {
            "$ref": "#/parameters/RubricsSearchCriteria.createdCompare"
          },
          {
            "$ref": "#/parameters/RubricsSearchCriteria.modified"
          },
          {
            "$ref": "#/parameters/RubricsSearchCriteria.modifiedCompare"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RubricDefinition"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/rubrics/{rubricId}": {
      "get": {
        "tags": [
          "rubrics"
        ],
        "summary": "Get Rubric By Id",
        "description": "Returns a rubric for a given course Id and a rubric Id.\n\nUser most have the following entitlement in order to see the provided course's rubrics.\n\n- course.rubrics.VIEW\n\n**Since**: 3900.46.0",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RubricIdParam.rubricId"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>cells</li><li>columns</li><li>rows</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RubricDefinition"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/loginAs/sessions": {
      "get": {
        "tags": [
          "sessions"
        ],
        "summary": "Get Login As Sessions",
        "description": "List of historic login-as-user sessions in Learn.\n\nUsers with the following entitlement can view login as sessions:\n\n- system.user.impersonate.VIEW\n</p>\n\n**Since**: 3900.58.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/SortingQueryParams.sort"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LoginAsSession"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/sessions": {
      "get": {
        "tags": [
          "sessions"
        ],
        "summary": "Get Active Sessions",
        "description": "List active user sessions in Learn.\n\nUsers with the following entitlement can view others session:\n\n- system.user.sessions.VIEW\n</p>\n\nAlso with users with any of the following entitlements can view the users information using the expand param:\n\n- system.user.VIEW\n- user.VIEW\n</p>\n\n**Since**: 3800.4.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "A comma-delimited list of fields to expand as part of the response. Expanded fields may cause additional load time. Supported fields are:<br><ul><li>user</li></ul>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Session"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/logs/sis/dataSets/{id}": {
      "get": {
        "tags": [
          "SIS Logs"
        ],
        "summary": "Get SIS Logs By Data Set Uid",
        "description": "\n\nReturns a list of SIS Integration logs. Users with 'system.dataintegrations.log.VIEW' entitlement can view these logs. </p> </p> NOTE: If integration is processing the feed file then 423 (LOCKED) will be returned as response.\n\n**Since**: 3200.0.1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": ": dataSetUid of the integration",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/LogLevel.level"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SISLogEntry"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "423": {
            "description": "Locked",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/system/info": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get Info",
        "description": "Gets the values of Cloud settings that are needed for interacting with platform services.\n\n**Since**: 3900.56.0",
        "parameters": [
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemInfo"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/system/policies/privacy": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get Policies",
        "description": "Returns the links to the Blackboard and Institution privacy policies\n\n**Since**: 3400.5.0",
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "description": "the locale, otherwise it defaults to en_US",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PrivacyPolicy"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/system/tasks/{taskId}": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get System Task",
        "description": "Get the background task by the given task Id.\n\n**Since**: 3800.1.0",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemTask"
            }
          },
          "400": {
            "description": "The task id is invalid or not properly formatted",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user is not authorized to view the specified Task object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The task id is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/system/version": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get Version",
        "description": "Gets the current Learn server version.\n\n**Since**: 3000.3.0",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionInfo"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/terms": {
      "get": {
        "tags": [
          "terms"
        ],
        "summary": "Get Terms",
        "description": "Returns a list of terms.\n\nProperties returned for each term will depend on whether or not the caller has one of the term entitlements.\n\nCallers without either the entitlements 'term.VIEW' or 'term.MODIFY' will always get a minimal set of core properties:\n\n- id\n- name\n- description\n- availability.*\n\nIf the user has one of the entitlements, they will also get the following properties:\n\n- externalId\n- dataSourceId\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Search for term with externalId properties that contain this value.\n\n**Since**: 3100.6.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "dataSourceId",
            "in": "query",
            "description": "Search for term with this dataSourceId.\n\n**Since**: 3100.6.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "availability.available",
            "in": "query",
            "description": "Search for users with availability.available properties that contain this value.\n\n**Since**: 3100.6.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the term and the courses it contains. |\n| No | Students may not access the term or the courses it contains. |\n",
            "required": false,
            "type": "string",
            "enum": [
              "Yes",
              "No"
            ]
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Term"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "terms"
        ],
        "summary": "Create Term",
        "description": "Creates a term.\n\nThe 'system.term.MODIFY' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "externalId",
                "name"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An externally-defined unique ID for the term.\n\nFormerly known as 'sourcedidId'.",
                  "maxLength": 256
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this term.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the term.",
                  "maxLength": 333
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The description of the term. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the term to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the term and the courses it contains are available to students.  Instructors can always access their courses.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the term and the courses it contains. |\n| No | Students may not access the term or the courses it contains. |\n",
                      "enum": [
                        "Yes",
                        "No"
                      ]
                    },
                    "duration": {
                      "type": "object",
                      "description": "Settings controlling the length of time the term is available.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The intended length of the term.  Possible values are:\n\n\n| Type      | Description\n | --------- | --------- |\n| Continuous | The term is active on an ongoing basis. This is the default. |\n| DateRange | The term will only be available between specific date ranges. |\n| FixedNumDays | The term will only be available for a set number of days. |\n",
                          "enum": [
                            "Continuous",
                            "DateRange",
                            "FixedNumDays"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this term starts.  May only be set if availability.duration.type is DateRange."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this term ends.  May only be set if availability.duration.type is DateRange."
                        },
                        "daysOfUse": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of days courses within this term can be used.  May only be set if availability.duration.type is FixedNumDays."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Term"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/terms/{termId}": {
      "get": {
        "tags": [
          "terms"
        ],
        "summary": "Get Term",
        "description": "Loads a term.\n\nProperties returned will depend on whether or not the caller has one of the term entitlements.\n\nCallers without either the entitlements 'term.VIEW' or 'term.MODIFY' will always get a minimal set of core properties:\n\n- id\n- name\n- description\n- availability.*\n\nIf the user has one of the entitlements, they will also get the following properties:\n\n- externalId\n- dataSourceId\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/TermIdParam.termId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Term"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "terms"
        ],
        "summary": "Delete Term",
        "description": "Deletes a term.\n\nThe 'system.term.MODIFY' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/TermIdParam.termId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "terms"
        ],
        "summary": "Update Term",
        "description": "Updates a term.\n\nThe 'system.term.MODIFY' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/TermIdParam.termId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An externally-defined unique ID for the term.\n\nFormerly known as 'sourcedidId'.",
                  "maxLength": 256
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this term.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the term.",
                  "maxLength": 333
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The description of the term. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the term to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the term and the courses it contains are available to students.  Instructors can always access their courses.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the term and the courses it contains. |\n| No | Students may not access the term or the courses it contains. |\n",
                      "enum": [
                        "Yes",
                        "No"
                      ]
                    },
                    "duration": {
                      "type": "object",
                      "description": "Settings controlling the length of time the term is available.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The intended length of the term.  Possible values are:\n\n\n| Type      | Description\n | --------- | --------- |\n| Continuous | The term is active on an ongoing basis. This is the default. |\n| DateRange | The term will only be available between specific date ranges. |\n| FixedNumDays | The term will only be available for a set number of days. |\n",
                          "enum": [
                            "Continuous",
                            "DateRange",
                            "FixedNumDays"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this term starts.  May only be set if availability.duration.type is DateRange."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this term ends.  May only be set if availability.duration.type is DateRange."
                        },
                        "daysOfUse": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of days courses within this term can be used.  May only be set if availability.duration.type is FixedNumDays."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Term"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/uploads": {
      "post": {
        "tags": [
          "uploads"
        ],
        "summary": "Upload",
        "description": "Upload a file to temporary storage. The request is a multipart/form-data POST following RFC 1867. (https://www.ietf.org/rfc/rfc1867.txt)\n\nThe uploaded file will be scanned for potential security threats by the system's XSS filters. If the file is deemed as unsafe, the request will be rejected and an HTTP Status of 422 is returned.\n\nReturns an ID of the file reference, so it can be used for processing by a different service.\n\nExample Request: <pre>  curl -X POST -H 'Authorization: Bearer your_token' -F 'file=@/path/to/your/file' https://YOUR_LEARN_INSTANCE/learn/api/public/v1/uploads  </pre>\n\n**Since**: 3100.12.0",
        "parameters": [
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UploadedFileInfo"
            }
          },
          "422": {
            "description": "File is potentially unsafe as determined from an XSS scan",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/uploads/settings": {
      "get": {
        "tags": [
          "uploads"
        ],
        "summary": "Get Settings",
        "description": "Retrieve all settings of upload file service\n\n**Since**: 3900.41.0",
        "parameters": [
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSettings"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users",
        "description": "Returns a list of users.\n\nAt least one of the entitlements 'system.user.VIEW' or 'user.VIEW' are needed.\n\nNote: Users with the 'SystemAdmin' role are only included in the results if the logged on user also has this role.\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "userName",
            "in": "query",
            "description": "Search for users with userName properties that contain this value.\n\n**Since**: 3000.11.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Search for users with externalId properties that contain this value.\n\n**Since**: 3000.11.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for users with a created date relative to this value.  'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3000.11.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search for users with a modified date relative to this value.  'modifiedCompare' may also be sent to control search behavior.\n\n**Since**: 3700.1.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "lastLogin",
            "in": "query",
            "description": "Search for users with a last login date relative to this value.  'lastLoginCompare' may also be sent to control search behavior. A user who has never logged in would have a null last login date.  This is not considered to be greater than, less than, or equal to a valid date. Such users will be filtered out any time this filter is used.\n\n**Since**: 3900.9.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3000.11.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "$ref": "#/parameters/UsersSearchCriteria.modifiedCompare"
          },
          {
            "name": "lastLoginCompare",
            "in": "query",
            "description": "Used alongside the 'lastLoginDate' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3900.9.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "dataSourceId",
            "in": "query",
            "description": "Search for users with this dataSourceId.  This may optionally be the data source's externalId using the syntax \"externalId:math101\".\n\n**Since**: 3000.11.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "institutionRoleIds",
            "in": "query",
            "description": "Search for users with the specified institutionRoleIds.  This may be a comma separated list of institution role ids.\n\n**Since**: 3900.61.0",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "name.family",
            "in": "query",
            "description": "Search for users with name.family properties that contain this value.\n\n**Since**: 3000.11.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "availability.available",
            "in": "query",
            "description": "Search for users with availability.available properties that contain this value.\n\n**Since**: 3100.0.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n| Disabled |   **Since**: 3100.0.0 |\n",
            "required": false,
            "type": "string",
            "enum": [
              "Yes",
              "No",
              "Disabled"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name.family(desc),created\" Supported fields are:\n\n- userName\n- name.family\n- externalId\n- dataSourceId\n- created\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create User",
        "description": "Creates a user.\n\nThe 'system.user.CREATE' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name",
                "password",
                "userName"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An optional externally-defined unique ID for the user.  Defaults to the userName.\n\nFormerly known as 'batchUid'.",
                  "maxLength": 256
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this user.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "userName": {
                  "type": "string",
                  "description": "The userName property, shown in the UI."
                },
                "studentId": {
                  "type": "string",
                  "description": "The user's student ID name or number as defined by the school or institution.",
                  "maxLength": 100
                },
                "password": {
                  "type": "string",
                  "description": "The user's login password."
                },
                "educationLevel": {
                  "type": "string",
                  "description": "The education level of this user.\n\n\n| Type      | Description\n | --------- | --------- |\n| K8 | Kindergarten through 8th grade |\n| HighSchool | Grades 9 through 12. |\n| Freshman | College or university freshman. |\n| Sophomore | College or university sophomore. |\n| Junior | College or university junior. |\n| Senior | College or university senior. |\n| GraduateSchool | Graduate school student. |\n| PostGraduateSchool | Post-graduate school student. |\n| Unknown | Education Level is not known, or not specified. |\n",
                  "enum": [
                    "K8",
                    "HighSchool",
                    "Freshman",
                    "Sophomore",
                    "Junior",
                    "Senior",
                    "GraduateSchool",
                    "PostGraduateSchool",
                    "Unknown"
                  ]
                },
                "gender": {
                  "type": "string",
                  "description": "The gender of this user.\n\n\n| Type      | Description\n | --------- | --------- |\n| Female | Female |\n| Male | Male |\n| Other | Other  **Since**: 3900.32.0 |\n| Unknown | Gender is not known, or not specified. |\n",
                  "enum": [
                    "Female",
                    "Male",
                    "Other",
                    "Unknown"
                  ]
                },
                "pronouns": {
                  "type": "string",
                  "description": "The pronouns of this user.\n\n**Since**: 3900.27.0",
                  "maxLength": 1000
                },
                "birthDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The birth date of this user. Only the date portion of this value has significance, since a person's birthdate represents a full day and not a moment in time. Take care to ignore the zeroed time portion when deserializing this value to ensure it's not converted to the previous calendar day if your local time zone has a negative UTC offset."
                },
                "institutionRoleIds": {
                  "type": "array",
                  "description": "The primary and secondary institution roles assigned to this user. The primary institution role is the first item in the list, followed by all secondary institution roles sorted alphabetically.\n\n**Since**: 3300.3.0",
                  "items": {
                    "type": "string"
                  }
                },
                "systemRoleIds": {
                  "type": "array",
                  "description": "The system roles (the administrative user roles in the UI) for this user.  The first role in this list is the user's primary system role, while the remaining are secondary system roles.",
                  "items": {
                    "$ref": "#/definitions/SystemRoleEnum"
                  }
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the user account.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the user is available within the system. Unavailable users cannot log in.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n| Disabled |   **Since**: 3100.0.0 |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "Disabled"
                      ]
                    }
                  }
                },
                "name": {
                  "type": "object",
                  "description": "Properties used to build the user's display name.",
                  "title": "Name",
                  "properties": {
                    "given": {
                      "type": "string",
                      "description": "The given (first) name of this user.",
                      "maxLength": 100
                    },
                    "family": {
                      "type": "string",
                      "description": "The family (last) name of this user.",
                      "maxLength": 100
                    },
                    "middle": {
                      "type": "string",
                      "description": "The middle name of this user.",
                      "maxLength": 100
                    },
                    "other": {
                      "type": "string",
                      "description": "The other name (nickname) of this user.",
                      "maxLength": 100
                    },
                    "suffix": {
                      "type": "string",
                      "description": "The suffix of this user's name.  Examples: Jr., III, PhD.",
                      "maxLength": 100
                    },
                    "title": {
                      "type": "string",
                      "description": "The title of this user.  Examples: Mr., Ms., Dr.",
                      "maxLength": 100
                    },
                    "preferredDisplayName": {
                      "type": "string",
                      "description": "The preferred display name of this user.\n\n**Since**: 3900.48.0\n\n\n| Type      | Description\n | --------- | --------- |\n| GivenName | User requests displaying givenName when formatting names for display. This is the default behavior. |\n| OtherName | User requests displaying otherName when formatting names for display. |\n| Both | User requests displaying otherName and givenName when formatting names for display. |\n",
                      "enum": [
                        "GivenName",
                        "OtherName",
                        "Both"
                      ]
                    }
                  },
                  "required": [
                    "family",
                    "given"
                  ]
                },
                "job": {
                  "type": "object",
                  "description": "The user's job information.",
                  "title": "Job",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "The user's job title.",
                      "maxLength": 100
                    },
                    "department": {
                      "type": "string",
                      "description": "The department the user belongs to.",
                      "maxLength": 100
                    },
                    "company": {
                      "type": "string",
                      "description": "The company the user works for.",
                      "maxLength": 100
                    }
                  }
                },
                "contact": {
                  "type": "object",
                  "description": "The user's contact information.",
                  "title": "Contact",
                  "properties": {
                    "homePhone": {
                      "type": "string",
                      "description": "The user's home phone number.",
                      "maxLength": 50
                    },
                    "mobilePhone": {
                      "type": "string",
                      "description": "The user's mobile phone number.",
                      "maxLength": 50
                    },
                    "businessPhone": {
                      "type": "string",
                      "description": "The user's business phone number.",
                      "maxLength": 50
                    },
                    "businessFax": {
                      "type": "string",
                      "description": "The user's business fax number.",
                      "maxLength": 50
                    },
                    "email": {
                      "type": "string",
                      "description": "The user's email address.",
                      "maxLength": 100
                    },
                    "institutionEmail": {
                      "type": "string",
                      "description": "The user's institutional email address.\n\n**Since**: 3900.19.0",
                      "maxLength": 254
                    },
                    "webPage": {
                      "type": "string",
                      "description": "The URL of the user's personal website.",
                      "maxLength": 100
                    }
                  }
                },
                "address": {
                  "type": "object",
                  "description": "The user's mailing address.",
                  "title": "Address",
                  "properties": {
                    "street1": {
                      "type": "string",
                      "description": "The street address of the user.",
                      "maxLength": 100
                    },
                    "street2": {
                      "type": "string",
                      "description": "An additional field to store the street address of the user.",
                      "maxLength": 100
                    },
                    "city": {
                      "type": "string",
                      "description": "The city the user resides in.",
                      "maxLength": 50
                    },
                    "state": {
                      "type": "string",
                      "description": "The state or province the user resides in.",
                      "maxLength": 50
                    },
                    "zipCode": {
                      "type": "string",
                      "description": "The zip code or postal code the user resides in.",
                      "maxLength": 50
                    },
                    "country": {
                      "type": "string",
                      "description": "The country the user resides in.",
                      "maxLength": 50
                    }
                  }
                },
                "locale": {
                  "type": "object",
                  "description": "The user's localization settings.",
                  "title": "Locale",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The locale specified by the user.  This locale will be used anywhere the user is allowed to customize their locale; courses may force a specific locale, overriding the user's locale preference."
                    },
                    "calendar": {
                      "type": "string",
                      "description": "The calendar type specified by the user.\n\n\n| Type      | Description\n | --------- | --------- |\n| Gregorian | Gregorian |\n| GregorianHijri | Gregorian & Hijri |\n| Hijri | Hijri |\n| HijriGregorian | Hijri & Gregorian |\n",
                      "enum": [
                        "Gregorian",
                        "GregorianHijri",
                        "Hijri",
                        "HijriGregorian"
                      ]
                    },
                    "firstDayOfWeek": {
                      "type": "string",
                      "description": "The user's preferred first day of the week.\n\n\n| Type      | Description\n | --------- | --------- |\n| Sunday | Sunday |\n| Monday | Monday |\n| Saturday | Saturday |\n",
                      "enum": [
                        "Sunday",
                        "Monday",
                        "Saturday"
                      ]
                    }
                  }
                },
                "avatar": {
                  "type": "object",
                  "description": "The user's avatar metadata\n\n**Since**: 3800.13.0",
                  "title": "Avatar",
                  "properties": {
                    "source": {
                      "type": "string",
                      "description": "The source of the user's avatar\n\n**Since**: 3800.13.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Default | The server default avatar |\n| User | The user set his/her own avatar |\n| System | A privileged user set the user's avatar to something other than default |\n",
                      "enum": [
                        "Default",
                        "User",
                        "System"
                      ]
                    },
                    "uploadId": {
                      "type": "string",
                      "description": "The upload id of the avatar image file, if referencing a newly-uploaded file\n\n**Since**: 3800.13.0"
                    },
                    "resourceId": {
                      "type": "string",
                      "description": "The resource file id of the user's avatar, if referencing a Content Collection Resource\n\n**Since**: 3900.50.0"
                    }
                  }
                },
                "pronunciation": {
                  "type": "string",
                  "description": "Pronunciation text for user's name\n\n**Since**: 3900.32.0"
                },
                "pronunciationAudio": {
                  "type": "object",
                  "description": "Pronunciation Audio file for user's name\n\n**Since**: 3900.32.0",
                  "title": "PronunciationAudio",
                  "properties": {
                    "uploadId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "An error occurred while creating the new user",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The currently authenticated user has insufficient privileges to create a new user",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "A user with the same userName or externalId already exists",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/users/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User",
        "description": "Loads a user.\n\nProperties returned will depend on the caller's entitlements.\n\nCallers with the entitlement 'user.VIEW' will always get a minimal set of core properties:\n\n- id\n- name.given\n- name.family\n- name.middle\n- systemRoleIds\n\nDepending on the Learn administrator customizable user field display settings, as well as the target user's personal visibility settings, the following fields might also be included:\n\n- userName\n- educationLevel\n- gender\n- birthDate\n- name.other\n- name.suffix\n- name.title\n- job.*\n- contact.*\n- address.*\n\nCallers asking for their own user record get all fields listed above, plus:\n\n- locale.*\n\nAll user properties are provided to callers with one of the entitlements 'system.user.properties.MODIFY', 'system.useradmin.generic.VIEW', or 'system.user.VIEW'.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "The id is invalid or not properly formatted",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user is not authorized to view the specified User object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The user is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete User",
        "description": "Deletes a user.\n\nThe 'system.user.DELETE' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid userid provided",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The user is not authorized to delete the specified User object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update User",
        "description": "Updates a user.\n\nCallers may update their own user record if they have the 'self.user.MODIFY' entitlement.  Updating other users requires the 'system.user.properties.MODIFY' entitlement.\n\nCertain properties may be edited by callers with more finely grained entitlements: \n\n | Field                  | Entitlements Required                               |\n |------------------------|-----------------------------------------------------|\n | systemRoleIds          | system.user.MODIFY, system.user-system-role.MODIFY  |\n | availability.available | system.user.MODIFY, system.user.availability.MODIFY |\n | password               | system.user.MODIFY, system.user-password.MODIFY     |\n \n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An optional externally-defined unique ID for the user.  Defaults to the userName.\n\nFormerly known as 'batchUid'.",
                  "maxLength": 256
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this user.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "userName": {
                  "type": "string",
                  "description": "The userName property, shown in the UI."
                },
                "studentId": {
                  "type": "string",
                  "description": "The user's student ID name or number as defined by the school or institution.",
                  "maxLength": 100
                },
                "password": {
                  "type": "string",
                  "description": "The user's login password."
                },
                "educationLevel": {
                  "type": "string",
                  "description": "The education level of this user.\n\n\n| Type      | Description\n | --------- | --------- |\n| K8 | Kindergarten through 8th grade |\n| HighSchool | Grades 9 through 12. |\n| Freshman | College or university freshman. |\n| Sophomore | College or university sophomore. |\n| Junior | College or university junior. |\n| Senior | College or university senior. |\n| GraduateSchool | Graduate school student. |\n| PostGraduateSchool | Post-graduate school student. |\n| Unknown | Education Level is not known, or not specified. |\n",
                  "enum": [
                    "K8",
                    "HighSchool",
                    "Freshman",
                    "Sophomore",
                    "Junior",
                    "Senior",
                    "GraduateSchool",
                    "PostGraduateSchool",
                    "Unknown"
                  ]
                },
                "gender": {
                  "type": "string",
                  "description": "The gender of this user.\n\n\n| Type      | Description\n | --------- | --------- |\n| Female | Female |\n| Male | Male |\n| Other | Other  **Since**: 3900.32.0 |\n| Unknown | Gender is not known, or not specified. |\n",
                  "enum": [
                    "Female",
                    "Male",
                    "Other",
                    "Unknown"
                  ]
                },
                "pronouns": {
                  "type": "string",
                  "description": "The pronouns of this user.\n\n**Since**: 3900.27.0",
                  "maxLength": 1000
                },
                "birthDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The birth date of this user. Only the date portion of this value has significance, since a person's birthdate represents a full day and not a moment in time. Take care to ignore the zeroed time portion when deserializing this value to ensure it's not converted to the previous calendar day if your local time zone has a negative UTC offset."
                },
                "institutionRoleIds": {
                  "type": "array",
                  "description": "The primary and secondary institution roles assigned to this user. The primary institution role is the first item in the list, followed by all secondary institution roles sorted alphabetically.\n\n**Since**: 3300.3.0",
                  "items": {
                    "type": "string"
                  }
                },
                "systemRoleIds": {
                  "type": "array",
                  "description": "The system roles (the administrative user roles in the UI) for this user.  The first role in this list is the user's primary system role, while the remaining are secondary system roles.",
                  "items": {
                    "$ref": "#/definitions/SystemRoleEnum"
                  }
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the user account.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the user is available within the system. Unavailable users cannot log in.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n| Disabled |   **Since**: 3100.0.0 |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "Disabled"
                      ]
                    }
                  }
                },
                "name": {
                  "type": "object",
                  "description": "Properties used to build the user's display name.",
                  "title": "Name",
                  "properties": {
                    "given": {
                      "type": "string",
                      "description": "The given (first) name of this user.",
                      "maxLength": 100
                    },
                    "family": {
                      "type": "string",
                      "description": "The family (last) name of this user.",
                      "maxLength": 100
                    },
                    "middle": {
                      "type": "string",
                      "description": "The middle name of this user.",
                      "maxLength": 100
                    },
                    "other": {
                      "type": "string",
                      "description": "The other name (nickname) of this user.",
                      "maxLength": 100
                    },
                    "suffix": {
                      "type": "string",
                      "description": "The suffix of this user's name.  Examples: Jr., III, PhD.",
                      "maxLength": 100
                    },
                    "title": {
                      "type": "string",
                      "description": "The title of this user.  Examples: Mr., Ms., Dr.",
                      "maxLength": 100
                    },
                    "preferredDisplayName": {
                      "type": "string",
                      "description": "The preferred display name of this user.\n\n**Since**: 3900.48.0\n\n\n| Type      | Description\n | --------- | --------- |\n| GivenName | User requests displaying givenName when formatting names for display. This is the default behavior. |\n| OtherName | User requests displaying otherName when formatting names for display. |\n| Both | User requests displaying otherName and givenName when formatting names for display. |\n",
                      "enum": [
                        "GivenName",
                        "OtherName",
                        "Both"
                      ]
                    }
                  }
                },
                "job": {
                  "type": "object",
                  "description": "The user's job information.",
                  "title": "Job",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "The user's job title.",
                      "maxLength": 100
                    },
                    "department": {
                      "type": "string",
                      "description": "The department the user belongs to.",
                      "maxLength": 100
                    },
                    "company": {
                      "type": "string",
                      "description": "The company the user works for.",
                      "maxLength": 100
                    }
                  }
                },
                "contact": {
                  "type": "object",
                  "description": "The user's contact information.",
                  "title": "Contact",
                  "properties": {
                    "homePhone": {
                      "type": "string",
                      "description": "The user's home phone number.",
                      "maxLength": 50
                    },
                    "mobilePhone": {
                      "type": "string",
                      "description": "The user's mobile phone number.",
                      "maxLength": 50
                    },
                    "businessPhone": {
                      "type": "string",
                      "description": "The user's business phone number.",
                      "maxLength": 50
                    },
                    "businessFax": {
                      "type": "string",
                      "description": "The user's business fax number.",
                      "maxLength": 50
                    },
                    "email": {
                      "type": "string",
                      "description": "The user's email address.",
                      "maxLength": 100
                    },
                    "institutionEmail": {
                      "type": "string",
                      "description": "The user's institutional email address.\n\n**Since**: 3900.19.0",
                      "maxLength": 254
                    },
                    "webPage": {
                      "type": "string",
                      "description": "The URL of the user's personal website.",
                      "maxLength": 100
                    }
                  }
                },
                "address": {
                  "type": "object",
                  "description": "The user's mailing address.",
                  "title": "Address",
                  "properties": {
                    "street1": {
                      "type": "string",
                      "description": "The street address of the user.",
                      "maxLength": 100
                    },
                    "street2": {
                      "type": "string",
                      "description": "An additional field to store the street address of the user.",
                      "maxLength": 100
                    },
                    "city": {
                      "type": "string",
                      "description": "The city the user resides in.",
                      "maxLength": 50
                    },
                    "state": {
                      "type": "string",
                      "description": "The state or province the user resides in.",
                      "maxLength": 50
                    },
                    "zipCode": {
                      "type": "string",
                      "description": "The zip code or postal code the user resides in.",
                      "maxLength": 50
                    },
                    "country": {
                      "type": "string",
                      "description": "The country the user resides in.",
                      "maxLength": 50
                    }
                  }
                },
                "locale": {
                  "type": "object",
                  "description": "The user's localization settings.",
                  "title": "Locale",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The locale specified by the user.  This locale will be used anywhere the user is allowed to customize their locale; courses may force a specific locale, overriding the user's locale preference."
                    },
                    "calendar": {
                      "type": "string",
                      "description": "The calendar type specified by the user.\n\n\n| Type      | Description\n | --------- | --------- |\n| Gregorian | Gregorian |\n| GregorianHijri | Gregorian & Hijri |\n| Hijri | Hijri |\n| HijriGregorian | Hijri & Gregorian |\n",
                      "enum": [
                        "Gregorian",
                        "GregorianHijri",
                        "Hijri",
                        "HijriGregorian"
                      ]
                    },
                    "firstDayOfWeek": {
                      "type": "string",
                      "description": "The user's preferred first day of the week.\n\n\n| Type      | Description\n | --------- | --------- |\n| Sunday | Sunday |\n| Monday | Monday |\n| Saturday | Saturday |\n",
                      "enum": [
                        "Sunday",
                        "Monday",
                        "Saturday"
                      ]
                    }
                  }
                },
                "avatar": {
                  "type": "object",
                  "description": "The user's avatar metadata\n\n**Since**: 3800.13.0",
                  "title": "Avatar",
                  "properties": {
                    "source": {
                      "type": "string",
                      "description": "The source of the user's avatar\n\n**Since**: 3800.13.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Default | The server default avatar |\n| User | The user set his/her own avatar |\n| System | A privileged user set the user's avatar to something other than default |\n",
                      "enum": [
                        "Default",
                        "User",
                        "System"
                      ]
                    },
                    "uploadId": {
                      "type": "string",
                      "description": "The upload id of the avatar image file, if referencing a newly-uploaded file\n\n**Since**: 3800.13.0"
                    },
                    "resourceId": {
                      "type": "string",
                      "description": "The resource file id of the user's avatar, if referencing a Content Collection Resource\n\n**Since**: 3900.50.0"
                    }
                  }
                },
                "pronunciation": {
                  "type": "string",
                  "description": "Pronunciation text for user's name\n\n**Since**: 3900.32.0"
                },
                "pronunciationAudio": {
                  "type": "object",
                  "description": "Pronunciation Audio file for user's name\n\n**Since**: 3900.32.0",
                  "title": "PronunciationAudio",
                  "properties": {
                    "uploadId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "The request did not specify correct parameters; or The resourceId and uploadId fields cannot both be populated at the same time; or Resource referenced by ResourceId not found or not usable by current user (if ResourceId is specified); or Resource Id provided is for an unsupported file format, only image formats are supported; or Resource Id provided is for a folder, only images are supported",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user is not authorized to update the specified User object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The user is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "A user with the same username or batchUid already exists",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/users/{userId}/avatar": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User Avatar",
        "description": "Gets a user's avatar image.\n\nThe response is an HTTP redirect rather then image raw data. It is up to the caller of the api to follow the redirect and download the image.\n\nThe redirect link returned is signed on behalf of the user of the API. It is expiring, so it is not recommended for bookmarking. The caller of this API is checked for permissions to see the requested user's resource.\n\n**Since**: 3800.10.0",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdParam.userId"
          }
        ],
        "responses": {
          "400": {
            "description": "The id is invalid or not properly formatted",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "302": {
            "description": "Found",
            "headers": {
              "Location": {
                "type": "string",
                "description": "A URL from which the corresponding file can be downloaded"
              }
            }
          },
          "403": {
            "description": "The user is not authorized to view the specified User object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The user is not found; or The user's avatar is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/users/{userId}/observees": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Observees",
        "description": "Returns a list of users being observed by a given user.\n\nThe 'observer.associations.VIEW' entitlement is needed as well as being able to view the provided user.\n\n**Since**: 3500.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/users/{userId}/observers": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Observers",
        "description": "Returns a list of users observing a given user.\n\nThe 'observer.associations.VIEW' entitlement is needed as well as being able to view the provided user.\n\n**Since**: 3500.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/users/{userId}/observers/{observerId}": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Create Observer",
        "description": "Creates an observer/observee association. The user identified by userId must not have the OBSERVER system role. Similarly, the user identified by observerId must have the OBSERVER system role.\n\nThe 'system.observer_user.CREATE' entitlement is needed as well as being able to view the provided users.\n\n**Since**: 3500.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "name": "observerId",
            "in": "path",
            "description": "The user ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:jsmith                     |\n | userName   | userName:jsmith                       |\n | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 |\n \n\n**Since**: 3500.5.0",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete Observer",
        "description": "Removes an observer/observee association.\n\nThe 'system.observer_user.DELETE' entitlement is needed as well as being able to view the provided users.\n\n**Since**: 3500.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "name": "observerId",
            "in": "path",
            "description": "The user ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:jsmith                     |\n | userName   | userName:jsmith                       |\n | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 |\n \n\n**Since**: 3500.5.0",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/users/{userId}/pronunciationAudio": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User Pronunciation Audio",
        "description": "Gets a user's pronunciation audio\n\nThe response is an HTTP redirect rather than an audio file. It is up to the caller of the api to follow the redirect and download the image.\n\nThe redirect link returned is signed on behalf of the user of the API. It is expiring, so it is not recommended for bookmarking. The caller of this API is checked for permissions to see the requested user's resource.\n\n**Since**: 3900.32.0",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdParam.userId"
          }
        ],
        "responses": {
          "400": {
            "description": "The id is invalid or not properly formatted",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "302": {
            "description": "Found",
            "headers": {
              "Location": {
                "type": "string",
                "description": "A URL from which the corresponding file can be downloaded."
              }
            }
          },
          "403": {
            "description": "The user is not authorized to view the specified User object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The user is not found; or The user's pronunciation audio is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/users/{userId}/sessions": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Current Active User By Id",
        "description": "Displays active session information for a specific user.\n\nThe entitlement system.user.sessions.VIEW is needed to request a user's active sessions.\n\n**Since**: 3800.4.0",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Session"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "User does not have the appropriate entitlement to view active sessions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Invalid userid provided",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/columns": {
      "get": {
        "tags": [
          "deprecated - course grades"
        ],
        "summary": "Get Grade Columns",
        "description": "Returns a list of grade columns.\n\nThe entitlement \"course.gradebook.MODIFY\" is needed. Alternatively, student users may view the grade columns if they are enrolled in the course, and the mygrade tool is available in the course, and the columns are visible to the student. Observers may view grade columns if course access is allowed for observers and the associated observee is a student that satisfies all conditions required by a student user to view grade columns.\n\nStudent or observer users may view a limited subset of grade column fields:\n\n- id\n- name\n- description\n- externalGrade\n- contentId\n- score.possible\n- grading.type\n- grading.due\n- grading.attemptsAllowed\n- grading.scoringModel\n- availability.available\n\n**Since**: 3000.3.0\n\n**Deprecated**: since 3200.10.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "contentId",
            "in": "query",
            "description": "Search for grade columns associated with this content item.\n\n**Since**: 3000.11.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GradeColumn"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "deprecated - course grades"
        ],
        "summary": "Create Grade Column",
        "description": "Create a manual grade column. The entitlement \"course.gradebook.MODIFY\" is needed.\n\n**Since**: 3000.7.0\n\n**Deprecated**: since 3200.10.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "grading",
                "name"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "The externalId for this grade column"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the grade column."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the grade column."
                },
                "externalGrade": {
                  "type": "boolean",
                  "description": "Whether this grade column is an external grade column."
                },
                "score": {
                  "type": "object",
                  "description": "Settings controlling the numerical scoring of this grade column.",
                  "title": "Score",
                  "properties": {
                    "possible": {
                      "type": "number",
                      "description": "The points possible for this grade column."
                    },
                    "decimalPlaces": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Decimal place precision used to display scores for this grade column.\n\n**Deprecated**: since 3200.10.0; no alternative exists since this field never fully functioned as described."
                    }
                  }
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling the availability/visibility of grade column data.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether this grade column is available to students\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may view the grade column. |\n| No | Students may not view the grade column. |\n",
                      "enum": [
                        "Yes",
                        "No"
                      ]
                    }
                  }
                },
                "grading": {
                  "type": "object",
                  "description": "Settings controlling whether numerical and text grade values for this grade column are calculated, determined based on attempts, or manually entered.",
                  "title": "Grading",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of Grading settings for this Grade Column.\n\n\n| Type      | Description\n | --------- | --------- |\n| Attempts | Indicates score and grade values are determined based on user attempts |\n| Calculated | Indicates score and grade values are determined by applying a calculated formula. |\n| Manual | Indicates score and grade values are manually entered. |\n",
                      "enum": [
                        "Attempts",
                        "Calculated",
                        "Manual"
                      ]
                    },
                    "due": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which attempts are due for the grade column."
                    },
                    "attemptsAllowed": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Number of attempts allowed for the grade column."
                    },
                    "scoringModel": {
                      "type": "string",
                      "description": "The scoring model for the submitted grade column attempts.\n\n\n| Type      | Description\n | --------- | --------- |\n| Last |  |\n| Highest |  |\n| Lowest |  |\n| First |  |\n| Average |  |\n",
                      "enum": [
                        "Last",
                        "Highest",
                        "Lowest",
                        "First",
                        "Average"
                      ]
                    },
                    "anonymousGrading": {
                      "type": "object",
                      "description": "Settings for anonymous grading",
                      "title": "AnonymousGrading",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of AnonymousGrading settings for this Attempts based Grade Column.\n\n\n| Type      | Description\n | --------- | --------- |\n| None | Indicates anonymous grading is not enabled. |\n| AfterAllGraded | Indicates anonymized grades are released after all attempts have been graded. |\n| Date | Indicates anonymized grades are released after a specified release date. |\n",
                          "enum": [
                            "None",
                            "AfterAllGraded",
                            "Date"
                          ]
                        },
                        "releaseAfter": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Date after which grades are released from being anonymized, if AnonymousGrading type is 'Date'."
                        }
                      },
                      "required": [
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "anonymousGrading",
                    "type"
                  ]
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GradeColumn"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/columns/{columnId}": {
      "get": {
        "tags": [
          "deprecated - course grades"
        ],
        "summary": "Get Grade Column",
        "description": "Loads a specific grade column.\n\nThe entitlement \"course.gradebook.MODIFY\" is needed. Alternatively, student users may view the grade column if they are enrolled in the course, and the mygrade tool is available in the course, and the column is visible to the student. Observers may view the grade column if course access is allowed for observers and the associated observee is a student that satisfies all conditions required by a student user to view grade columns.\n\nStudent or observer users may view a limited subset of grade column fields:\n\n- id\n- name\n- description\n- externalGrade\n- contentId\n- score.possible\n- grading.type\n- grading.due\n- grading.attemptsAllowed\n- grading.scoringModel\n- availability.available\n\n**Since**: 3000.3.0\n\n**Deprecated**: since 3200.10.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradeColumn"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "deprecated - course grades"
        ],
        "summary": "Delete Grade Column",
        "description": "Delete a specific grade column. The entitlement \"course.gradebook.MODIFY\" is needed.\n\n**Since**: 3000.7.0\n\n**Deprecated**: since 3200.10.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "name": "onlyIfEmpty",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Insufficient Permission to delete the requested resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Requested resource could not be found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict in deleting this grade column due to associated grades",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": [
          "deprecated - course grades"
        ],
        "summary": "Update Grade Column",
        "description": "Update a manual grade column. The entitlement \"course.gradebook.MODIFY\" is needed.\n\n**Since**: 3000.7.0\n\n**Deprecated**: since 3200.10.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "The externalId for this grade column"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the grade column."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the grade column."
                },
                "externalGrade": {
                  "type": "boolean",
                  "description": "Whether this grade column is an external grade column."
                },
                "score": {
                  "type": "object",
                  "description": "Settings controlling the numerical scoring of this grade column.",
                  "title": "Score",
                  "properties": {
                    "possible": {
                      "type": "number",
                      "description": "The points possible for this grade column."
                    },
                    "decimalPlaces": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Decimal place precision used to display scores for this grade column.\n\n**Deprecated**: since 3200.10.0; no alternative exists since this field never fully functioned as described."
                    }
                  }
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling the availability/visibility of grade column data.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether this grade column is available to students\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may view the grade column. |\n| No | Students may not view the grade column. |\n",
                      "enum": [
                        "Yes",
                        "No"
                      ]
                    }
                  }
                },
                "grading": {
                  "type": "object",
                  "description": "Settings controlling whether numerical and text grade values for this grade column are calculated, determined based on attempts, or manually entered.",
                  "title": "Grading",
                  "properties": {
                    "due": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which attempts are due for the grade column."
                    },
                    "attemptsAllowed": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Number of attempts allowed for the grade column."
                    },
                    "scoringModel": {
                      "type": "string",
                      "description": "The scoring model for the submitted grade column attempts.\n\n\n| Type      | Description\n | --------- | --------- |\n| Last |  |\n| Highest |  |\n| Lowest |  |\n| First |  |\n| Average |  |\n",
                      "enum": [
                        "Last",
                        "Highest",
                        "Lowest",
                        "First",
                        "Average"
                      ]
                    },
                    "anonymousGrading": {
                      "type": "object",
                      "description": "Settings for anonymous grading",
                      "title": "AnonymousGrading",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of AnonymousGrading settings for this Attempts based Grade Column.\n\n\n| Type      | Description\n | --------- | --------- |\n| None | Indicates anonymous grading is not enabled. |\n| AfterAllGraded | Indicates anonymized grades are released after all attempts have been graded. |\n| Date | Indicates anonymized grades are released after a specified release date. |\n",
                          "enum": [
                            "None",
                            "AfterAllGraded",
                            "Date"
                          ]
                        },
                        "releaseAfter": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Date after which grades are released from being anonymized, if AnonymousGrading type is 'Date'."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradeColumn"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/columns/{columnId}/attempts": {
      "get": {
        "tags": [
          "deprecated - course grades"
        ],
        "summary": "Get Column Attempts",
        "description": "Returns a list of attempts associated with the specified grade column.\n\nThe 'course.gradebook.MODIFY' entitlement is needed to view column attempts. Alternatively, if the 'userId' query parameter is specified, and the user making the request matches the specified 'userId', then the user may view his/her own attempt.  When querying an anonymous grade column, if the release criteria has not yet been met, then the 'userId' attribute will not be populated for the returned column attempts.  If the release criteria has not been met and the 'userId' query parameter is specified, a 403 response is returned, unless the requesting user matches the specified 'userId' value.\n\nA subset of attempt properties are available to a student when requesting his or her own attempts:\n\n- id\n- userId\n- groupAttemptId\n- status\n- text\n- score\n- groupOverride\n- feedback\n- studentComments\n- studentSubmission\n- exempt\n- created\nWhen this endpoint is called by the API Gateway User, the response will only contain attributes visible to a Grader. If an Attempt is InProgress, then a Student's submission & comments would not be visible to the API Gateway User. If an Attempt is NeedsGrading, then a Student's submission & comments are visible to the API Gateway User.\n\nIf the caller has the course.assessment.EXECUTE entitlement, and the attempt is associated with an assessment where the flag to require secure taking is enabled, and the attempt status is InProgress, then the studentSubmission is omitted unless the call comes from a secure browser.\n\nIf the caller has the course.assessment.EXECUTE entitlement, and the attempt is associated with an assessment where the flag to require secure reviewing is enabled, and the attempt status is not InProgress, then the studentSubmission is omitted unless the call comes from a secure browser.\n\n**Since**: 3100.4.0\n\n**Deprecated**: since 3300.0.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Search for grade column attempts submitted by this user. This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:jsmith                     |\n | userName   | userName:jsmith                       |\n | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 |\n \n\n**Since**: 3100.4.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "attemptStatuses",
            "in": "query",
            "description": "Search for grade column attempts with one of these statuses.\n\n**Since**: 3100.4.0\n\n\n| Type      | Description\n | --------- | --------- |\n| NotAttempted | none of the students in a group has submitted an attempt; applies only to group assessments |\n| Abandoned |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| InProgress | attempt activity has commenced, but has not been submitted for grading |\n| Suspended |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| Canceled |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| NeedsGrading | attempt has been submitted for grading, but has not been fully graded |\n| Completed | a grade has been entered for the attempt |\n| InProgressAgain | attempt has been graded, but more student activity occurred after the grade was entered; applies only to collaborative tools such as discussions |\n| NeedsGradingAgain | additional student activity occurring after a grade was entered requires that the attempt be regraded; applies only to collaborative tools such as discussions |\n",
            "required": false,
            "type": "string",
            "enum": [
              "NotAttempted",
              "Abandoned",
              "InProgress",
              "Suspended",
              "Canceled",
              "NeedsGrading",
              "Completed",
              "InProgressAgain",
              "NeedsGradingAgain"
            ]
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for attempts with created date relative to this value. 'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3800.0.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter. Defaults to greaterOrEqual if not specified.\n\n**Since**: 3800.0.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search for attempts with modified date relative to this value. 'modifiedCompare' may also be sent to control search behavior.\n\n**Since**: 3800.0.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Used alongside the 'modified' search parameter. Defaults to greaterOrEqual if not specified.\n\n**Since**: 3800.0.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "attemptDate",
            "in": "query",
            "description": "Search for attempts with attempt date relative to this value. 'attemptDateCompare' may also be sent to control search behavior.\n\n**Since**: 3800.0.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "attemptDateCompare",
            "in": "query",
            "description": "Used alongside the 'attemptDate' search parameter. Defaults to greaterOrEqual if not specified.\n\n**Since**: 3800.0.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Attempt"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/columns/{columnId}/attempts/{attemptId}": {
      "get": {
        "tags": [
          "deprecated - course grades"
        ],
        "summary": "Get Column Attempt",
        "description": "Loads the grade column attempt for the specified id.\n\nThe 'course.gradebook.MODIFY' entitlement is needed to view an attempt. Alternatively, if the user making the request is also the user associated with the attempt grade, then the user may view his/her own attempt.  When accessing an anonymous grade column attempt, if the release criteria has not yet been met, then the 'userId' attribute will not be populated for the returned attempt.\n\nA subset of attempt properties are available to a student when requesting his or her own attempt:\n\n- id\n- userId\n- groupAttemptId\n- status\n- text\n- score\n- groupOverride\n- feedback\n- studentComments\n- studentSubmission\n- exempt\n- created\nWhen this endpoint is called by the API Gateway User, the response will only contain attributes visible to a Grader. If an Attempt is InProgress, then a Student's submission & comments would not be visible to the API Gateway User. If an Attempt is NeedsGrading, then a Student's submission & comments are visible to the API Gateway User. </p> If the caller has the course.assessment.EXECUTE entitlement, and the attempt is associated with an assessment where the flag to require secure taking is enabled, and the attempt status is InProgress, then the studentSubmission is omitted unless the call comes from a secure browser.\n\nIf the caller has the course.assessment.EXECUTE entitlement, and the attempt is associated with an assessment where the flag to require secure reviewing is enabled, and the attempt status is not InProgress, then the studentSubmission is omitted unless the call comes from a secure browser.\n\n**Since**: 3100.4.0\n\n**Deprecated**: since 3300.0.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "name": "attemptId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Attempt"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/columns/{columnId}/users": {
      "get": {
        "tags": [
          "deprecated - course grades"
        ],
        "summary": "Get Column Grades",
        "description": "Returns a list of grades associated with the specified grade column.  This operation does not include 'ReadyToPost' grades when returning grade details for calculated grade columns.\n\nUsers with entitlement 'course.gradebook.MODIFY' can retrieve grades for any or all enrolled users. Requests for grades in a columns whose attempts are not visible to instructors will return with a status of \"403 - Forbidden.\"\n\nEnrolled users without the 'course.gradebook.MODIFY' entitlement may only view their own grade; such users cannot retrieve grades of other users.  A request for the grade in a columns that has been hidden from students in the gradebook will return with a status \"403 - Forbidden.\".  A subset of grade properties are available to a student when requesting his or her own grades:\n\n- userId\n- columnId\n- status\n- text\n- score\n- exempt\n- feedback\n\n**Since**: 3000.3.0\n\n**Deprecated**: since 3300.0.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Grade"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Access Denied",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Grade detail values have not yet been populated",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/columns/{columnId}/users/{userId}": {
      "get": {
        "tags": [
          "deprecated - course grades"
        ],
        "summary": "Get Column Grade",
        "description": "Loads the grade column grade for a specific user.  If grade details have yet to be entered for the specified user, then no grade details will be included in the returned grade object.  This operation does not include 'ReadyToPost' grades when returning grade details for calculated grade columns.\n\nUsers with entitlement 'course.gradebook.MODIFY' can retrieve grades for any or all enrolled users. Requests for grades in a columns whose attempts are not visible to instructors will return with a status of \"403 - Forbidden.\"\n\nEnrolled users without the 'course.gradebook.MODIFY' entitlement may only view their own grade; such users cannot retrieve grades of other users.  A request for the grade in a columns that has been hidden from students in the gradebook will return with a status \"403 - Forbidden.\".  A subset of grade properties are available to a student when requesting his or her own grades:\n\n- userId\n- columnId\n- status\n- text\n- score\n- exempt\n- feedback\n\n**Since**: 3000.3.0\n\n**Deprecated**: since 3300.0.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Grade"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Grade detail values have not yet been populated",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": [
          "deprecated - course grades"
        ],
        "summary": "Update Column Grade",
        "description": "Update the grade column grade for a specific user, including the text grade, score, instructor notes and feedback, and exempt status.  When updating text grade or score, the resulting grade is always marked as 'Posted'.  This end-point, currently, does not support marking the grade as 'ReadyToPost'.  Grade overrides may be cleared by either specifying the 'score' attribute as null, or the 'text'; attribute as null, '', or '-' in the body of the request. The entitlement 'course.gradebook.MODIFY' is required to perform this operation.\n\n**Since**: 3000.5.0\n\n**Deprecated**: since 3300.0.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GradeColumnIdParam.columnId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "The text representation of this grade."
                },
                "score": {
                  "type": "number",
                  "description": "The score associated with this grade."
                },
                "notes": {
                  "type": "string",
                  "description": "The instructor notes associated with this grade. This notes field is used for grades on manual grade columns.   That is, when column.grading.type = Manual.  It is also used when column.grading.type = Attempts and the grade has been manually overridden."
                },
                "feedback": {
                  "type": "string",
                  "description": "The instructor feedback associated with this grade.  This feedback is used for grades on manual grade columns.   That is, when column.grading.type = Manual.  It is also used when column.grading.type = Attempts and the grade has been manually overridden."
                },
                "exempt": {
                  "type": "boolean",
                  "description": "Whether the score associated with this grade is ignored when computing the course grade."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Grade"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Grade detail values have not yet been populated",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/users/{userId}": {
      "get": {
        "tags": [
          "deprecated - course grades"
        ],
        "summary": "Get User Grades",
        "description": "Loads the course grades for a specific user.\n\nUsers with entitlement \"course.gradebook.MODIFY\" have read access to all the properties of the collection results.\n\nUsers without entitlement \"course.gradebook.MODIFY\" requesting grades for themselves (i.e., userId = current user id) have read access to a restricted subset of properties of the collections result. These are the properties available to a student when requesting his or her own grades:\n\n- userId\n- columnId\n- status\n- text\n- score\n- exempt\n- feedback\n\n**Since**: 3000.3.0\n\n**Deprecated**: since 3300.0.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Grade"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    },
    "/learn/api/public/v1/courses/{courseId}/groups/{groupId}/users": {
      "get": {
        "tags": [
          "deprecated - course group users"
        ],
        "summary": "Get Group Memberships",
        "description": "Returns a list of group memberships objects for the specified group.\n\nCallers not enrolled in the group must have at least one of the following entitlements:\n\n- course.group.VIEW\n\n**Since**: 3100.6.0\n\n**Deprecated**: since 3600.0.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GroupMembership"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    },
    "/learn/api/public/v1/courses/{courseId}/groups/{groupId}/users/{userId}": {
      "get": {
        "tags": [
          "deprecated - course group users"
        ],
        "summary": "Get Group Membership",
        "description": "Loads a group membership in the specified group.\n\nCallers not enrolled in the group must have at least one of the following entitlements:\n\n- course.group.VIEW\n\n**Since**: 3100.6.0\n\n**Deprecated**: since 3600.0.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupMembership"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "deprecated - course group users"
        ],
        "summary": "Create Group Membership",
        "description": "Creates a group membership in the specified group.\n\nMinimal entitlements required:\n\n- course.group.MODIFY\n\n**Since**: 3100.6.0\n\n**Deprecated**: since 3600.0.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GroupMembership"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "deprecated - course group users"
        ],
        "summary": "Delete Group Membership",
        "description": "Deletes a group from the specified course.\n\nRequired entitlements:\n\n- course.group.MODIFY\n\n**Since**: 3100.6.0\n\n**Deprecated**: since 3600.0.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/UserIdParam.userId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    },
    "/learn/api/public/v1/courses/{courseId}/groups": {
      "get": {
        "tags": [
          "deprecated - course groups"
        ],
        "summary": "Get Groups",
        "description": "Callers with the following entitlement can view all groups in the course:\n\n- course.groups.VIEW\nCallers enrolled in course can view all groups they're enrolled in, and all self-enrollment groups\n\n**Since**: 3100.5.0\n\n**Deprecated**: since 3800.6.0; use the v2 end-point instead.",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name(desc)\" Supported fields are:\n\n- name\n- externalId\n\n**Since**: 3100.4.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Group"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "deprecated - course groups"
        ],
        "summary": "Create Group",
        "description": "Creates a group in the specified course.\n\nMinimal entitlements required:\n\n- course.group.CREATE\n\n**Since**: 3100.5.0\n\n**Deprecated**: since 3800.6.0; use the v2 end-point instead.",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An externally-defined unique ID for the group. Defaults to a random UUID if not provided during create."
                },
                "parentId": {
                  "type": "string",
                  "description": "The primary ID of the group's parent group set."
                },
                "name": {
                  "type": "string",
                  "description": "The title of the group."
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The description of the group. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "isGroupSet": {
                  "type": "boolean",
                  "description": "Whether or not this is a group set.\n\n**Since**: 3700.1.0"
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the group to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the Group is currently available to students.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the group. |\n| No | Students may not access the group. |\n| SignupOnly | Students may only signup and see the group listed, not yet access it. |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "SignupOnly"
                      ]
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling enrollment of the group to students.",
                  "title": "Enrollment",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Whether the Group allows self enrollment or only enrolled by instructor. This can only be set on creation.\n\n\n| Type      | Description\n | --------- | --------- |\n| InstructorOnly | Students are added to the Group by the instructor |\n| SelfEnrollment | Students are added to the Group by self enrollment |\n",
                      "enum": [
                        "InstructorOnly",
                        "SelfEnrollment"
                      ]
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum allowed enrollment size for self enrolled groups."
                    },
                    "signupSheet": {
                      "type": "object",
                      "description": "Settings controlling signup to the group for students. Only applicable if Enrollment.Type allows self enrollment.",
                      "title": "SignupSheet",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the signup sheet"
                        },
                        "description": {
                          "type": "string",
                          "format": "BbML",
                          "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                          "description": "The description of the signup sheet This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                        },
                        "showMembers": {
                          "type": "boolean",
                          "description": "A boolean indicating whether or not members can be seen by others prior to signing up."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    },
    "/learn/api/public/v1/courses/{courseId}/groups/{groupId}": {
      "get": {
        "tags": [
          "deprecated - course groups"
        ],
        "summary": "Get Group",
        "description": "Loads a group in the specified course.\n\nEntitlement and field visibility rules are the same as those when loading the groups collection.\n\n**Since**: 3100.5.0\n\n**Deprecated**: since 3800.6.0; use the v2 end-point instead.",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "deprecated - course groups"
        ],
        "summary": "Delete Group",
        "description": "Deletes a group from the specified course.\n\nRequired entitlements:\n\n- course.group.DELETE\n\n**Since**: 3100.5.0\n\n**Deprecated**: since 3800.6.0; use the v2 end-point instead.",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": [
          "deprecated - course groups"
        ],
        "summary": "Update Group",
        "description": "Updates a group in the specified course.\n\nMinimal entitlements required:\n\n- course.group.MODIFY\n\n**Since**: 3100.5.0\n\n**Deprecated**: since 3800.6.0; use the v2 end-point instead.",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/GroupIdParam.groupId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An externally-defined unique ID for the group. Defaults to a random UUID if not provided during create."
                },
                "parentId": {
                  "type": "string",
                  "description": "The primary ID of the group's parent group set."
                },
                "name": {
                  "type": "string",
                  "description": "The title of the group."
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The description of the group. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the group to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the Group is currently available to students.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the group. |\n| No | Students may not access the group. |\n| SignupOnly | Students may only signup and see the group listed, not yet access it. |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "SignupOnly"
                      ]
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling enrollment of the group to students.",
                  "title": "Enrollment",
                  "properties": {
                    "limit": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum allowed enrollment size for self enrolled groups."
                    },
                    "signupSheet": {
                      "type": "object",
                      "description": "Settings controlling signup to the group for students. Only applicable if Enrollment.Type allows self enrollment.",
                      "title": "SignupSheet",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the signup sheet"
                        },
                        "description": {
                          "type": "string",
                          "format": "BbML",
                          "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                          "description": "The description of the signup sheet This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                        },
                        "showMembers": {
                          "type": "boolean",
                          "description": "A boolean indicating whether or not members can be seen by others prior to signing up."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    },
    "/learn/api/public/v1/courses": {
      "get": {
        "tags": [
          "deprecated - courses"
        ],
        "summary": "Get Courses",
        "description": "Returns a list of courses and organizations.\n\nTo view disabled courses a user must have the entitlement 'system.course.VIEW'.\n\nUsers with the 'course.configure-properties.EXECUTE' entitlement can access all course properties.\n\nUsers enrolled in the course have read access to all properties except:\n\n- uuid\n- externalId\n- dataSourceId\n- created\n- allowGuests\n- enrollment.accessCode\n\nUsers who are not enrolled in the course and do not have associated entitlements only have read access to the following properties:\n\n- id\n- courseId\n- name\n- description\n- organization\n- readOnly\n- termId\n- availability.available\n- availability.duration.type\n- availability.duration.start\n- availability.duration.end\n- availability.duration.daysOfUse\nIf the course enrollment is self-enroll, all users can view the course as though they were enrolled.\n\n**Since**: 3000.1.0\n\n**Deprecated**: since 3400.8.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "courseId",
            "in": "query",
            "description": "Search for courses with courseId properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search for courses with name properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Search for courses with description properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Search for courses with externalId properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for courses with a created date relative to this value.  'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "allowGuests",
            "in": "query",
            "description": "Search for courses which are configured to allow/disallow guest access, based on input.  Default: n/a (return courses regardless of guests allowed)\n\n**Since**: 3200.3.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.  Defaults to greaterOrEqual if not specified.\n\n**Since**: 3100.0.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "availability.available",
            "in": "query",
            "description": "Search for courses with availability.available properties that contain this value.\n\n**Since**: 3000.13.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the course. |\n| No | Students may not access the course. |\n| Disabled | Disabled by the SIS. Students may not access the course.  **Since**: 3100.0.0 |\n| Term | Availability is inherited from the term settings. Requires a termId be set. |\n",
            "required": false,
            "type": "string",
            "enum": [
              "Yes",
              "No",
              "Disabled",
              "Term"
            ]
          },
          {
            "name": "dataSourceId",
            "in": "query",
            "description": "Search for courses with this dataSourceId.  This may optionally be the data source's externalId using the syntax \"externalId:math101\".\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "termId",
            "in": "query",
            "description": "Search for courses with this termId.  This may optionally be the term's externalId using the syntax \"externalId:spring2015\".\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization",
            "in": "query",
            "description": "Search for courses by organization flag.  A value of 'true' indicates that search results should be limited to only Organizations.  A value of 'false' indicates results should be limited to Courses.  Not setting this field indicates that both Courses and Organizations should be returned.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name(desc),created\" Supported fields are:\n\n- courseId\n- name\n- externalId\n- created\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Course"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "deprecated - courses"
        ],
        "summary": "Create Course",
        "description": "Creates a course or organization.\n\nThe 'system.course.CREATE' entitlement is needed to create a course, while 'system.org.CREATE' is needed for an organization.\n\n**Since**: 2015.11.0\n\n**Deprecated**: since 3400.8.0; use the v2 end-point instead",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "courseId",
                "name"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An optional externally-defined unique ID for the course. Defaults to the courseId.\n\nFormerly known as 'batchUid'.",
                  "maxLength": 256
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this course. This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "courseId": {
                  "type": "string",
                  "description": "The Course ID attribute, shown to users in the UI.",
                  "maxLength": 100
                },
                "name": {
                  "type": "string",
                  "description": "The name of the course.",
                  "maxLength": 333
                },
                "description": {
                  "type": "string",
                  "description": "The description of the course."
                },
                "organization": {
                  "type": "boolean",
                  "description": "Whether this object represents an Organization. Defaults to false."
                },
                "ultraStatus": {
                  "type": "string",
                  "description": "Whether the course is rendered using Classic or Ultra Course View.\n\n\n| Type      | Description\n | --------- | --------- |\n| Undecided | The ultra status is not decided. |\n| Classic | The course is decided as classic. |\n| Ultra | The course is decided as ultra |\n| UltraPreview | The course is currently in Ultra mode but during the preview state where it may still be reverted via a Restore to the classic state |\n",
                  "enum": [
                    "Undecided",
                    "Classic",
                    "Ultra",
                    "UltraPreview"
                  ]
                },
                "allowGuests": {
                  "type": "boolean",
                  "description": "Whether guests (users with the role guest) are allowed access to the course. Modifiable only for Classic course. Defaults to true for Classic Courses and false for Ultra Courses."
                },
                "readOnly": {
                  "type": "boolean",
                  "description": "This status does not affect availability of the course for viewing in any way. readOnly is valid for both Ultra and Classic courses. If an Ultra course is in readOnly mode, updates are not possible. For a Classic course in readOnly mode, updates are still possible (through Web UI but not through REST i.e. closed is enforced for original courses when updated through REST the same way Ultra courses are blocked) but new notifications are not generated.\n\n**Deprecated**: since 3400.8.0; use the v2 endpoint's closedComplete property instead"
                },
                "termId": {
                  "type": "string",
                  "description": "The ID of the term associated to this course. This may optionally be the term's externalId using the syntax \"externalId:spring.2016\"."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the course to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the course is currently available to students. Instructors can always access the course if they have 'Access unavailable course' entitlement. If set to 'Term', the course's parent term availability settings will be used.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the course. |\n| No | Students may not access the course. |\n| Disabled | Disabled by the SIS. Students may not access the course.  **Since**: 3100.0.0 |\n| Term | Availability is inherited from the term settings. Requires a termId be set. |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "Disabled",
                        "Term"
                      ]
                    },
                    "duration": {
                      "type": "object",
                      "description": "Settings controlling the length of time the course is available.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The intended length of the course.\n\n\n| Type      | Description\n | --------- | --------- |\n| Continuous | Course is active on an ongoing basis. |\n| DateRange | Course is only intended to be available between specific date ranges |\n| FixedNumDays | Course is only available for a set number of days |\n| Term | Course availablity is dictated by its associated term |\n",
                          "enum": [
                            "Continuous",
                            "DateRange",
                            "FixedNumDays",
                            "Term"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course starts. May only be set if availability.duration.type is DateRange."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course ends. May only be set if availability.duration.type is DateRange."
                        },
                        "daysOfUse": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of days this course can be used. May only be set if availability.duration.type is FixedNumDays."
                        }
                      }
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling how students may enroll in the course.",
                  "title": "Enrollment",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Specifies the enrollment options for the course. Defaults to InstructorLed.\n\n\n| Type      | Description\n | --------- | --------- |\n| InstructorLed | Enrollment tasks for the course can only performed by the instructor |\n| SelfEnrollment | Instructors have the ability to enroll users, and students can also enroll themselves in the course |\n| EmailEnrollment | Instructors have the ability to enroll users, and students can email requests to the instructor for enrollment |\n",
                      "enum": [
                        "InstructorLed",
                        "SelfEnrollment",
                        "EmailEnrollment"
                      ]
                    },
                    "start": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollments are allowed for the course. May only be set if enrollment.type is SelfEnrollment."
                    },
                    "end": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollment in this course ends. May only be set if enrollment.type is SelfEnrollment."
                    },
                    "accessCode": {
                      "type": "string",
                      "description": "The enrollment access code associated with this course. May only be set if enrollment.type is SelfEnrollment."
                    }
                  }
                },
                "locale": {
                  "type": "object",
                  "description": "Settings controlling localization within the course.",
                  "title": "Locale",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The locale of this course."
                    },
                    "force": {
                      "type": "boolean",
                      "description": "Whether students are forced to use the course's specified locale."
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Course"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to create courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "A course with the same courseId or externalId already exists",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    },
    "/learn/api/public/v1/courses/{courseId}": {
      "get": {
        "tags": [
          "deprecated - courses"
        ],
        "summary": "Get Course",
        "description": "Loads a specific course or organization.\n\nTo view disabled courses a user must have the entitlement 'system.course.VIEW'.\n\nUsers with the 'course.configure-properties.EXECUTE' entitlement can access all course properties.\n\nUsers enrolled in the course have read access to all properties except:\n\n- uuid\n- externalId\n- dataSourceId\n- created\n- allowGuests\n- enrollment.accessCode\n\nUsers who are not enrolled in the course and do not have associated entitlements only have read access to the following properties:\n\n- id\n- courseId\n- name\n- description\n- organization\n- readOnly\n- termId\n- availability.available\n- availability.duration.type\n- availability.duration.start\n- availability.duration.end\n- availability.duration.daysOfUse\nIf the course enrollment is self-enroll, all users can view the course as though they were enrolled.\n\n**Since**: 2015.11.0\n\n**Deprecated**: since 3400.8.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Course"
            }
          },
          "400": {
            "description": "Failed to retrieve course; or The request did not specify a valid courseId",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The course is not found or is unavailable and the user does not have the permission to view unavailable courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "deprecated - courses"
        ],
        "summary": "Delete Course",
        "description": "Deletes a course or organization in synchronous fashion.\n\nThe 'system.course.DELETE' entitlement is needed to delete a course, while 'system.org.DELETE' is needed for an organization.\n\n**Since**: 2015.11.0\n\n**Deprecated**: since 3400.8.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "removeFiles",
            "in": "query",
            "description": "Whether to delete course files.  Defaults to true.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid courseId provided",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The user is not authorized to delete the specified Course object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": [
          "deprecated - courses"
        ],
        "summary": "Update Course",
        "description": "Updates a course or organization.\n\nTo update a course, the user must have either 'system.course|org.properties.MODIFY' or 'course.configure-properties.EXECUTE' entitlements.  However, if the user has the latter entitlement, then additional entitlements are needed to be able to update certain fields, as shown below: \n\n | Field                           | Entitlements Required                                                  |\n |---------------------------------|------------------------------------------------------------------------|\n | name                            | course.name.MODIFY                                                     |\n | description                     | course.name.MODIFY                                                     |\n | allowGuests                     | course.configure-guest-access.EXECUTE                                  |\n | enrollment.type                 | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | enrollment.start                | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | enrollment.end                  | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | enrollment.accessCode           | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | availability.available          | course.configure-properties.EXECUTE, course.availability.MODIFY        |\n | locale.id                       | course.configure-properties.EXECUTE, course.locale.MODIFY              |\n | locale.force                    | course.configure-properties.EXECUTE, course.locale.MODIFY              |\n | availability.duration.type      | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n | availability.duration.start     | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n | availability.duration.end       | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n | availability.duration.daysOfUse | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n \n\n**Since**: 2015.11.0\n\n**Deprecated**: since 3400.8.0; use the v2 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An optional externally-defined unique ID for the course. Defaults to the courseId.\n\nFormerly known as 'batchUid'.",
                  "maxLength": 256
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this course. This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the course.",
                  "maxLength": 333
                },
                "description": {
                  "type": "string",
                  "description": "The description of the course."
                },
                "allowGuests": {
                  "type": "boolean",
                  "description": "Whether guests (users with the role guest) are allowed access to the course. Modifiable only for Classic course. Defaults to true for Classic Courses and false for Ultra Courses."
                },
                "readOnly": {
                  "type": "boolean",
                  "description": "This status does not affect availability of the course for viewing in any way. readOnly is valid for both Ultra and Classic courses. If an Ultra course is in readOnly mode, updates are not possible. For a Classic course in readOnly mode, updates are still possible (through Web UI but not through REST i.e. closed is enforced for original courses when updated through REST the same way Ultra courses are blocked) but new notifications are not generated.\n\n**Deprecated**: since 3400.8.0; use the v2 endpoint's closedComplete property instead"
                },
                "termId": {
                  "type": "string",
                  "description": "The ID of the term associated to this course. This may optionally be the term's externalId using the syntax \"externalId:spring.2016\"."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the course to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the course is currently available to students. Instructors can always access the course if they have 'Access unavailable course' entitlement. If set to 'Term', the course's parent term availability settings will be used.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the course. |\n| No | Students may not access the course. |\n| Disabled | Disabled by the SIS. Students may not access the course.  **Since**: 3100.0.0 |\n| Term | Availability is inherited from the term settings. Requires a termId be set. |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "Disabled",
                        "Term"
                      ]
                    },
                    "duration": {
                      "type": "object",
                      "description": "Settings controlling the length of time the course is available.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The intended length of the course.\n\n\n| Type      | Description\n | --------- | --------- |\n| Continuous | Course is active on an ongoing basis. |\n| DateRange | Course is only intended to be available between specific date ranges |\n| FixedNumDays | Course is only available for a set number of days |\n| Term | Course availablity is dictated by its associated term |\n",
                          "enum": [
                            "Continuous",
                            "DateRange",
                            "FixedNumDays",
                            "Term"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course starts. May only be set if availability.duration.type is DateRange."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course ends. May only be set if availability.duration.type is DateRange."
                        },
                        "daysOfUse": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of days this course can be used. May only be set if availability.duration.type is FixedNumDays."
                        }
                      }
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling how students may enroll in the course.",
                  "title": "Enrollment",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Specifies the enrollment options for the course. Defaults to InstructorLed.\n\n\n| Type      | Description\n | --------- | --------- |\n| InstructorLed | Enrollment tasks for the course can only performed by the instructor |\n| SelfEnrollment | Instructors have the ability to enroll users, and students can also enroll themselves in the course |\n| EmailEnrollment | Instructors have the ability to enroll users, and students can email requests to the instructor for enrollment |\n",
                      "enum": [
                        "InstructorLed",
                        "SelfEnrollment",
                        "EmailEnrollment"
                      ]
                    },
                    "start": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollments are allowed for the course. May only be set if enrollment.type is SelfEnrollment."
                    },
                    "end": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollment in this course ends. May only be set if enrollment.type is SelfEnrollment."
                    },
                    "accessCode": {
                      "type": "string",
                      "description": "The enrollment access code associated with this course. May only be set if enrollment.type is SelfEnrollment."
                    }
                  }
                },
                "locale": {
                  "type": "object",
                  "description": "Settings controlling localization within the course.",
                  "title": "Locale",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The locale of this course."
                    },
                    "force": {
                      "type": "boolean",
                      "description": "Whether students are forced to use the course's specified locale."
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Course"
            }
          },
          "400": {
            "description": "The request did not specify a valid course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to modify courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The course was not found or is unavailable and the user does not have the permission to view unavailable courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "A course with the same courseId or externalId already exists",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    },
    "/learn/api/public/v1/courses/{courseId}/copy": {
      "post": {
        "tags": [
          "deprecated - courses"
        ],
        "summary": "Copy Course",
        "description": "Creates an exact copy of an existing Course into a new Course.\n\nUsers with entitlements 'system.course.copy.EXECUTE' can create a course copy. Users with entitlements 'system.org.copy.EXECUTE' can create an organization copy. All users's must also have 'course.content.copy.EXECUTE' entitlement associated with the specified source courseId.\n\n**Since**: 3300.0.0\n\n**Deprecated**: since 3800.0.0; use the v2 end-point instead.",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "reqCourseObjToConvert",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "courseId"
              ],
              "properties": {
                "courseId": {
                  "type": "string",
                  "description": "The Course ID to copy into."
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "type": "string",
                "description": "A URI to query the status of the corresponding copy operation"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    },
    "/learn/api/public/v2/courses": {
      "get": {
        "tags": [
          "deprecated - courses"
        ],
        "summary": "Get Courses",
        "description": "Returns a list of courses and organizations.\n\nTo view disabled courses a user must have the entitlement 'system.course.VIEW'.\n\nUsers with the 'course.configure-properties.EXECUTE' course entitlement, or the 'system.course.properties.MODIFY' system entitlement can access all course properties.\n\nUsers enrolled in the course have read access to all properties except:\n\n- uuid\n- externalId\n- dataSourceId\n- created\n- allowGuests\n- enrollment.accessCode\n\nUsers who are not enrolled in the course and do not have associated entitlements only have read access to the following properties:\n\n- id\n- courseId\n- name\n- description\n- organization\n- readOnly\n- termId\n- availability.available\n- availability.duration.type\n- availability.duration.start\n- availability.duration.end\n- availability.duration.daysOfUse\nIf the course enrollment is self-enroll, all users can view the course as though they were enrolled.\n\n**Since**: 3400.8.0\n\n**Deprecated**: since 3800.1.0; use the v3 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/RowBasedPagingParams.offset"
          },
          {
            "$ref": "#/parameters/RowBasedPagingParams.limit"
          },
          {
            "name": "modified",
            "in": "query",
            "description": "Search for courses with a modified date relative to this value.  'modifiedCompare' may also be sent to control search behavior.\n\n**Since**: 3500.4.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modifiedCompare",
            "in": "query",
            "description": "Used alongside the 'modified' search parameter. Defaults to greaterOrEqual if not specified.\n\n**Since**: 3500.4.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "courseId",
            "in": "query",
            "description": "Search for courses with courseId properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search for courses with name properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Search for courses with description properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Search for courses with externalId properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for courses with a created date relative to this value.  'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "allowGuests",
            "in": "query",
            "description": "Search for courses which are configured to allow/disallow guest access, based on input.  Default: n/a (return courses regardless of guests allowed)\n\n**Since**: 3200.3.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.  Defaults to greaterOrEqual if not specified.\n\n**Since**: 3100.0.0\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "availability.available",
            "in": "query",
            "description": "Search for courses with availability.available properties that contain this value.\n\n**Since**: 3000.13.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the course. |\n| No | Students may not access the course. |\n| Disabled | Disabled by the SIS. Students may not access the course.  **Since**: 3100.0.0 |\n| Term | Availability is inherited from the term settings. Requires a termId be set. |\n",
            "required": false,
            "type": "string",
            "enum": [
              "Yes",
              "No",
              "Disabled",
              "Term"
            ]
          },
          {
            "name": "dataSourceId",
            "in": "query",
            "description": "Search for courses with this dataSourceId.  This may optionally be the data source's externalId using the syntax \"externalId:math101\".\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "termId",
            "in": "query",
            "description": "Search for courses with this termId.  This may optionally be the term's externalId using the syntax \"externalId:spring2015\".\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization",
            "in": "query",
            "description": "Search for courses by organization flag.  A value of 'true' indicates that search results should be limited to only Organizations.  A value of 'false' indicates results should be limited to Courses.  Not setting this field indicates that both Courses and Organizations should be returned.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name(desc),created\" Supported fields are:\n\n- courseId\n- name\n- externalId\n- created\n- modified\n\n**Since**: 3400.8.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseV2"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "deprecated - courses"
        ],
        "summary": "Create Course",
        "description": "Creates a course or organization.\n\nThe 'system.course.CREATE' entitlement is needed to create a course, while 'system.org.CREATE' is needed for an organization.\n\n**Since**: 3400.8.0\n\n**Deprecated**: since 3800.1.0; use the v3 end-point instead",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "courseId",
                "name"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An optional externally-defined unique ID for the course. Defaults to the courseId.\n\nFormerly known as 'batchUid'.",
                  "maxLength": 256
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this course. This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "courseId": {
                  "type": "string",
                  "description": "The Course ID attribute, shown to users in the UI.",
                  "maxLength": 100
                },
                "name": {
                  "type": "string",
                  "description": "The name of the course.",
                  "maxLength": 333
                },
                "description": {
                  "type": "string",
                  "description": "The description of the course."
                },
                "organization": {
                  "type": "boolean",
                  "description": "Whether this object represents an Organization. Defaults to false."
                },
                "ultraStatus": {
                  "type": "string",
                  "description": "Whether the course is rendered using Classic or Ultra Course View.\n\n\n| Type      | Description\n | --------- | --------- |\n| Undecided | The ultra status is not decided. |\n| Classic | The course is decided as classic. |\n| Ultra | The course is decided as ultra |\n| UltraPreview | The course is currently in Ultra mode but during the preview state where it may still be reverted via a Restore to the classic state |\n",
                  "enum": [
                    "Undecided",
                    "Classic",
                    "Ultra",
                    "UltraPreview"
                  ]
                },
                "allowGuests": {
                  "type": "boolean",
                  "description": "Whether guests (users with the role guest) are allowed access to the course. Modifiable only for Classic course. Defaults to true for Classic Courses and false for Ultra Courses."
                },
                "allowObservers": {
                  "type": "boolean",
                  "description": "Whether observers are allowed access to the course. Modifiable only for Classic course. Defaults to false.\n\n**Since**: 3900.31.0"
                },
                "closedComplete": {
                  "type": "boolean",
                  "description": "This status does not affect availability of the course for viewing in any way. closedComplete is valid for both Ultra and Classic courses. If an Ultra course is in closedComplete mode, updates are not possible. For a Classic course in closedComplete mode, updates are still possible (through Web UI but not through REST i.e. closed is enforced for original courses when updated through REST the same way Ultra courses are blocked) but new notifications are not generated."
                },
                "termId": {
                  "type": "string",
                  "description": "The ID of the term associated to this course. This may optionally be the term's externalId using the syntax \"externalId:spring.2016\"."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the course to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the course is currently available to students. Instructors can always access the course if they have 'Access unavailable course' entitlement. If set to 'Term', the course's parent term availability settings will be used.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the course. |\n| No | Students may not access the course. |\n| Disabled | Disabled by the SIS. Students may not access the course. @since 3100.0.0 |\n| Term | Availability is inherited from the term settings. Requires a termId be set. |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "Disabled",
                        "Term"
                      ]
                    },
                    "duration": {
                      "type": "object",
                      "description": "Settings controlling the length of time the course is available.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The intended length of the course. Possible values are:\n\n- Continuous: The course is active on an ongoing basis. This is the default.\n- DateRange: The course will only be available between specific date ranges.\n- FixedNumDays: The course will only be available for a set number of days.\n- Term: The course's parent term duration settings will be used.\n\n\n| Type      | Description\n | --------- | --------- |\n| Continuous | Course is active on an ongoing basis. |\n| DateRange | Course is only intended to be available between specific date ranges |\n| FixedNumDays | Course is only available for a set number of days |\n| Term | Course availablity is dictated by its associated term |\n",
                          "enum": [
                            "Continuous",
                            "DateRange",
                            "FixedNumDays",
                            "Term"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course starts. May only be set if availability.duration.type is DateRange."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course ends. May only be set if availability.duration.type is DateRange."
                        },
                        "daysOfUse": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of days this course can be used. May only be set if availability.duration.type is FixedNumDays."
                        }
                      }
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling how students may enroll in the course.",
                  "title": "Enrollment",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Specifies the enrollment options for the course. Defaults to InstructorLed.\n\n\n| Type      | Description\n | --------- | --------- |\n| InstructorLed | Enrollment tasks for the course can only performed by the instructor |\n| SelfEnrollment | Instructors have the ability to enroll users, and students can also enroll themselves in the course |\n| EmailEnrollment | Instructors have the ability to enroll users, and students can email requests to the instructor for enrollment |\n",
                      "enum": [
                        "InstructorLed",
                        "SelfEnrollment",
                        "EmailEnrollment"
                      ]
                    },
                    "start": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollments are allowed for the course. May only be set if enrollment.type is SelfEnrollment."
                    },
                    "end": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollment in this course ends. May only be set if enrollment.type is SelfEnrollment."
                    },
                    "accessCode": {
                      "type": "string",
                      "description": "The enrollment access code associated with this course. May only be set if enrollment.type is SelfEnrollment.",
                      "maxLength": 50
                    }
                  }
                },
                "locale": {
                  "type": "object",
                  "description": "Settings controlling localization within the course.",
                  "title": "Locale",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The locale of this course.",
                      "maxLength": 20
                    },
                    "force": {
                      "type": "boolean",
                      "description": "Whether students are forced to use the course's specified locale."
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CourseV2"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to create courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "A course with the same courseId or externalId already exists",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    },
    "/learn/api/public/v2/courses/{courseId}": {
      "get": {
        "tags": [
          "deprecated - courses"
        ],
        "summary": "Get Course",
        "description": "Loads a specific course or organization.\n\nTo view disabled courses a user must have the entitlement 'system.course.VIEW'.\n\nUsers with the 'course.configure-properties.EXECUTE' entitlement can access all course properties.\n\nUsers enrolled in the course have read access to all properties except:\n\n- uuid\n- externalId\n- dataSourceId\n- created\n- allowGuests\n- enrollment.accessCode\n\nUsers with no access to the course only have read access to the following properties:\n\n- id\n- courseId\n- name\n- description\n- organization\n- closedComplete\n- termId\n- availability.available\n- availability.duration.type\n- availability.duration.start\n- availability.duration.end\n- availability.duration.daysOfUse\nIf the course enrollment is self-enroll, all users can view the course as though they were enrolled.\n\n**Since**: 3400.8.0\n\n**Deprecated**: since 3800.1.0; use the v3 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseV2"
            }
          },
          "400": {
            "description": "Failed to create course; or The request did not specify a valid courseId",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The course is not found or is unavailable and the user does not have the permission to view unavailable courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "deprecated - courses"
        ],
        "summary": "Delete Course",
        "description": "Deletes a course or organization in synchronous fashion.\n\nThe 'system.course.DELETE' entitlement is needed to delete a course, while 'system.org.DELETE' is needed for an organization.\n\n**Since**: 3400.8.0\n\n**Deprecated**: since 3800.1.0; use the v3 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "name": "removeFiles",
            "in": "query",
            "description": "Whether to delete course files.  Defaults to true.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid courseId provided",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The user is not authorized to delete the specified Course object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": [
          "deprecated - courses"
        ],
        "summary": "Update Course",
        "description": "Updates a course or organization.\n\nTo update a course, the user must have either 'system.course|org.properties.MODIFY' or 'course.configure-properties.EXECUTE' entitlements.  However, if the user has the latter entitlement, then additional entitlements are needed to be able to update certain fields, as shown below: \n\n | Field                           | Entitlements Required                                                  |\n |---------------------------------|------------------------------------------------------------------------|\n | name                            | course.name.MODIFY                                                     |\n | description                     | course.name.MODIFY                                                     |\n | allowGuests                     | course.configure-guest-access.EXECUTE                                  |\n | enrollment.type                 | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | enrollment.start                | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | enrollment.end                  | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | enrollment.accessCode           | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | availability.available          | course.configure-properties.EXECUTE, course.availability.MODIFY        |\n | locale.id                       | course.configure-properties.EXECUTE, course.locale.MODIFY              |\n | locale.force                    | course.configure-properties.EXECUTE, course.locale.MODIFY              |\n | availability.duration.type      | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n | availability.duration.start     | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n | availability.duration.end       | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n | availability.duration.daysOfUse | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n \n\n**Since**: 3400.8.0\n\n**Deprecated**: since 3800.1.0; use the v3 end-point instead",
        "parameters": [
          {
            "$ref": "#/parameters/CourseIdParam.courseId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An optional externally-defined unique ID for the course. Defaults to the courseId.\n\nFormerly known as 'batchUid'.",
                  "maxLength": 256
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this course. This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the course.",
                  "maxLength": 333
                },
                "description": {
                  "type": "string",
                  "description": "The description of the course."
                },
                "allowGuests": {
                  "type": "boolean",
                  "description": "Whether guests (users with the role guest) are allowed access to the course. Modifiable only for Classic course. Defaults to true for Classic Courses and false for Ultra Courses."
                },
                "allowObservers": {
                  "type": "boolean",
                  "description": "Whether observers are allowed access to the course. Modifiable only for Classic course. Defaults to false.\n\n**Since**: 3900.31.0"
                },
                "closedComplete": {
                  "type": "boolean",
                  "description": "This status does not affect availability of the course for viewing in any way. closedComplete is valid for both Ultra and Classic courses. If an Ultra course is in closedComplete mode, updates are not possible. For a Classic course in closedComplete mode, updates are still possible (through Web UI but not through REST i.e. closed is enforced for original courses when updated through REST the same way Ultra courses are blocked) but new notifications are not generated."
                },
                "termId": {
                  "type": "string",
                  "description": "The ID of the term associated to this course. This may optionally be the term's externalId using the syntax \"externalId:spring.2016\"."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the course to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the course is currently available to students. Instructors can always access the course if they have 'Access unavailable course' entitlement. If set to 'Term', the course's parent term availability settings will be used.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the course. |\n| No | Students may not access the course. |\n| Disabled | Disabled by the SIS. Students may not access the course. @since 3100.0.0 |\n| Term | Availability is inherited from the term settings. Requires a termId be set. |\n",
                      "enum": [
                        "Yes",
                        "No",
                        "Disabled",
                        "Term"
                      ]
                    },
                    "duration": {
                      "type": "object",
                      "description": "Settings controlling the length of time the course is available.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The intended length of the course. Possible values are:\n\n- Continuous: The course is active on an ongoing basis. This is the default.\n- DateRange: The course will only be available between specific date ranges.\n- FixedNumDays: The course will only be available for a set number of days.\n- Term: The course's parent term duration settings will be used.\n\n\n| Type      | Description\n | --------- | --------- |\n| Continuous | Course is active on an ongoing basis. |\n| DateRange | Course is only intended to be available between specific date ranges |\n| FixedNumDays | Course is only available for a set number of days |\n| Term | Course availablity is dictated by its associated term |\n",
                          "enum": [
                            "Continuous",
                            "DateRange",
                            "FixedNumDays",
                            "Term"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course starts. May only be set if availability.duration.type is DateRange."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course ends. May only be set if availability.duration.type is DateRange."
                        },
                        "daysOfUse": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of days this course can be used. May only be set if availability.duration.type is FixedNumDays."
                        }
                      }
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling how students may enroll in the course.",
                  "title": "Enrollment",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Specifies the enrollment options for the course. Defaults to InstructorLed.\n\n\n| Type      | Description\n | --------- | --------- |\n| InstructorLed | Enrollment tasks for the course can only performed by the instructor |\n| SelfEnrollment | Instructors have the ability to enroll users, and students can also enroll themselves in the course |\n| EmailEnrollment | Instructors have the ability to enroll users, and students can email requests to the instructor for enrollment |\n",
                      "enum": [
                        "InstructorLed",
                        "SelfEnrollment",
                        "EmailEnrollment"
                      ]
                    },
                    "start": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollments are allowed for the course. May only be set if enrollment.type is SelfEnrollment."
                    },
                    "end": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollment in this course ends. May only be set if enrollment.type is SelfEnrollment."
                    },
                    "accessCode": {
                      "type": "string",
                      "description": "The enrollment access code associated with this course. May only be set if enrollment.type is SelfEnrollment.",
                      "maxLength": 50
                    }
                  }
                },
                "locale": {
                  "type": "object",
                  "description": "Settings controlling localization within the course.",
                  "title": "Locale",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The locale of this course.",
                      "maxLength": 20
                    },
                    "force": {
                      "type": "boolean",
                      "description": "Whether students are forced to use the course's specified locale."
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseV2"
            }
          },
          "400": {
            "description": "The request did not specify a valid course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to modify courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The course was not found or is unavailable and the user does not have the permission to view unavailable courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "A course with the same courseId or externalId already exists",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        },
        "deprecated": true
      }
    }
  },
  "definitions": {
    "AdaptiveReleaseACLGroupPredicate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Criterion-Group association ID.",
          "readOnly": true
        },
        "criterionId": {
          "type": "string",
          "description": "The Criterion ID.",
          "readOnly": true
        },
        "groupId": {
          "type": "string",
          "description": "The Group ID.",
          "readOnly": true
        }
      }
    },
    "AdaptiveReleaseACLUserPredicate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Criterion-User association ID.",
          "readOnly": true
        },
        "criterionId": {
          "type": "string",
          "description": "The Criterion ID.",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "description": "The User ID.",
          "readOnly": true
        }
      }
    },
    "AdaptiveReleaseRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Rule item identifier that indicates the id of the rule item source which the item was created from. (Ex. '_48_1')",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "Title given to the adaptive release rule",
          "maxLength": 100
        }
      }
    },
    "AdaptiveReleaseRuleCriteria": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Internal Identifier of the Rule's criteria.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The Type of the Criterion.\n\n\n| Type      | Description\n | --------- | --------- |\n| GradeRange |  |\n| GradePercentage |  |\n| DateRange |  |\n| Memberships |  |\n| ContentComplete |  |\n| GradeCompleted |  |\n| ContentReviewed |  |\n",
          "enum": [
            "GradeRange",
            "GradePercentage",
            "DateRange",
            "Memberships",
            "ContentComplete",
            "GradeCompleted",
            "ContentReviewed"
          ]
        }
      }
    },
    "AggregateReviewStatus": {
      "type": "object",
      "properties": {
        "courseId": {
          "type": "string",
          "description": "The ID of the course.\n\n**Since**: 3700.15.0"
        },
        "userId": {
          "type": "string",
          "description": "The ID of the User.\n\n**Since**: 3700.15.0"
        },
        "reviewedCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of content items the user has reviewed.\n\n**Since**: 3700.15.0"
        },
        "reviewableCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of content items that can be reviewed in the given course.\n\n**Since**: 3700.15.0"
        }
      }
    },
    "Announcement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Primary key identifier",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "The title of this System Announcement."
        },
        "body": {
          "type": "string",
          "format": "BbML",
          "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
          "description": "The message body of the System Announcement. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the System Announcement.",
          "title": "Availability",
          "properties": {
            "duration": {
              "type": "object",
              "description": "Duration indicates when the System Announcement is Available based on whether it is Permanent or if the date/time of the request falls within its Start & End dates.",
              "title": "Duration",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Indicates whether this System Announcement is always displayed (Permanent) or if it is shown only between the Start and End dates (Restricted).\n\n\n| Type      | Description\n | --------- | --------- |\n| Permanent | The Announcement will always be displayed. |\n| Restricted | The Announcement will start being displayed on Duration.Start and stop being displayed on Duration.End |\n",
                  "enum": [
                    "Permanent",
                    "Restricted"
                  ]
                },
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this Announcement starts being Available."
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this Announcement stops being Available."
                }
              }
            }
          }
        },
        "showAtLogin": {
          "type": "boolean",
          "description": "Whether this System Announcement should be displayed on the login page."
        },
        "showInCourses": {
          "type": "boolean",
          "description": "Whether this System Announcement should be displayed on courses."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date that the System Announcement was created.",
          "readOnly": true
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "Attempt": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID for this attempt.",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "description": "The user ID associated with this attempt.",
          "readOnly": true
        },
        "groupAttemptId": {
          "type": "string",
          "description": "The group attempt ID associated with this student attempt.",
          "readOnly": true
        },
        "groupOverride": {
          "type": "boolean",
          "description": "Whether the score associated with this student attempt was overridden from the associated group attempt score. A value is only returned if the attempt grade is currently overridden.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "The status of this attempt.\n\n\n| Type      | Description\n | --------- | --------- |\n| NotAttempted | none of the students in a group has submitted an attempt; applies only to group assessments |\n| Abandoned |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| InProgress | attempt activity has commenced, but has not been submitted for grading |\n| Suspended |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| Canceled |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| NeedsGrading | attempt has been submitted for grading, but has not been fully graded |\n| Completed | a grade has been entered for the attempt |\n| InProgressAgain | attempt has been graded, but more student activity occurred after the grade was entered; applies only to collaborative tools such as discussions |\n| NeedsGradingAgain | additional student activity occurring after a grade was entered requires that the attempt be regraded; applies only to collaborative tools such as discussions |\n",
          "enum": [
            "NotAttempted",
            "Abandoned",
            "InProgress",
            "Suspended",
            "Canceled",
            "NeedsGrading",
            "Completed",
            "InProgressAgain",
            "NeedsGradingAgain"
          ]
        },
        "text": {
          "type": "string",
          "description": "The text representation of grade for this attempt."
        },
        "score": {
          "type": "number",
          "description": "The score associated with this attempt."
        },
        "notes": {
          "type": "string",
          "description": "The instructor notes associated with this attempt."
        },
        "feedback": {
          "type": "string",
          "description": "The instructor feedback associated with this attempt."
        },
        "studentComments": {
          "type": "string",
          "description": "The student comments associated with this attempt."
        },
        "studentSubmission": {
          "type": "string",
          "description": "The student submission text associated with this attempt."
        },
        "exempt": {
          "type": "boolean",
          "description": "Whether the score associated with this attempt is ignored when computing the user's grade for the associated grade column."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date on which this attempt was created.",
          "readOnly": true
        }
      }
    },
    "AttemptFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary key of the file attachment.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the file which has been attached to an Attempt including the file extension."
        },
        "viewUrl": {
          "type": "string",
          "description": "If Learn has a registered viewer for the file, this will be a URL for that viewer to render the file. This may not be populated depending on multiple factors including but not limited to Learn configuration, file type, and viewer provider.",
          "readOnly": true
        }
      }
    },
    "AttemptReceipt": {
      "type": "object",
      "properties": {
        "receiptId": {
          "type": "string",
          "description": "The ID of the receipt.",
          "readOnly": true
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date the associated attempt was submitted.",
          "readOnly": true
        },
        "submissionTotalSize": {
          "type": "integer",
          "format": "int64",
          "description": "The total size of the submission in bytes\n\n**Since**: 3900.37.0",
          "readOnly": true
        },
        "courseId": {
          "type": "string",
          "description": "The related course id\n\n**Since**: 3900.37.0",
          "readOnly": true
        },
        "gradableItemId": {
          "type": "string",
          "description": "The related gradable item id\n\n**Since**: 3900.37.0",
          "readOnly": true
        },
        "attemptId": {
          "type": "string",
          "description": "The related attempt id\n\n**Since**: 3900.37.0",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "description": "The related submitter user id\n\n**Since**: 3900.37.0",
          "readOnly": true
        },
        "groupAttemptId": {
          "type": "string",
          "description": "The related group attempt id\n\n**Since**: 3900.37.0",
          "readOnly": true
        },
        "groupId": {
          "type": "string",
          "description": "The related group id\n\n**Since**: 3900.37.0",
          "readOnly": true
        },
        "responseStatus": {
          "type": "string",
          "description": "The associated response status\n\n**Since**: 3900.37.0\n\n\n| Type      | Description\n | --------- | --------- |\n| ReceiptAndAttemptExist | Both the attempt receipt and the related attempt exist and there is access to both. |\n| ReceiptExistsButAttemptDoesNot | The attempt receipt exist but the attempt was deleted and there is access to the attempt receipt through the course context. |\n| ReceiptExistsNoAccessToAttempt | The attempt receipt exists but there is no access to the attempt. |\n| ReceiptExistsColumnSoftDeleted | The attempt receipt exists but the column was deleted. |\n",
          "readOnly": true,
          "enum": [
            "ReceiptAndAttemptExist",
            "ReceiptExistsButAttemptDoesNot",
            "ReceiptExistsNoAccessToAttempt",
            "ReceiptExistsColumnSoftDeleted"
          ]
        }
      }
    },
    "AttemptV2": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID for this attempt.",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "description": "The user ID associated with this attempt.  Defaults to the authenticated user on create.  Can be specified as a user other than the authenticated user if the authenticated user has the \"course.gradebook.MODIFY\" entitlement and the authenticated application has the \"course.attempt.nonowner.SUBMIT\" entitlement.",
          "readOnly": true
        },
        "groupAttemptId": {
          "type": "string",
          "description": "The group attempt ID associated with this student attempt.",
          "readOnly": true
        },
        "groupOverride": {
          "type": "boolean",
          "description": "Whether the score associated with this student attempt was overridden from the associated group attempt score. A value is only returned if the attempt grade is currently overridden.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "The status of this attempt.\n\n\n| Type      | Description\n | --------- | --------- |\n| NotAttempted | none of the students in a group has submitted an attempt; applies only to group assessments |\n| Abandoned |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| InProgress | attempt activity has commenced, but has not been submitted for grading |\n| Suspended |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| Canceled |   **Deprecated**: Since 9.1 SP8 unsupported status, undetermined behavior if used. |\n| NeedsGrading | attempt has been submitted for grading, but has not been fully graded |\n| Completed | a grade has been entered for the attempt |\n| InProgressAgain | attempt has been graded, but more student activity occurred after the grade was entered; applies only to collaborative tools such as discussions |\n| NeedsGradingAgain | additional student activity occurring after a grade was entered requires that the attempt be regraded; applies only to collaborative tools such as discussions |\n",
          "enum": [
            "NotAttempted",
            "Abandoned",
            "InProgress",
            "Suspended",
            "Canceled",
            "NeedsGrading",
            "Completed",
            "InProgressAgain",
            "NeedsGradingAgain"
          ]
        },
        "displayGrade": {
          "description": "The display grade associated with this attempt.",
          "$ref": "#/definitions/DisplayGrade"
        },
        "text": {
          "type": "string",
          "description": "The text grade associated with this attempt."
        },
        "score": {
          "type": "number",
          "description": "The score associated with this attempt."
        },
        "reconciliationMode": {
          "type": "string",
          "description": "The reconciliation mode to use when reconciling the attempt grade.  When modifying reconciliationMode, score is also required.  A new score will not be calculated based on the reconciliationMode\n\n**Since**: 3700.2.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Average |  |\n| Highest |  |\n| Lowest |  |\n| Custom |  |\n",
          "enum": [
            "Average",
            "Highest",
            "Lowest",
            "Custom"
          ]
        },
        "notes": {
          "type": "string",
          "description": "The instructor notes associated with this attempt."
        },
        "feedback": {
          "type": "string",
          "description": "The instructor feedback associated with this attempt."
        },
        "studentComments": {
          "type": "string",
          "description": "The student comments associated with this attempt."
        },
        "studentSubmission": {
          "type": "string",
          "description": "The student submission text associated with this attempt."
        },
        "exempt": {
          "type": "boolean",
          "description": "Whether the score associated with this attempt is ignored when computing the user's grade for the associated grade column."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date on which this attempt was created.",
          "readOnly": true
        },
        "attemptDate": {
          "type": "string",
          "format": "date-time",
          "description": "Return the attempt date associated with this attempt.",
          "readOnly": true
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the attempt was modified.\n\n**Since**: 3800.0.0",
          "readOnly": true
        },
        "attemptReceipt": {
          "description": "The attempt receipt associated with this attempt.\n\n**Since**: 3900.22.0",
          "$ref": "#/definitions/EmbeddedAttemptReceipt"
        }
      }
    },
    "AttendanceDataDownloadUrl": {
      "type": "object",
      "properties": {
        "downloadUrl": {
          "type": "string",
          "description": "The download url of attendance data file."
        }
      }
    },
    "AttendanceRecord": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The primary ID of the attendance record.",
          "readOnly": true
        },
        "meetingId": {
          "type": "string",
          "description": "The primary id of the meeting."
        },
        "userId": {
          "type": "string",
          "description": "The learn external id of the user."
        },
        "status": {
          "type": "string",
          "description": "The attendance status of the user.\n\n\n| Type      | Description\n | --------- | --------- |\n| Absent |  |\n| Late |  |\n| Present |  |\n| Excused |  |\n",
          "enum": [
            "Absent",
            "Late",
            "Present",
            "Excused"
          ]
        }
      }
    },
    "Availability": {
      "type": "object",
      "properties": {
        "available": {
          "type": "string",
          "description": "null\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n| Disabled |   **Since**: 3100.0.0 |\n",
          "enum": [
            "Yes",
            "No",
            "Disabled"
          ]
        }
      }
    },
    "BYDAYEnum": {
      "type": "string",
      "properties": {},
      "enum": [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ]
    },
    "Calendar": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Calendar id. Valid ids are: \"PERSONAL\", \"INSTITUTION\", and course id in the format of \"_3_1\".",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Calendar name.",
          "readOnly": true
        }
      }
    },
    "CalendarItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Calendar item identifier that indicates the id of the calendar item source which the item was created from. (Ex. '_417_1')",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of this Calendar Item.\n\n\n| Type      | Description\n | --------- | --------- |\n| Course |  |\n| GradebookColumn | Read only. |\n| Institution |  |\n| OfficeHours |  |\n| Personal |  |\n",
          "readOnly": true,
          "enum": [
            "Course",
            "GradebookColumn",
            "Institution",
            "OfficeHours",
            "Personal"
          ]
        },
        "calendarId": {
          "type": "string",
          "description": "Calendar source identifier which indicates the calendar on which the calendar item was created. Examples of possible values : \"PERSONAL\", \"INSTITUTION\", and course id in the format of \"_3_1\".",
          "readOnly": true
        },
        "calendarName": {
          "type": "string",
          "description": "Calendar source label/display name.",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "Title of the calendar item. Title length cannot exceed 255 characters."
        },
        "description": {
          "type": "string",
          "description": "Description of the calendar item."
        },
        "location": {
          "type": "string",
          "description": "Location of the calendar item and it cannot exceed 1024 characters."
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "description": "Start date of the calendar item either in the past if the calendar item is for an event that's already started OR in the future if it's for an event to start in the future. This is always set and should occur before the end date."
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "description": "End date of the calendar item either in the past if the calendar item is for an event that's already end OR in the future if it's for an event to end in the future. This is always set and should occur after the start date."
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the calendar item was last modified.",
          "readOnly": true
        },
        "color": {
          "type": "string",
          "description": "Color to use for the calendar item. It's a shared setting for all calendar items with the same calendar source identifier.",
          "readOnly": true
        },
        "disableResizing": {
          "type": "boolean",
          "description": "Whether resizing of the calendar item should NOT be allowed."
        },
        "createdByUserId": {
          "type": "string",
          "description": "Get the user who created this calendar item. This will be null for non-personal events when the creator has been deleted.",
          "readOnly": true
        },
        "dynamicCalendarItemProps": {
          "type": "object",
          "description": "Extra calendar item properties if it is a GradebookColumn calendar item.",
          "title": "DynamicCalendarItemProps",
          "readOnly": true,
          "properties": {
            "attemptable": {
              "type": "boolean",
              "description": "The dynamic calendar item can be attempted (can have attempts made against it) and the current user (in context) has permission/entitlement to grade attempts for the object represented by this calendar item."
            },
            "categoryId": {
              "type": "string",
              "description": "Returns the gradeableItem categoryId value .it is only set if the calendar event is dynamically created based on a single grade book column"
            },
            "dateRangeLimited": {
              "type": "boolean",
              "description": "The dynamic calendar item is only visible during a specific windows of time."
            },
            "eventType": {
              "type": "string",
              "description": "Returns a human readable string describing the type of calendar item represented (e.g. assignment, test, etc.)."
            },
            "gradable": {
              "type": "boolean",
              "description": "The dynamic calendar item can be graded and the current user (in context) has permission/entitlement to grade attempts for the object represented by this calendar item."
            }
          }
        },
        "recurrence": {
          "description": "Recurring definition if the calendar item is a repeatable calendar item. This object must be defined for <code>OfficeHours</code> type calendar items.",
          "$ref": "#/definitions/CalendarItemRecurrence"
        }
      }
    },
    "CalendarItemRecurrence": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Recurrence count indicating how many times the calendar item should be repeated. Either this count OR the 'until' date is/'should be' set. When creating a calendar item, 'until' date will be used if both 'until' date and the count are set."
        },
        "frequency": {
          "type": "string",
          "description": "Frequency of the calendar item repeated.\n\n\n| Type      | Description\n | --------- | --------- |\n| Monthly |  |\n| Weekly |  |\n| Daily |  |\n",
          "enum": [
            "Monthly",
            "Weekly",
            "Daily"
          ]
        },
        "interval": {
          "type": "integer",
          "format": "int32",
          "description": "Interval between recurrences depends on the repeating type. For example, if the calendar times should be repeated every three weeks, you need set interval to 3 as well as frequency to \"Weekly\". Minimum and Maximum allowed Intervals are 1 and 100 respectively."
        },
        "monthRepeatDay": {
          "type": "integer",
          "format": "int32",
          "description": "This property is used in conjunction with the 'Monthly' frequency and it indicates on which day of the month the calendar item is/'should be' repeated on. The valid values are valid month days, that is, 1 to 31. Either this OR both 'monthPosition' and 'repeatDay' should be set to create a recurring calendar item with 'Monthly' frequency."
        },
        "monthPosition": {
          "type": "integer",
          "format": "int32",
          "description": "This property is used in conjunction with the 'Monthly' frequency and it indicates that the calendar item is/'should be' repeated on nth occurrence of 'repeatDay' in the month. Valid values for 'monthPosition' are integers in the range of -1 and 4 inclusive: -1 for the last occurrence, 1 for the first occurrence, 2 for the second occurrence, and so on. 0 is not used."
        },
        "originalStart": {
          "type": "string",
          "format": "date-time",
          "description": "The original start date for the calendar item."
        },
        "originalEnd": {
          "type": "string",
          "format": "date-time",
          "description": "The original end date for the calendar item."
        },
        "repeatBroken": {
          "type": "boolean",
          "description": "Calendar item that's repeated is part of a recurring series of calendar events but the item has been changed since its original creation. In other words, the calendar item has been modified to no longer align with the recurring series (day/time changed for example) of events. This can only be true if the calendar item is repeatable."
        },
        "repeatDay": {
          "type": "string",
          "description": "For monthly recurring event, repeat by day of week.\n\n\n| Type      | Description\n | --------- | --------- |\n| Sunday |  |\n| Monday |  |\n| Tuesday |  |\n| Wednesday |  |\n| Thursday |  |\n| Friday |  |\n| Saturday |  |\n",
          "enum": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ]
        },
        "until": {
          "type": "string",
          "format": "date-time",
          "description": "The date the calendar item should be repeated until. Either this 'until' date OR the count is/'should be' set. When creating a calendar item, 'until' date will be used if both 'until' date and the count are set."
        },
        "weekDays": {
          "type": "array",
          "description": "This property is used in conjunction with the 'Weekly' frequency and it indicates the days of the week the calendar item should be repeated on.",
          "items": {
            "$ref": "#/definitions/BYDAYEnum"
          }
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "dataSourceId": {
          "type": "string",
          "description": "The ID of the data source of the category",
          "readOnly": true
        },
        "parentId": {
          "type": "string",
          "description": "The ID of this category's parent category",
          "readOnly": true
        },
        "categoryId": {
          "type": "string",
          "description": "The human-readable id of the category",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "The title of category"
        },
        "description": {
          "type": "string",
          "description": "The description of the category"
        },
        "type": {
          "type": "string",
          "description": "Type of category\n\n\n| Type      | Description\n | --------- | --------- |\n| Course |  |\n| Organization |  |\n",
          "readOnly": true,
          "enum": [
            "Course",
            "Organization"
          ]
        },
        "frontPage": {
          "type": "boolean",
          "description": "Boolean indicating whether or not the category should appear on the catalog front page"
        },
        "available": {
          "type": "boolean",
          "description": "Boolean indicating whether or not the category is available"
        },
        "restricted": {
          "type": "boolean",
          "description": "Boolean indicating whether or not category is available to all roles, or restricted to a specific set of roles."
        },
        "institutionRoleIds": {
          "type": "array",
          "description": "The roles for which this category is available, if category is set to restricted. Not populated for lists of categories, only for individual category",
          "items": {
            "type": "string"
          }
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time at which the category was created",
          "readOnly": true
        }
      }
    },
    "CategoryCourseMembership": {
      "type": "object",
      "properties": {
        "categoryId": {
          "type": "string",
          "description": "The category ID.",
          "readOnly": true
        },
        "categoryType": {
          "type": "string",
          "description": "The category type.\n\n\n| Type      | Description\n | --------- | --------- |\n| Course |  |\n| Organization |  |\n",
          "readOnly": true,
          "enum": [
            "Course",
            "Organization"
          ]
        },
        "courseId": {
          "type": "string",
          "description": "The course ID.",
          "readOnly": true
        },
        "course": {
          "description": "The course detailed information.\n\n**Since**: 3700.5.0",
          "$ref": "#/definitions/CourseV2"
        },
        "dataSourceId": {
          "type": "string",
          "description": "The data source ID.",
          "readOnly": true
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this membership was created.",
          "readOnly": true
        }
      }
    },
    "Content": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the content.",
          "readOnly": true
        },
        "parentId": {
          "type": "string",
          "description": "The ID of the content's parent.  Note that top-level contents do not have parents. The 'parentId' field is a writable field as of the Bb Learn 3200.6.0 release.  Specifying a new value in PATCH requests allows the Content object to be moved from one parent to another."
        },
        "title": {
          "type": "string",
          "description": "The title or name of this content. Typically shown as the main text to click in the course outline when accessing the content."
        },
        "body": {
          "type": "string",
          "format": "BbML",
          "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
          "description": "The body text associated with this content. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
        },
        "description": {
          "type": "string",
          "description": "The short description of this content.\n\nThis field is not used in Classic courses.  For Ultra courses this is used to show information directly on the course outline.",
          "maxLength": 750
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this content was created.",
          "readOnly": true
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date this content was modified.\n\n**Since**: 3700.4.0",
          "readOnly": true
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "The position of this content within its parent folder. Position values are zero-based (the first element has a position value of zero, not one). Default position is last in the list of child contents under the parent."
        },
        "hasChildren": {
          "type": "boolean",
          "description": "Indicates whether this content is allowed to have child content items.",
          "readOnly": true
        },
        "hasGradebookColumns": {
          "type": "boolean",
          "description": "Indicates whether this content item has one or more gradebook columns.\n\nAssociated gradebook columns can be accessed via /learn/api/public/v1/courses/$courseId/gradebook/columns?contentId=$contentId\n\n**Since**: 3000.11.0",
          "readOnly": true
        },
        "hasAssociatedGroups": {
          "type": "boolean",
          "description": "Indicates whether this content item has one or more associated groups.\n\nAssociated groups can be accessed via /learn/api/public/v1/courses/$courseId/contents/$contentId/groups\n\n**Since**: 3100.4.0",
          "readOnly": true
        },
        "launchInNewWindow": {
          "type": "boolean",
          "description": "Indicates whether the content is going to open in a new window.\n\n**Since**: 3800.10.0"
        },
        "reviewable": {
          "type": "boolean",
          "description": "Indicates whether Review Status is enabled for this content. Content items with review status enabled can be marked as reviewed by students in classic courses and content items with review status enabled in Ultra are either in a Forced Sequence or content that should be counted towards the progress tracking feature as of 3900.19 This can be used to track performance and in Adaptive Release rules to control the release of other content.\n\n**Since**: 3700.15.0"
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the content to students.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the content is currently available to students.  Instructors can always access the content.  If set to 'PartiallyVisible', the title will be available to students but the body will not.  Defaults to Yes.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n| PartiallyVisible |  |\n",
              "enum": [
                "Yes",
                "No",
                "PartiallyVisible"
              ]
            },
            "allowGuests": {
              "type": "boolean",
              "description": "Whether this content is available to users with the 'guest' role. Defaults to true."
            },
            "allowObservers": {
              "type": "boolean",
              "description": "Whether or not \"observers\" are allowed access to this Content. Defaults to true.\n\n**Since**: 3900.31.0"
            },
            "adaptiveRelease": {
              "type": "object",
              "description": "Settings controlling adaptive release of the content to students.",
              "title": "AdaptiveRelease",
              "properties": {
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date when this content will become available to students."
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date when this content will no longer be available to students."
                }
              }
            }
          }
        },
        "contentHandler": {
          "description": "Extended settings specific to this content item's content handler.",
          "$ref": "#/definitions/ContentHandler"
        },
        "links": {
          "type": "array",
          "description": "A list of links to resources related to this content item. Supported relation types include:\n\n- alternate\n\n**Since**: 3900.0.0",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ContentCollectionResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID the Resource.",
          "readOnly": true
        },
        "xid": {
          "type": "string",
          "description": "The primary ID of the resource in xythos format.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the Resource.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the Resource; 'File' or 'Folder'\n\n\n| Type      | Description\n | --------- | --------- |\n| File |  |\n| Folder |  |\n",
          "readOnly": true,
          "enum": [
            "File",
            "Folder"
          ]
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the Resource in bytes.",
          "readOnly": true
        },
        "hasLinks": {
          "type": "boolean",
          "description": "Whether the Resource has associated Course Content links.",
          "readOnly": true
        },
        "parentId": {
          "type": "string",
          "description": "The Id of the Resource's parent folder.",
          "readOnly": true
        },
        "creatorId": {
          "type": "string",
          "description": "The Id of the User who created the Resource.",
          "readOnly": true
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this Resource was created.",
          "readOnly": true
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date this Resource was last modified.",
          "readOnly": true
        },
        "mimeType": {
          "type": "string",
          "description": "The mime-type for this Resource; only set if the Resource is of type 'File'"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The version number for this Resource; only set if the Resource is of type 'File' and is versioned.",
          "readOnly": true
        },
        "links": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "object",
            "title": "ContentCollectionLink",
            "properties": {
              "rel": {
                "type": "string",
                "description": "Describes how the current context is related to the target resource.\n\nSupported values: \n\n | Relation Type | Media Type         | Functionality                                | Since    |\n |---------------|--------------------|----------------------------------------------|----------|\n | \"canonical\"   |  application/json  | Links to the resource URL                    | 3900.41.0 |\n | \"describes\"   |  *                 | Links to the download URL of a resource      | 3900.41.0 |\n \n\n* \"describes\" relation's media type will depend on the file's own media type.",
                "readOnly": true
              },
              "href": {
                "type": "string",
                "description": "Contains a target Internationalized Resource Identifiers (IRIs)",
                "readOnly": true
              },
              "title": {
                "type": "string",
                "description": "Title attributes for the target IRI",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "Format attributes for the target IRI",
                "readOnly": true
              }
            }
          }
        }
      }
    },
    "ContentGroup": {
      "type": "object",
      "properties": {
        "contentId": {
          "type": "string",
          "description": "The ID of the associated content.",
          "readOnly": true
        },
        "groupId": {
          "type": "string",
          "description": "The ID of the association of content and group.",
          "readOnly": true
        }
      }
    },
    "ContentHandler": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The content handler's ID.\n\nPublicly supported handlers: \n\n | ID                                 | Documentation                   | Since     |\n |------------------------------------|---------------------------------|-----------|\n | resource/x-bb-document             | ContentItemTOPubV1              |  3000.1.0 |\n | resource/x-bb-externallink         | ExternalLinkTOPubV1             |  3000.1.0 |\n | resource/x-bb-folder               | ContentFolderTOPubV1            |  3000.1.0 |\n | resource/x-bb-courselink           | CourseLinkTOPubV1               |  3100.5.0 |\n | resource/x-bb-forumlink            | DiscussionLinkTOPubV1           |  3100.6.0 |\n | resource/x-bb-blti-link            | BasicLTITOPubV1                 |  3200.6.0 |\n | resource/x-bb-file                 | ContentFileTOPubV1              |  3200.6.0 |\n | resource/x-bb-asmt-test-link       | TestLinkTOPubV1                 |  3300.5.0 |\n | resource/x-bb-assignment           | AssignmentTOPubV1               |  3400.9.0 |\n | resource/x-bb-blti-bltiplacement-* | BasicLTIPlacementContentTOPubV1 |  3600.0.0 |\n \n\nFor handlers that are not publicly supported yet, their ID will be shown here, and updates to common content attributes are allowed, but extended handler-specific attributes will not be visible.",
          "readOnly": true
        }
      }
    },
    "Course": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the course.",
          "readOnly": true
        },
        "uuid": {
          "type": "string",
          "description": "A secondary unique ID for the course. Used by LTI launches and other inter-server operations.",
          "readOnly": true,
          "maxLength": 32
        },
        "externalId": {
          "type": "string",
          "description": "An optional externally-defined unique ID for the course. Defaults to the courseId.\n\nFormerly known as 'batchUid'.",
          "maxLength": 256
        },
        "dataSourceId": {
          "type": "string",
          "description": "The ID of the data source associated with this course. This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
        },
        "courseId": {
          "type": "string",
          "description": "The Course ID attribute, shown to users in the UI.",
          "readOnly": true,
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "description": "The name of the course.",
          "maxLength": 333
        },
        "description": {
          "type": "string",
          "description": "The description of the course."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this course was created.",
          "readOnly": true
        },
        "organization": {
          "type": "boolean",
          "description": "Whether this object represents an Organization. Defaults to false.",
          "readOnly": true
        },
        "ultraStatus": {
          "type": "string",
          "description": "Whether the course is rendered using Classic or Ultra Course View.\n\n\n| Type      | Description\n | --------- | --------- |\n| Undecided | The ultra status is not decided. |\n| Classic | The course is decided as classic. |\n| Ultra | The course is decided as ultra |\n| UltraPreview | The course is currently in Ultra mode but during the preview state where it may still be reverted via a Restore to the classic state |\n",
          "readOnly": true,
          "enum": [
            "Undecided",
            "Classic",
            "Ultra",
            "UltraPreview"
          ]
        },
        "allowGuests": {
          "type": "boolean",
          "description": "Whether guests (users with the role guest) are allowed access to the course. Modifiable only for Classic course. Defaults to true for Classic Courses and false for Ultra Courses."
        },
        "readOnly": {
          "type": "boolean",
          "description": "This status does not affect availability of the course for viewing in any way. readOnly is valid for both Ultra and Classic courses. If an Ultra course is in readOnly mode, updates are not possible. For a Classic course in readOnly mode, updates are still possible (through Web UI but not through REST i.e. closed is enforced for original courses when updated through REST the same way Ultra courses are blocked) but new notifications are not generated.\n\n**Deprecated**: since 3400.8.0; use the v2 endpoint's closedComplete property instead"
        },
        "termId": {
          "type": "string",
          "description": "The ID of the term associated to this course. This may optionally be the term's externalId using the syntax \"externalId:spring.2016\"."
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the course to students.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the course is currently available to students. Instructors can always access the course if they have 'Access unavailable course' entitlement. If set to 'Term', the course's parent term availability settings will be used.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the course. |\n| No | Students may not access the course. |\n| Disabled | Disabled by the SIS. Students may not access the course.  **Since**: 3100.0.0 |\n| Term | Availability is inherited from the term settings. Requires a termId be set. |\n",
              "enum": [
                "Yes",
                "No",
                "Disabled",
                "Term"
              ]
            },
            "duration": {
              "type": "object",
              "description": "Settings controlling the length of time the course is available.",
              "title": "Duration",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The intended length of the course.\n\n\n| Type      | Description\n | --------- | --------- |\n| Continuous | Course is active on an ongoing basis. |\n| DateRange | Course is only intended to be available between specific date ranges |\n| FixedNumDays | Course is only available for a set number of days |\n| Term | Course availablity is dictated by its associated term |\n",
                  "enum": [
                    "Continuous",
                    "DateRange",
                    "FixedNumDays",
                    "Term"
                  ]
                },
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this course starts. May only be set if availability.duration.type is DateRange."
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this course ends. May only be set if availability.duration.type is DateRange."
                },
                "daysOfUse": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of days this course can be used. May only be set if availability.duration.type is FixedNumDays."
                }
              }
            }
          }
        },
        "enrollment": {
          "type": "object",
          "description": "Settings controlling how students may enroll in the course.",
          "title": "Enrollment",
          "properties": {
            "type": {
              "type": "string",
              "description": "Specifies the enrollment options for the course. Defaults to InstructorLed.\n\n\n| Type      | Description\n | --------- | --------- |\n| InstructorLed | Enrollment tasks for the course can only performed by the instructor |\n| SelfEnrollment | Instructors have the ability to enroll users, and students can also enroll themselves in the course |\n| EmailEnrollment | Instructors have the ability to enroll users, and students can email requests to the instructor for enrollment |\n",
              "enum": [
                "InstructorLed",
                "SelfEnrollment",
                "EmailEnrollment"
              ]
            },
            "start": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which enrollments are allowed for the course. May only be set if enrollment.type is SelfEnrollment."
            },
            "end": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which enrollment in this course ends. May only be set if enrollment.type is SelfEnrollment."
            },
            "accessCode": {
              "type": "string",
              "description": "The enrollment access code associated with this course. May only be set if enrollment.type is SelfEnrollment."
            }
          }
        },
        "locale": {
          "type": "object",
          "description": "Settings controlling localization within the course.",
          "title": "Locale",
          "properties": {
            "id": {
              "type": "string",
              "description": "The locale of this course."
            },
            "force": {
              "type": "boolean",
              "description": "Whether students are forced to use the course's specified locale."
            }
          }
        },
        "hasChildren": {
          "type": "boolean",
          "description": "Whether the course has any cross-listed children.\n\n**Since**: 3000.11.0",
          "readOnly": true
        },
        "parentId": {
          "type": "string",
          "description": "The cross-listed parentId associated with the course, if the course is a child course.\n\n**Since**: 3000.11.0",
          "readOnly": true
        },
        "externalAccessUrl": {
          "type": "string",
          "description": "A URL corresponding to the Course Page for the course.  Formatting varies based on whether the course is rendered using Classic or Ultra Course View\n\n**Since**: 3200.3.0",
          "readOnly": true
        },
        "guestAccessUrl": {
          "type": "string",
          "description": "A URL for viewing the Course Page for the course as a guest.  Formatting varies based on whether the course is rendered using Classic or Ultra Course View\n\n**Since**: 3200.3.0",
          "readOnly": true
        }
      }
    },
    "CourseAnnouncement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Primary key identifier",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "The title of this Announcement."
        },
        "body": {
          "type": "string",
          "format": "BbML",
          "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
          "description": "The message body of the Announcement. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
        },
        "creator": {
          "type": "string",
          "description": "The user that created the Announcement.",
          "readOnly": true
        },
        "draft": {
          "type": "boolean",
          "description": "An indication of whether or not the Announcement is in draft status."
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the course to students.",
          "title": "Availability",
          "properties": {
            "duration": {
              "type": "object",
              "description": "Duration indicates when the System Announcement is Available based on whether it is Permanent or if the date/time of the request falls within its Start & End dates.",
              "title": "Duration",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Indicates whether this Course Announcement is always displayed (Permanent) or if it is shown only between the Start and End dates (Restricted).\n\n\n| Type      | Description\n | --------- | --------- |\n| Permanent | The Announcement will always be displayed. |\n| Restricted | The Announcement will start being displayed on Duration.Start and stop being displayed on Duration.End |\n",
                  "readOnly": true,
                  "enum": [
                    "Permanent",
                    "Restricted"
                  ]
                },
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this Announcement starts being Available."
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this Announcement stops being Available."
                }
              }
            }
          }
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date that the Announcement was created.",
          "readOnly": true
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "participants": {
          "type": "integer",
          "format": "int32",
          "description": "The number of users that the Announcement will reach.\n\nShown when adding the query parameter: \"expand=readCount\".",
          "readOnly": true
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "The position of the Announcement.",
          "readOnly": true
        },
        "readCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of reads for the Announcement.\n\nShown when adding the query parameter: \"expand=readCount\".",
          "readOnly": true
        }
      }
    },
    "CourseCategoryMembership": {
      "type": "object",
      "properties": {
        "categoryId": {
          "type": "string",
          "description": "The category ID.",
          "readOnly": true
        },
        "categoryType": {
          "type": "string",
          "description": "The category type.\n\n\n| Type      | Description\n | --------- | --------- |\n| Course |  |\n| Organization |  |\n",
          "readOnly": true,
          "enum": [
            "Course",
            "Organization"
          ]
        },
        "category": {
          "description": "The category detailed information.\n\n**Since**: 3700.7.0",
          "$ref": "#/definitions/Category"
        },
        "courseId": {
          "type": "string",
          "description": "The course ID.",
          "readOnly": true
        },
        "dataSourceId": {
          "type": "string",
          "description": "The data source ID.",
          "readOnly": true
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this membership was created.",
          "readOnly": true
        }
      }
    },
    "CourseChild": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the child course associated with this cross-listing.",
          "readOnly": true
        },
        "parentId": {
          "type": "string",
          "description": "The primary ID of the parent course associated with this cross-listing.",
          "readOnly": true
        },
        "dataSourceId": {
          "type": "string",
          "description": "The ID of the data source associated with this course cross-listing.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this course cross-listing was created.",
          "readOnly": true
        },
        "childCourse": {
          "description": "The child course associated with this cross-listing.",
          "$ref": "#/definitions/Course"
        }
      }
    },
    "CourseHierarchyNode": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string",
          "description": "The primary ID of the Hierarchy Node",
          "readOnly": true
        },
        "node": {
          "description": "The hierarchy node of the node/course association.\n\nShown when adding the query parameter: \"expand=node\"",
          "$ref": "#/definitions/Node"
        },
        "courseId": {
          "type": "string",
          "description": "The primary ID of the Course",
          "readOnly": true
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Whether or not this association represents the primary node association of the course"
        }
      }
    },
    "CourseIdParam": {
      "type": "object"
    },
    "CourseMeeting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The primary ID of the meeting.",
          "readOnly": true
        },
        "courseId": {
          "type": "string",
          "description": "The primary ID of the course."
        },
        "title": {
          "type": "string",
          "description": "The title of the meeting"
        },
        "description": {
          "type": "string",
          "description": "The description of the meeting"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "description": "The start time of meeting"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "description": "The end time of meeting"
        },
        "externalLink": {
          "type": "string",
          "description": "The externalLink of course meeting"
        }
      }
    },
    "CourseMembership": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of this course/user relationship.\n\n**Since**: 3700.14.0",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "description": "The primary ID of the user.",
          "readOnly": true
        },
        "user": {
          "description": "The user associated with the membership.\n\nShown when adding the query parameter: \"expand=user\". And can be filtered with the \"fields\" query parameter, for example \"fields=user.uuid,user.externalId\".\n\n**Since**: 3400.7.0",
          "$ref": "#/definitions/User"
        },
        "courseId": {
          "type": "string",
          "description": "The primary ID of the course.",
          "readOnly": true
        },
        "childCourseId": {
          "type": "string",
          "description": "The primary ID of the child, cross-listed course, in which the user is directly enrolled. </p> This field is read only in Learn versions 3000.11.0 through 3400.0.0. As of 3400.1.0, this field is mutable.  </p> If this membership's course is a parent course in a cross-listed set, the childCourseId can be updated to move the membership enrollment between child courses and the parent course in  the set.  Patching the childCourseId to \"null\" will move the membership to the parent course.\n\n**Since**: 3000.11.0"
        },
        "dataSourceId": {
          "type": "string",
          "description": "The ID of the data source associated with this course.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this membership was created.",
          "readOnly": true
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date this membership was modified.  A membership is considered modified only if an aspect of the membership itself changes (e.g.: availability or courseRoleId), and not if the Course or User alone is modified.\n\n**Since**: 3800.8.0",
          "readOnly": true
        },
        "availability": {
          "description": "Settings controlling availability of the course membership.",
          "$ref": "#/definitions/Availability"
        },
        "courseRoleId": {
          "type": "string",
          "description": "The user's role in the course.\n\nThese roles are also valid for an organization, although they are named differently in the UI.\n\nCustom course roles may also be referenced by their IDs.\n\n\n| Type      | Description\n | --------- | --------- |\n| Instructor | Has access to all areas in the Control Panel. This role is generally given to those developing, teaching, or facilitating the class. Instructors may access a course that is unavailable to students. This role is customizable and may have different capabilities from what is documented here. |\n| BbFacilitator | The facilitator is an instructor like role. Facilitators are restricted versions of an instructor, in that they are able to deliver course instruction and administer all aspects of a pre-constructed course, but are not allowed to modify or alter the course. This role is customizable and may have different capabilities from what is documented here. |\n| TeachingAssistant | The teaching assistant role is that of a co-teacher. Teaching assistants are able to administer all areas of a course. Their only limitations are those imposed by the instructor or Blackboard administrator at your school. This role is customizable and may have different capabilities from what is documented here. |\n| CourseBuilder | Manages the course without having access to student grades. This role is customizable and may have different capabilities from what is documented here. |\n| Grader | Assists the instructor in the creation, management, delivery, and grading of items. This role is customizable and may have different capabilities from what is documented here. |\n| Student |  |\n| Guest | Has no access to the Control Panel. Areas within the course are made available to guests, but typically they can only view course materials; they do not have access to tests or assessments, and do not have permission to post on discussion boards. This role's behavior is immutable. |\n",
          "enum": [
            "Instructor",
            "BbFacilitator",
            "TeachingAssistant",
            "CourseBuilder",
            "Grader",
            "Student",
            "Guest"
          ]
        },
        "bypassCourseAvailabilityUntil": {
          "type": "string",
          "format": "date-time",
          "description": "If present, this date signals that the user associated with this membership has special access to the course regardless of the course's availability setting prior to the moment specified by this field. After the date has passed, the membership will respect the course's availability.",
          "readOnly": true
        },
        "lastAccessed": {
          "type": "string",
          "format": "date-time",
          "description": "This date signals the date this membership was used; in other words, the last date the user accessed the associated course or content contained by that course.\n\nThe recording of any activity which would lead to this date getting updated does happen asynchronously in batches. So, there may be some delay between an activity which would update this value and the availability of the new date. It is recommended when using this value to note that activity within the last 5 minutes may not be taken into account.\n\n**Since**: 3300.9.0",
          "readOnly": true
        },
        "displayOrder": {
          "type": "integer",
          "format": "int32",
          "description": "For primary instructor implementation, position or displayOrder cannot be negative, the minimum position is 1, with which is the primary instructor (aka. Leader instructor). Multiple primary instructor have the same displayOrder 1.\n\nThis operation only takes effect when the course role is non-student and non-guest roles, otherwise it's silently ignored, since <code>displayOrder</code> is for this design.\n\nAll cases violating the above restrictions will be set as <code>null</code> All display orders don't keep uniqueness, just save as-is."
        }
      }
    },
    "CourseMessage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the message",
          "readOnly": true
        },
        "subject": {
          "type": "string",
          "description": "The subject of the message.",
          "readOnly": true
        },
        "body": {
          "type": "string",
          "format": "BbML",
          "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
          "description": "The body text of the message. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information.",
          "readOnly": true
        },
        "postedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date this message was created.",
          "readOnly": true
        },
        "isRead": {
          "type": "boolean",
          "description": "Whether or not the message has been read"
        },
        "type": {
          "type": "string",
          "description": "Type of the message\n\n\n| Type      | Description\n | --------- | --------- |\n| System | Course message generated by the system, to be more specific, the message created when adding a new participant into the conversation. |\n| Normal | Any course message sent by the course conversation participants will be considered as \"NORMAL\" type. |\n",
          "readOnly": true,
          "enum": [
            "System",
            "Normal"
          ]
        },
        "sender": {
          "description": "A full representation of the Sender. Only populated if the expand query parameter includes the sender property.",
          "$ref": "#/definitions/User"
        },
        "senderId": {
          "type": "string",
          "description": "The ID of the sender.",
          "readOnly": true
        },
        "attachment": {
          "description": "Metadata for the file attached to the message, if one exists",
          "$ref": "#/definitions/CourseMessageAttachment"
        },
        "toUsers": {
          "type": "array",
          "description": "The to participants of the message",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "ccUsers": {
          "type": "array",
          "description": "The cc participants of the message",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "bccUsers": {
          "type": "array",
          "description": "The bcc participants of the message",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "isExistingAttachment": {
          "type": "boolean",
          "description": "Whether or not the attachment is the existing attachment for the message",
          "readOnly": true
        },
        "isReply": {
          "type": "boolean",
          "description": "Whether or not this message is a reply to another message",
          "readOnly": true
        }
      }
    },
    "CourseMessageAttachment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of file attachment"
        },
        "fileName": {
          "type": "string",
          "description": "The fileName of the attachment"
        },
        "mimeType": {
          "type": "string",
          "description": "The mime type of the attachment"
        },
        "fileLocation": {
          "type": "string",
          "description": "The location of the uploaded file"
        }
      }
    },
    "CourseMessageFolder": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the folder",
          "readOnly": true
        },
        "label": {
          "type": "string",
          "description": "The label of the folder",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the folder\n\n\n| Type      | Description\n | --------- | --------- |\n| Inbox |  |\n| Sent |  |\n| Delete |  |\n| Custom |  |\n",
          "readOnly": true,
          "enum": [
            "Inbox",
            "Sent",
            "Delete",
            "Custom"
          ]
        },
        "courseMessagesCounts": {
          "description": "The total and unread counts of messages in folder",
          "$ref": "#/definitions/CourseMessagesCounts"
        }
      }
    },
    "CourseMessageParticipant": {
      "type": "object",
      "properties": {
        "messageId": {
          "type": "string",
          "description": "The id of the message"
        },
        "userId": {
          "type": "string",
          "description": "The id of the participant"
        },
        "user": {
          "description": "The User object",
          "$ref": "#/definitions/User"
        },
        "participationType": {
          "type": "string",
          "description": "The type of participation\n\n\n| Type      | Description\n | --------- | --------- |\n| From | Sender user from the message |\n| To | The to or recipient user of the message |\n| Cc | The cc user of the message |\n| Bcc | The bcc user of the message |\n",
          "enum": [
            "From",
            "To",
            "Cc",
            "Bcc"
          ]
        }
      }
    },
    "CourseMessagesCounts": {
      "type": "object",
      "properties": {
        "courseId": {
          "type": "string",
          "description": "The identifier of the course for which this data applies"
        },
        "unreadCount": {
          "type": "integer",
          "format": "int32",
          "description": "The count of unread messages"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32",
          "description": "The total count of messages"
        }
      }
    },
    "CourseRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the course role",
          "readOnly": true
        },
        "roleId": {
          "type": "string",
          "description": "The identifier used to assign the course role to a course enrollment.\n\nFor system defined course roles, this value will be one of Student, Instructor, TeachingAssistant, CourseBuilder, Grader or Guest\n\nFor custom course roles, this will be the roleId entered during the creation of the role. Allowed characters for the custom course roleId's are any letter, number, period, underscore and dash.",
          "readOnly": true
        },
        "nameForCourses": {
          "type": "string",
          "description": "The role name presented to users when the course role is associated with a course.",
          "maxLength": 64
        },
        "nameForOrganizations": {
          "type": "string",
          "description": "The role name presented to users when the course role is associated with an organization.",
          "maxLength": 64
        },
        "description": {
          "type": "string",
          "description": "Optional description of the course role",
          "maxLength": 1000
        },
        "custom": {
          "type": "boolean",
          "description": "False if the course role exists as a system generated course role. True if the course role was created by an admin user.\n\nBoth custom and system generated course roles can be modified, but only custom course roles can be deleted."
        },
        "actAsInstructor": {
          "type": "boolean",
          "description": "Implies access to unavailable courses, display in the Course catalog, and receiving email enrollment requests"
        },
        "availability": {
          "type": "object",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the course role is currently available to course enrollments, organization enrollments, both or neither.  Valid values are:\n\n- Course: Course Role is available to Course Enrollments\n- Organization: Course Role is available to Organization Enrollments\n- Both: Course Role is available to both Course and Organization Enrollments\n- None: Course Role is not available\n\n\n| Type      | Description\n | --------- | --------- |\n| Course | Course only |\n| Organization | Organization only |\n| CourseAndOrganization | Both Course and Organization |\n| No | Neither Course nor Organization |\n",
              "enum": [
                "Course",
                "Organization",
                "CourseAndOrganization",
                "No"
              ]
            }
          }
        }
      }
    },
    "CourseTask": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of this task.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "The status of the task.\n\n\n| Type      | Description\n | --------- | --------- |\n| Queued | initial state of a task |\n| Assigned |  |\n| Running |  |\n| Complete |  |\n| CompleteWithErrors |  |\n| Incomplete |  |\n",
          "readOnly": true,
          "enum": [
            "Queued",
            "Assigned",
            "Running",
            "Complete",
            "CompleteWithErrors",
            "Incomplete"
          ]
        },
        "percentComplete": {
          "type": "integer",
          "format": "int32",
          "description": "Task progress, with 0 representing not started and 100 representing done.",
          "readOnly": true
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "description": "The date the task was started.",
          "readOnly": true
        }
      }
    },
    "CourseToc": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Get the Id of the Course ToC (Ex. '_2_1')",
          "readOnly": true
        },
        "courseId": {
          "type": "string",
          "description": "Get the Id of the Course (Ex. '_3_1')",
          "readOnly": true
        },
        "contentId": {
          "type": "string",
          "description": "The Id of the Content Folder associated with this ToC entry. This will apply only if Course ToC Target Type is CONTENT, otherwise, this Id will be null. (Ex. '_2_1')",
          "readOnly": true
        },
        "label": {
          "type": "string",
          "description": "The Label of the Course ToC, this is what user will see as menu option label. (Ex. 'Information')",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "description": "The URL representing the path to a specific resource, usually associated with a Content Folder. (Ex. 'path/to/resource')",
          "readOnly": true
        },
        "targetType": {
          "type": "string",
          "description": "The Target Type for Course ToC entry. This will tell to this ToC register which kind of handler will be associated to its main menu's option. (Ex. 'CONTENT', \u00b4MODULE\u00b4, `APPLICATION`)\n\n\n| Type      | Description\n | --------- | --------- |\n| Application | The Toc item references a built-in application or system extension. |\n| Content | The Toc item references a content folder defined within the course. |\n| ContentItem | The Toc item references a content item defined within the course. |\n| Link | The Toc item is a link to another entity defined within the course. |\n| StaffInfo | The Toc item references a staff information folder defined within the course. |\n| Url | The Toc item is a URL to a resource. |\n| Divider | The Toc item is a divider in the menu. |\n| Subheader | The Toc item is a sub-header in the menu. |\n| Module | The Toc item is a Course Module Page. |\n",
          "readOnly": true,
          "enum": [
            "Application",
            "Content",
            "ContentItem",
            "Link",
            "StaffInfo",
            "Url",
            "Divider",
            "Subheader",
            "Module"
          ]
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "The position in which the main menu option associated with this ToC will be shown. (Ex. 0)",
          "readOnly": true
        },
        "launchInNewWindow": {
          "type": "boolean",
          "description": "Whether or not menu option will be launched in a new window (Ex. 0)",
          "readOnly": true
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Boolean representing if main menu option associated with this ToC is able to be shown.",
          "readOnly": true
        },
        "isEntryPoint": {
          "type": "boolean",
          "description": "Whether or not this ToC is an entry point.",
          "readOnly": true
        },
        "internalHandle": {
          "type": "string",
          "description": "The internal handle for this Course ToC (Ex. 'content')",
          "readOnly": true
        },
        "allowGuests": {
          "type": "boolean",
          "description": "Whether or not Guests can view this ToC."
        },
        "allowObservers": {
          "type": "boolean",
          "description": "Whether or not Observers can view this ToC."
        }
      }
    },
    "CourseV2": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the course.",
          "readOnly": true
        },
        "uuid": {
          "type": "string",
          "description": "A secondary unique ID for the course. Used by LTI launches and other inter-server operations.",
          "readOnly": true,
          "maxLength": 32
        },
        "externalId": {
          "type": "string",
          "description": "An optional externally-defined unique ID for the course. Defaults to the courseId.\n\nFormerly known as 'batchUid'.",
          "maxLength": 256
        },
        "dataSourceId": {
          "type": "string",
          "description": "The ID of the data source associated with this course. This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
        },
        "courseId": {
          "type": "string",
          "description": "The Course ID attribute, shown to users in the UI.",
          "readOnly": true,
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "description": "The name of the course.",
          "maxLength": 333
        },
        "description": {
          "type": "string",
          "description": "The description of the course."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this course was created.",
          "readOnly": true
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date this course was last modified.\n\n**Since**: 3500.4.0",
          "readOnly": true
        },
        "organization": {
          "type": "boolean",
          "description": "Whether this object represents an Organization. Defaults to false.",
          "readOnly": true
        },
        "ultraStatus": {
          "type": "string",
          "description": "Whether the course is rendered using Classic or Ultra Course View.\n\n\n| Type      | Description\n | --------- | --------- |\n| Undecided | The ultra status is not decided. |\n| Classic | The course is decided as classic. |\n| Ultra | The course is decided as ultra |\n| UltraPreview | The course is currently in Ultra mode but during the preview state where it may still be reverted via a Restore to the classic state |\n",
          "readOnly": true,
          "enum": [
            "Undecided",
            "Classic",
            "Ultra",
            "UltraPreview"
          ]
        },
        "allowGuests": {
          "type": "boolean",
          "description": "Whether guests (users with the role guest) are allowed access to the course. Modifiable only for Classic course. Defaults to true for Classic Courses and false for Ultra Courses."
        },
        "allowObservers": {
          "type": "boolean",
          "description": "Whether observers are allowed access to the course. Modifiable only for Classic course. Defaults to false.\n\n**Since**: 3900.31.0"
        },
        "closedComplete": {
          "type": "boolean",
          "description": "This status does not affect availability of the course for viewing in any way. closedComplete is valid for both Ultra and Classic courses. If an Ultra course is in closedComplete mode, updates are not possible. For a Classic course in closedComplete mode, updates are still possible (through Web UI but not through REST i.e. closed is enforced for original courses when updated through REST the same way Ultra courses are blocked) but new notifications are not generated."
        },
        "termId": {
          "type": "string",
          "description": "The ID of the term associated to this course. This may optionally be the term's externalId using the syntax \"externalId:spring.2016\"."
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the course to students.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the course is currently available to students. Instructors can always access the course if they have 'Access unavailable course' entitlement. If set to 'Term', the course's parent term availability settings will be used.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the course. |\n| No | Students may not access the course. |\n| Disabled | Disabled by the SIS. Students may not access the course. @since 3100.0.0 |\n| Term | Availability is inherited from the term settings. Requires a termId be set. |\n",
              "enum": [
                "Yes",
                "No",
                "Disabled",
                "Term"
              ]
            },
            "duration": {
              "type": "object",
              "description": "Settings controlling the length of time the course is available.",
              "title": "Duration",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The intended length of the course. Possible values are:\n\n- Continuous: The course is active on an ongoing basis. This is the default.\n- DateRange: The course will only be available between specific date ranges.\n- FixedNumDays: The course will only be available for a set number of days.\n- Term: The course's parent term duration settings will be used.\n\n\n| Type      | Description\n | --------- | --------- |\n| Continuous | Course is active on an ongoing basis. |\n| DateRange | Course is only intended to be available between specific date ranges |\n| FixedNumDays | Course is only available for a set number of days |\n| Term | Course availablity is dictated by its associated term |\n",
                  "enum": [
                    "Continuous",
                    "DateRange",
                    "FixedNumDays",
                    "Term"
                  ]
                },
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this course starts. May only be set if availability.duration.type is DateRange."
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this course ends. May only be set if availability.duration.type is DateRange."
                },
                "daysOfUse": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of days this course can be used. May only be set if availability.duration.type is FixedNumDays."
                }
              }
            }
          }
        },
        "enrollment": {
          "type": "object",
          "description": "Settings controlling how students may enroll in the course.",
          "title": "Enrollment",
          "properties": {
            "type": {
              "type": "string",
              "description": "Specifies the enrollment options for the course. Defaults to InstructorLed.\n\n\n| Type      | Description\n | --------- | --------- |\n| InstructorLed | Enrollment tasks for the course can only performed by the instructor |\n| SelfEnrollment | Instructors have the ability to enroll users, and students can also enroll themselves in the course |\n| EmailEnrollment | Instructors have the ability to enroll users, and students can email requests to the instructor for enrollment |\n",
              "enum": [
                "InstructorLed",
                "SelfEnrollment",
                "EmailEnrollment"
              ]
            },
            "start": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which enrollments are allowed for the course. May only be set if enrollment.type is SelfEnrollment."
            },
            "end": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which enrollment in this course ends. May only be set if enrollment.type is SelfEnrollment."
            },
            "accessCode": {
              "type": "string",
              "description": "The enrollment access code associated with this course. May only be set if enrollment.type is SelfEnrollment.",
              "maxLength": 50
            }
          }
        },
        "locale": {
          "type": "object",
          "description": "Settings controlling localization within the course.",
          "title": "Locale",
          "properties": {
            "id": {
              "type": "string",
              "description": "The locale of this course.",
              "maxLength": 20
            },
            "force": {
              "type": "boolean",
              "description": "Whether students are forced to use the course's specified locale."
            }
          }
        },
        "hasChildren": {
          "type": "boolean",
          "description": "Whether the course has any cross-listed children.\n\n**Since**: 3000.11.0",
          "readOnly": true
        },
        "parentId": {
          "type": "string",
          "description": "The cross-listed parentId associated with the course, if the course is a child course.\n\n**Since**: 3000.11.0",
          "readOnly": true
        },
        "externalAccessUrl": {
          "type": "string",
          "description": "A URL corresponding to the Course Page for the course.  Formatting varies based on whether the course is rendered using Classic or Ultra Course View\n\n**Since**: 3200.3.0",
          "readOnly": true
        },
        "guestAccessUrl": {
          "type": "string",
          "description": "A URL for viewing the Course Page for the course as a guest.  Formatting varies based on whether the course is rendered using Classic or Ultra Course View\n\n**Since**: 3200.3.0",
          "readOnly": true
        }
      }
    },
    "CreateAssignmentResult": {
      "type": "object",
      "properties": {
        "contentId": {
          "type": "string",
          "description": "Id of the content created during the assignment creation."
        },
        "gradeColumnId": {
          "type": "string",
          "description": "Id of the grade column created during the assignment creation."
        },
        "assessmentId": {
          "type": "string",
          "description": "Id of the assessment created during the assignment creation.  This is only created for Ultra course assignments."
        },
        "questionIds": {
          "type": "array",
          "description": "Ids of the assessment questions created during the assignment creation.  This is only created for Ultra course assignments.",
          "items": {
            "type": "string"
          }
        },
        "attachmentIds": {
          "type": "array",
          "description": "Ids of the file attachments created during assignment creation.  This is only created for Classic course assignments",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DataSource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the data source.",
          "readOnly": true
        },
        "externalId": {
          "type": "string",
          "description": "An externally-defined unique ID for the data source.\n\nFormerly known as 'batchUid'."
        },
        "description": {
          "type": "string",
          "description": "The description of the data source."
        }
      }
    },
    "Discussion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the discussion. (Ex. '_65_1')",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "Title given to the discussion forum",
          "maxLength": 333
        },
        "available": {
          "type": "boolean",
          "description": "Indicates if the discussion is available"
        },
        "gradable": {
          "type": "boolean",
          "description": "Indicates if the discussion allows grading"
        },
        "gradebookColumnId": {
          "type": "string",
          "description": "Id of the Grade column associated to this discussion.",
          "readOnly": true
        },
        "groupDiscussion": {
          "type": "boolean",
          "description": "Indicates if the discussion is a group discussion",
          "readOnly": true
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date in which the discussion was created.",
          "readOnly": true
        },
        "modifiedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Last date in which the discussion was updated.",
          "readOnly": true
        },
        "topic": {
          "description": "Topic of the Discussion. Only applicable to Ultra discussions.",
          "$ref": "#/definitions/Topic"
        }
      }
    },
    "DiscussionGroup": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string",
          "description": "The ID of the group. (Ex. '_65_1')"
        },
        "discussionId": {
          "type": "string",
          "description": "The ID of the discussion. (Ex. '_66_1')"
        },
        "threadId": {
          "type": "string",
          "description": "The ID of the message holding as Discussion thread. (Ex. '_67_1')"
        }
      }
    },
    "DisplayGrade": {
      "type": "object",
      "properties": {
        "scaleType": {
          "type": "string",
          "description": "The type of Grade Column Grading Schema used when creating the displayed grade\n\n\n| Type      | Description\n | --------- | --------- |\n| Percent |  |\n| Score |  |\n| Tabular |  |\n| Text |  |\n| CompleteIncomplete |  |\n",
          "readOnly": true,
          "enum": [
            "Percent",
            "Score",
            "Tabular",
            "Text",
            "CompleteIncomplete"
          ]
        },
        "score": {
          "type": "number",
          "description": "The displayed score",
          "readOnly": true
        },
        "possible": {
          "type": "number",
          "description": "\n\nThe maximum possible points. This property does not take the grading schema into account. Regardless of the schema (percentage, letter, etc), this property will only return the maximum points possible for the column.</p>\n\nIn case the column's value is calculated from other columns, the value will not take into account the exempted columns' value.</p>\n\n**Since**: 3900.41.0",
          "readOnly": true
        },
        "text": {
          "type": "string",
          "description": "The displayed text grade, based on the Grade Column Grading Schema or Grade Notation description.",
          "readOnly": true
        }
      }
    },
    "EmbeddedAttemptReceipt": {
      "type": "object",
      "properties": {
        "receiptId": {
          "type": "string",
          "description": "The ID of the receipt.",
          "readOnly": true
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date the associated attempt was submitted.",
          "readOnly": true
        },
        "submissionTotalSize": {
          "type": "integer",
          "format": "int64",
          "description": "The total size of the submission in bytes\n\n**Since**: 3900.37.0",
          "readOnly": true
        }
      }
    },
    "FileAttachment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "fileName": {
          "type": "string",
          "readOnly": true
        },
        "mimeType": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Goal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The goal's Id."
        },
        "externalId": {
          "type": "string",
          "description": "The goal's external Id."
        },
        "goalSetId": {
          "type": "string",
          "description": "The goal's set Id."
        },
        "categoryId": {
          "type": "string",
          "description": "The goal's category Id."
        },
        "parentId": {
          "type": "string",
          "description": "The parent goal Id."
        },
        "title": {
          "type": "string",
          "description": "The goal's name."
        },
        "text": {
          "type": "string",
          "description": "The goal's text."
        },
        "type": {
          "type": "string",
          "description": "The goal's type."
        },
        "availability": {
          "description": "The goal's availability status.",
          "$ref": "#/definitions/GoalAvailability"
        },
        "links": {
          "type": "array",
          "description": "A list of hypermedia links associated with this goal",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "GoalAvailability": {
      "type": "object",
      "properties": {
        "available": {
          "type": "string",
          "description": "The availability status of the Goal or Goal Set.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | The goal or goal set is marked as active. |\n| No | The goal or goal set is marked as inactive. |\n| Restricted | The goal or goal set is marked as Restricted. |\n",
          "enum": [
            "Yes",
            "No",
            "Restricted"
          ]
        }
      }
    },
    "GoalCategory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The goal category's Id."
        },
        "name": {
          "type": "string",
          "description": "The goal category's name."
        },
        "availability": {
          "type": "object",
          "description": "The goal category's availability.",
          "title": "GoalCategoryAvailability",
          "properties": {
            "available": {
              "type": "string",
              "description": "The availability status of the goal category.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | The goal category is marked as active. |\n| No | The goal category is marked as inactive. |\n",
              "enum": [
                "Yes",
                "No"
              ]
            }
          }
        }
      }
    },
    "GoalSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The goal set's Id."
        },
        "name": {
          "type": "string",
          "description": "The goal set's name."
        },
        "typeId": {
          "type": "string",
          "description": "The goal set's type Id."
        },
        "availability": {
          "description": "The goal set's availability status.",
          "$ref": "#/definitions/GoalAvailability"
        }
      }
    },
    "GoalSetType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The goal set type's Id."
        },
        "name": {
          "type": "string",
          "description": "The goal set type's name."
        }
      }
    },
    "Grade": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user ID associated with this grade.",
          "readOnly": true
        },
        "columnId": {
          "type": "string",
          "description": "The grade column ID for this grade.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "The status of this grade.\n\n\n| Type      | Description\n | --------- | --------- |\n| Graded | Grade has been graded, corresponding to dbValue 1 |\n| NeedsGrading | Grade needs grading, corresponding to dbValue 2 |\n",
          "readOnly": true,
          "enum": [
            "Graded",
            "NeedsGrading"
          ]
        },
        "text": {
          "type": "string",
          "description": "The text representation of this grade."
        },
        "score": {
          "type": "number",
          "description": "The score associated with this grade."
        },
        "overridden": {
          "type": "string",
          "format": "date-time",
          "description": "The date on which the score associated with this grade was last overridden.  An ISODate value is only returned if this grade is currently overridden; otherwise, returns null.",
          "readOnly": true
        },
        "notes": {
          "type": "string",
          "description": "The instructor notes associated with this grade. This notes field is used for grades on manual grade columns.   That is, when column.grading.type = Manual.  It is also used when column.grading.type = Attempts and the grade has been manually overridden."
        },
        "feedback": {
          "type": "string",
          "description": "The instructor feedback associated with this grade.  This feedback is used for grades on manual grade columns.   That is, when column.grading.type = Manual.  It is also used when column.grading.type = Attempts and the grade has been manually overridden."
        },
        "exempt": {
          "type": "boolean",
          "description": "Whether the score associated with this grade is ignored when computing the course grade."
        },
        "corrupt": {
          "type": "boolean",
          "description": "Whether the grade for a calculated column could be successfully computed.",
          "readOnly": true
        }
      }
    },
    "GradeColumn": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the grade column.",
          "readOnly": true
        },
        "externalId": {
          "type": "string",
          "description": "The externalId for this grade column"
        },
        "name": {
          "type": "string",
          "description": "The name of the grade column."
        },
        "description": {
          "type": "string",
          "description": "The description of the grade column."
        },
        "externalGrade": {
          "type": "boolean",
          "description": "Whether this grade column is an external grade column."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this grade column was created.",
          "readOnly": true
        },
        "contentId": {
          "type": "string",
          "description": "For grade columns associated with a content item, the ID of the content item.\n\n**Since**: 3000.11.0",
          "readOnly": true
        },
        "score": {
          "type": "object",
          "description": "Settings controlling the numerical scoring of this grade column.",
          "title": "Score",
          "properties": {
            "possible": {
              "type": "number",
              "description": "The points possible for this grade column."
            },
            "decimalPlaces": {
              "type": "integer",
              "format": "int32",
              "description": "Decimal place precision used to display scores for this grade column.\n\n**Deprecated**: since 3200.10.0; no alternative exists since this field never fully functioned as described."
            }
          }
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling the availability/visibility of grade column data.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether this grade column is available to students\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may view the grade column. |\n| No | Students may not view the grade column. |\n",
              "enum": [
                "Yes",
                "No"
              ]
            }
          }
        },
        "grading": {
          "type": "object",
          "description": "Settings controlling whether numerical and text grade values for this grade column are calculated, determined based on attempts, or manually entered.",
          "title": "Grading",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of Grading settings for this Grade Column.\n\n\n| Type      | Description\n | --------- | --------- |\n| Attempts | Indicates score and grade values are determined based on user attempts |\n| Calculated | Indicates score and grade values are determined by applying a calculated formula. |\n| Manual | Indicates score and grade values are manually entered. |\n",
              "readOnly": true,
              "enum": [
                "Attempts",
                "Calculated",
                "Manual"
              ]
            },
            "due": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which attempts are due for the grade column."
            },
            "attemptsAllowed": {
              "type": "integer",
              "format": "int32",
              "description": "Number of attempts allowed for the grade column."
            },
            "scoringModel": {
              "type": "string",
              "description": "The scoring model for the submitted grade column attempts.\n\n\n| Type      | Description\n | --------- | --------- |\n| Last |  |\n| Highest |  |\n| Lowest |  |\n| First |  |\n| Average |  |\n",
              "enum": [
                "Last",
                "Highest",
                "Lowest",
                "First",
                "Average"
              ]
            },
            "anonymousGrading": {
              "type": "object",
              "description": "Settings for anonymous grading",
              "title": "AnonymousGrading",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of AnonymousGrading settings for this Attempts based Grade Column.\n\n\n| Type      | Description\n | --------- | --------- |\n| None | Indicates anonymous grading is not enabled. |\n| AfterAllGraded | Indicates anonymized grades are released after all attempts have been graded. |\n| Date | Indicates anonymized grades are released after a specified release date. |\n",
                  "enum": [
                    "None",
                    "AfterAllGraded",
                    "Date"
                  ]
                },
                "releaseAfter": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date after which grades are released from being anonymized, if AnonymousGrading type is 'Date'."
                }
              }
            }
          }
        }
      }
    },
    "GradeColumnV2": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the grade column.",
          "readOnly": true
        },
        "externalId": {
          "type": "string",
          "description": "The externalId for this grade column"
        },
        "externalToolId": {
          "type": "string",
          "description": "The externalId for this grade column\n\n**Since**: 3500.2.0"
        },
        "name": {
          "type": "string",
          "description": "The name of the grade column."
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the grade column. Only applicable for Classic courses. Ultra courses will simply use the `name` field.\n\n**Since**: 3300.2.0"
        },
        "description": {
          "type": "string",
          "description": "The description of the grade column."
        },
        "externalGrade": {
          "type": "boolean",
          "description": "Whether this grade column is an external grade column."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this grade column was created.",
          "readOnly": true
        },
        "contentId": {
          "type": "string",
          "description": "For grade columns associated with a content item, the ID of the content item.\n\n**Since**: 3000.11.0",
          "readOnly": true
        },
        "score": {
          "type": "object",
          "description": "Settings controlling the numerical scoring of this grade column.",
          "title": "Score",
          "properties": {
            "possible": {
              "type": "number",
              "description": "The points possible for this grade column."
            }
          }
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling the availability/visibility of grade column data.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether this grade column is available to students\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may view the grade column. |\n| No | Students may not view the grade column. |\n",
              "enum": [
                "Yes",
                "No"
              ]
            }
          }
        },
        "grading": {
          "type": "object",
          "description": "Settings controlling whether numerical and text grade values for this grade column are calculated, determined based on attempts, or manually entered.",
          "title": "Grading",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of Grading settings for this Grade Column.\n\n\n| Type      | Description\n | --------- | --------- |\n| Attempts | Indicates score and grade values are determined based on user attempts |\n| Calculated | Indicates score and grade values are determined by applying a calculated formula. |\n| Manual | Indicates score and grade values are manually entered. |\n",
              "readOnly": true,
              "enum": [
                "Attempts",
                "Calculated",
                "Manual"
              ]
            },
            "due": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which attempts are due for the grade column."
            },
            "attemptsAllowed": {
              "type": "integer",
              "format": "int32",
              "description": "Number of attempts allowed for the grade column."
            },
            "scoringModel": {
              "type": "string",
              "description": "The scoring model for the submitted grade column attempts.\n\n\n| Type      | Description\n | --------- | --------- |\n| Last |  |\n| Highest |  |\n| Lowest |  |\n| First |  |\n| Average |  |\n",
              "enum": [
                "Last",
                "Highest",
                "Lowest",
                "First",
                "Average"
              ]
            },
            "schemaId": {
              "type": "string",
              "description": "The ID of the grade schema associated with this grade column. Mutable since 3400.2.0\n\n**Since**: 3200.13.0"
            },
            "anonymousGrading": {
              "type": "object",
              "description": "Settings for anonymous grading",
              "title": "AnonymousGrading",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of AnonymousGrading settings for this Attempts based Grade Column.\n\n\n| Type      | Description\n | --------- | --------- |\n| None | Indicates anonymous grading is not enabled. |\n| AfterAllGraded | Indicates anonymized grades are released after all attempts have been graded. |\n| Date | Indicates anonymized grades are released after a specified release date. |\n",
                  "enum": [
                    "None",
                    "AfterAllGraded",
                    "Date"
                  ]
                },
                "releaseAfter": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date after which grades are released from being anonymized, if AnonymousGrading type is 'Date'."
                }
              }
            }
          }
        },
        "gradebookCategoryId": {
          "type": "string",
          "description": "The gradebook category ID for the grade column.\n\n**Since**: 3400.2.0"
        },
        "formula": {
          "description": "The formula used for determining the value for the grade column, if it is a calculated column.\n\n**Since**: 3400.5.0",
          "$ref": "#/definitions/GradingFormulaV2"
        },
        "includeInCalculations": {
          "type": "boolean",
          "description": "Indicates whether or not this column is included in gradebook calculations. Cannot be set for Ultra courses. Default: true\n\n**Since**: 3800.4.0"
        },
        "showStatisticsToStudents": {
          "type": "boolean",
          "description": "Indicates whether or not column statistics are shown to students. Read-only for Ultra courses. Default: false\n\n**Since**: 3800.4.0"
        },
        "scoreProviderHandle": {
          "type": "string",
          "description": "The score provider handle for the grade column.\n\n**Since**: 3900.3.0",
          "readOnly": true
        }
      }
    },
    "GradeNotation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary key of the grade notation.",
          "readOnly": true
        },
        "code": {
          "type": "string",
          "description": "The performance code associated with the grade notation."
        },
        "description": {
          "type": "string",
          "description": "The description of the grade notation."
        }
      }
    },
    "GradeSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id associated with this grade schema.",
          "readOnly": true
        },
        "externalId": {
          "type": "string",
          "description": "The externalId associated with this grade schema."
        },
        "title": {
          "type": "string",
          "description": "The title of this grade schema."
        },
        "description": {
          "type": "string",
          "description": "The description of this grade schema."
        },
        "scaleType": {
          "type": "string",
          "description": "The scale type of this grade schema.\n\n\n| Type      | Description\n | --------- | --------- |\n| Percent |  |\n| Score |  |\n| Tabular |  |\n| Text |  |\n| CompleteIncomplete |  |\n",
          "readOnly": true,
          "enum": [
            "Percent",
            "Score",
            "Tabular",
            "Text",
            "CompleteIncomplete"
          ]
        },
        "symbols": {
          "type": "array",
          "description": "The list of grade symbols for this grade schema. Only returned for Tabular scaleType schemas.",
          "items": {
            "$ref": "#/definitions/GradeSymbol"
          }
        }
      }
    },
    "GradeSymbol": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text of this grade symbol."
        },
        "absoluteValue": {
          "type": "number",
          "description": "The absoluteValue of this grade symbol."
        },
        "lowerBound": {
          "type": "number",
          "description": "The lowerBound of this grade symbol."
        },
        "upperBound": {
          "type": "number",
          "description": "The upperBound of this grade symbol."
        }
      }
    },
    "GradeV2": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user ID associated with this grade.",
          "readOnly": true
        },
        "columnId": {
          "type": "string",
          "description": "The grade column ID for this grade.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "The status of this grade.\n\n\n| Type      | Description\n | --------- | --------- |\n| Graded | Grade has been graded, corresponding to dbValue 1 |\n| NeedsGrading | Grade needs grading, corresponding to dbValue 2 |\n",
          "readOnly": true,
          "enum": [
            "Graded",
            "NeedsGrading"
          ]
        },
        "displayGrade": {
          "description": "The primary display grade associated with this grade. Secondary display grade is not exposed via API",
          "$ref": "#/definitions/DisplayGrade"
        },
        "text": {
          "type": "string",
          "description": "The overridden text representation of this grade. This field is only used for overriding the grade via text value"
        },
        "score": {
          "type": "number",
          "description": "The overridden score of this grade. This field is only used for overriding the grade"
        },
        "overridden": {
          "type": "string",
          "format": "date-time",
          "description": "The date on which the score associated with this grade was last overridden.  An ISODate value is only returned if this grade is currently overridden; otherwise, returns null.",
          "readOnly": true
        },
        "notes": {
          "type": "string",
          "description": "The instructor notes associated with this grade. This notes field is used for grades on manual grade columns.   That is, when column.grading.type = Manual.  It is also used when column.grading.type = Attempts and the grade has been manually overridden."
        },
        "feedback": {
          "type": "string",
          "description": "The instructor feedback associated with this grade.  This feedback is used for grades on manual grade columns.   That is, when column.grading.type = Manual.  It is also used when column.grading.type = Attempts and the grade has been manually overridden."
        },
        "exempt": {
          "type": "boolean",
          "description": "Whether the score associated with this grade is ignored when computing the course grade."
        },
        "corrupt": {
          "type": "boolean",
          "description": "Whether the grade for a calculated column could be successfully computed.",
          "readOnly": true
        },
        "gradeNotationId": {
          "type": "string",
          "description": "The Id of a Grade Notation which can be optionally associated with this Grade. If a Grade Notation is specified for this Grade, then the DisplayGrade's Text attribute will contain the Grade Notation's Description."
        },
        "changeIndex": {
          "type": "integer",
          "format": "int64",
          "description": "The change index associated with this grade which indicates what relative point in time the grade was created or last updated.",
          "readOnly": true
        }
      }
    },
    "GradebookCategory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of this gradebook category\n\n**Since**: 3400.2.0",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "The title of this gradebook category, localized if applicable\n\n**Since**: 3400.2.0"
        }
      }
    },
    "GradingFormulaV2": {
      "type": "object",
      "properties": {
        "formula": {
          "type": "string",
          "readOnly": true
        },
        "aliases": {
          "type": "object",
          "example": {
            "key1": "value1",
            "key2": "value2"
          },
          "readOnly": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "GradingPeriod": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The REST Id object that uniquely identifies this grading period for REST usage",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "The title of the grading period. Length is limited to 64 characters."
        },
        "description": {
          "type": "string",
          "description": "The description of the grading period. Length is limited to 1000 characters."
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "The relative position of the grading period to other grading periods when viewed in the grade book."
        },
        "dateMode": {
          "type": "string",
          "description": "Property may be set to DoNotUseDates to explicitly blank dates,  in which case startDate and endDate are ignored; otherwise set to  UseDates; in this case startDate and endDate must be included and valid.\n\n\n| Type      | Description\n | --------- | --------- |\n| DoNotUseDates | Do not use dates |\n| UseDates | Use dates |\n",
          "enum": [
            "DoNotUseDates",
            "UseDates"
          ]
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "description": "If start and end are set, and start is before end, these define temporal  coverage of grading period which may be used to associate GradableItems (Columns) by due date. Start dates will be persisted as starting at  00:00:00 on the submitted day."
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "description": "If start and end are set, and start is before end, these define temporal  coverage of grading period which may be used to associate GradableItems (Columns) by due date. End dates will be persisted as ending at  23:59:59 on the submitted day."
        }
      }
    },
    "Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the group.",
          "readOnly": true
        },
        "externalId": {
          "type": "string",
          "description": "An externally-defined unique ID for the group. Defaults to a random UUID if not provided during create."
        },
        "parentId": {
          "type": "string",
          "description": "The primary ID of the group's parent group set."
        },
        "name": {
          "type": "string",
          "description": "The title of the group."
        },
        "description": {
          "type": "string",
          "format": "BbML",
          "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
          "description": "The description of the group. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
        },
        "isGroupSet": {
          "type": "boolean",
          "description": "Whether or not this is a group set.\n\n**Since**: 3700.1.0",
          "readOnly": true
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the group to students.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the Group is currently available to students.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the group. |\n| No | Students may not access the group. |\n| SignupOnly | Students may only signup and see the group listed, not yet access it. |\n",
              "enum": [
                "Yes",
                "No",
                "SignupOnly"
              ]
            }
          }
        },
        "enrollment": {
          "type": "object",
          "description": "Settings controlling enrollment of the group to students.",
          "title": "Enrollment",
          "properties": {
            "type": {
              "type": "string",
              "description": "Whether the Group allows self enrollment or only enrolled by instructor. This can only be set on creation.\n\n\n| Type      | Description\n | --------- | --------- |\n| InstructorOnly | Students are added to the Group by the instructor |\n| SelfEnrollment | Students are added to the Group by self enrollment |\n",
              "readOnly": true,
              "enum": [
                "InstructorOnly",
                "SelfEnrollment"
              ]
            },
            "limit": {
              "type": "integer",
              "format": "int32",
              "description": "The maximum allowed enrollment size for self enrolled groups."
            },
            "signupSheet": {
              "type": "object",
              "description": "Settings controlling signup to the group for students. Only applicable if Enrollment.Type allows self enrollment.",
              "title": "SignupSheet",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the signup sheet"
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The description of the signup sheet This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "showMembers": {
                  "type": "boolean",
                  "description": "A boolean indicating whether or not members can be seen by others prior to signing up."
                }
              }
            }
          }
        },
        "uuid": {
          "type": "string",
          "description": "A system-wide unique identifier created by Learn\n\n**Since**: 3700.7.0",
          "readOnly": true
        }
      }
    },
    "GroupMembership": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user Id associated with this GroupMembership. See [Group Membership](#group-membership--dependency)#`getUserId`"
        },
        "user": {
          "description": "The user associated with this GroupMembership.\n\nShown when adding the query parameter: \"expand=user\". And can be filtered with the \"fields\" query parameter, for example \"fields=user.uuid\".\n\n**Since**: 3900.19.0",
          "$ref": "#/definitions/TemporaryUser"
        }
      }
    },
    "GroupV2": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the group.",
          "readOnly": true
        },
        "externalId": {
          "type": "string",
          "description": "An externally-defined unique ID for the group. Defaults to a random UUID if not provided during create."
        },
        "groupSetId": {
          "type": "string",
          "description": "The primary ID of the group's parent group set.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The title of the group."
        },
        "description": {
          "type": "string",
          "format": "BbML",
          "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
          "description": "The description of the group. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the group to students.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the Group is currently available to students.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the group. |\n| No | Students may not access the group. |\n| SignupOnly | Students may only signup and see the group listed, not yet access it. |\n",
              "enum": [
                "Yes",
                "No",
                "SignupOnly"
              ]
            }
          }
        },
        "enrollment": {
          "type": "object",
          "description": "Settings controlling enrollment of the group to students.",
          "title": "Enrollment",
          "properties": {
            "type": {
              "type": "string",
              "description": "Whether the Group allows self enrollment or only enrolled by instructor. This can only be set on creation.\n\n\n| Type      | Description\n | --------- | --------- |\n| InstructorOnly | Students are added to the Group by the instructor |\n| SelfEnrollment | Students are added to the Group by self enrollment |\n",
              "readOnly": true,
              "enum": [
                "InstructorOnly",
                "SelfEnrollment"
              ]
            },
            "limit": {
              "type": "integer",
              "format": "int32",
              "description": "The maximum allowed enrollment size for self enrolled groups."
            },
            "signupSheet": {
              "type": "object",
              "description": "Settings controlling signup to the group for students. Only applicable if Enrollment.Type allows self enrollment.",
              "title": "SignupSheet",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the signup sheet"
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
                  "description": "The description of the signup sheet This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
                },
                "showMembers": {
                  "type": "boolean",
                  "description": "A boolean indicating whether or not members can be seen by others prior to signing up."
                }
              }
            }
          }
        },
        "uuid": {
          "type": "string",
          "description": "A system-wide unique identifier created by Learn",
          "readOnly": true
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Created date of the group\n\n**Since**: 3800.8.0",
          "readOnly": true
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Modified date of the group\n\n**Since**: 3800.8.0",
          "readOnly": true
        }
      }
    },
    "HierarchyNodeCourse": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string",
          "description": "The primary ID of the Hierarchy Node",
          "readOnly": true
        },
        "courseId": {
          "type": "string",
          "description": "The primary ID of the Course",
          "readOnly": true
        },
        "course": {
          "$ref": "#/definitions/CourseV2"
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Whether or not this association represents the primary node association of the course"
        }
      }
    },
    "HierarchyNodeUser": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string",
          "description": "The primary ID of the Hierarchy Node",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "description": "The primary ID of the User",
          "readOnly": true
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "InstitutionRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id associated with this institution role.",
          "readOnly": true
        },
        "roleId": {
          "type": "string",
          "description": "The String role key associated with this institution role.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The title of this institution role."
        },
        "description": {
          "type": "string",
          "description": "The description of this institution role."
        },
        "custom": {
          "type": "boolean",
          "description": "Indicates if this institution role is custom.",
          "readOnly": true
        }
      }
    },
    "InstitutionalHierarchyTool": {
      "type": "object",
      "properties": {
        "toolId": {
          "type": "string",
          "description": "Id of the Tool.",
          "readOnly": true
        },
        "nodeId": {
          "type": "string",
          "description": "Id of the Institutional Hierarchy Node.",
          "readOnly": true
        },
        "tool": {
          "description": "Tool label containing tool`s name, application label and type.",
          "$ref": "#/definitions/ToolLabel"
        },
        "toolSettings": {
          "description": "General Tool Settings.",
          "$ref": "#/definitions/SettingsAttribute"
        },
        "guestSettings": {
          "description": "Tool Settings for a guest user.",
          "$ref": "#/definitions/SettingsAttribute"
        },
        "observerSettings": {
          "description": "Tool Settings for an observer user.",
          "$ref": "#/definitions/SettingsAttribute"
        }
      }
    },
    "LTIDomainConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID associated with this domainConfig.",
          "readOnly": true
        },
        "primaryDomain": {
          "type": "string",
          "description": "The primary domain name associated with this configuration."
        },
        "clientId": {
          "type": "string",
          "description": "The client id associated with this configuration. Only applicable for LTI versions 1.3+, excluding 2.0\n\n**Since**: 3600.0.0"
        },
        "status": {
          "type": "string",
          "description": "Enum that indicates if the set of domains associated with this config can or cannot be linked to.\n\n\n| Type      | Description\n | --------- | --------- |\n| Approved |  |\n| Excluded |  |\n| NeedsApproval |   **Since**: 3300.9.0 |\n",
          "enum": [
            "Approved",
            "Excluded",
            "NeedsApproval"
          ]
        },
        "perLinkCredentials": {
          "type": "boolean",
          "description": "If true, a new link to this LTI domain must supply its own key and secret. If false, the key and secret for this domain are already configured system-wide. This is a read-only property that is determined by the presence of a key and secret.",
          "readOnly": true
        },
        "sendUserDataType": {
          "type": "string",
          "description": "Enum indicating when user data can be sent to the LTI tool provider.\n\n\n| Type      | Description\n | --------- | --------- |\n| Never |  |\n| Sslonly |  |\n| Always |   **Since**: 3300.9.0 |\n",
          "enum": [
            "Never",
            "Sslonly",
            "Always"
          ]
        },
        "sendRole": {
          "type": "boolean",
          "description": "Whether the user's role can be sent to the LTI tool provider."
        },
        "sendName": {
          "type": "boolean",
          "description": "Whether the user's name can be sent to the LTI tool provider."
        },
        "sendEmail": {
          "type": "boolean",
          "description": "Whether the user's email address can be sent to the LTI tool provider."
        },
        "useSplashScreen": {
          "type": "boolean",
          "description": "Whether a splash screen is shown before launching the LTI link.\n\nCannot be set to true if allowMembershipService is true."
        },
        "allowMembershipService": {
          "type": "boolean",
          "description": "Whether the Tool is allowed to call the LTI Names and Roles service and get the course memberships."
        },
        "allowGradesService": {
          "type": "boolean",
          "description": "Whether the Tool is allowed to call the LTI Assignment and Grades service and manage line items and grades.\n\n**Since**: 3600.0.0"
        },
        "publicKey": {
          "type": "string",
          "description": "The public key of the tool, if specified. It is optional and can be null\n\n**Since**: 3800.17.0"
        },
        "jwksUrl": {
          "type": "string",
          "description": "The JWKS URL of the tool, if specified. It is optional and can be null\n\n**Since**: 3800.17.0"
        },
        "allowEdit": {
          "type": "boolean",
          "description": "Whether this domain configuration is editable by system admins. The \"internal\" apps created by Blackboard are non-editable. They are created or updated automatically or via Dev Portal, and they are locked to system admins or anyone with public REST access to change them.\n\n**Since**: 3800.17.0",
          "readOnly": true
        },
        "customParameters": {
          "type": "object",
          "example": {
            "key1": "value1",
            "key2": "value2"
          },
          "description": "The custom parameters for the given domain.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "description": "The name of the domain configuration\n\n**Since**: 3900.23.0"
        },
        "description": {
          "type": "string",
          "description": "The description of the domain configuration\n\n**Since**: 3900.23.0"
        }
      }
    },
    "LTIPlacement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID associated with this placement.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the placement. Not required to be unique. Maximum length of 50 characters, BAD_REQUEST error with message is returned if greater than 50 characters.",
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "description": "The description of the placement. Not required to be unique. Maximum length is 1000 characters, BAD_REQUEST error with message is returned if greater than 1000 characters.",
          "maxLength": 1000
        },
        "iconUrl": {
          "type": "string",
          "description": "The URL of the icon for this placement, if any. Not required to be unique, must be a complete and valid URL. Maximum length is 255 characters, BAD_REQUEST error with message is returned if greater than 255 characters or incomplete URL.",
          "maxLength": 255
        },
        "handle": {
          "type": "string",
          "description": "The handle that uniquely identifies this placement. Required to be unique. Maximum length is 32 characters, BAD_REQUEST error with message is returned if greater than 32 characters.",
          "readOnly": true,
          "maxLength": 32
        },
        "type": {
          "type": "string",
          "description": "The type of placement.\n\n\n| Type      | Description\n | --------- | --------- |\n| Application | Application or Student Tool Placement |\n| ContentHandler | Content Type placement |\n| ContentItemMessage | Content-item Message placement (see IMSGlobal spec)  **Since**: 3300.5.0 |\n| System | System-level Tools |\n| Administrator | Administrator-level Tools  **Since**: 3400.1.0 |\n| UltraUI | Ultra-UI Extensions  **Since**: 3700.6.0 |\n| BaseNavigation | Base Navigation |\n| CourseNavigation | Course Navigation |\n| Proctoring | Proctoring  **Since**: 3900.10.0 |\n| CloudDocument | Cloud Document Type Placement  **Since**: 3900.34.0 |\n",
          "readOnly": true,
          "enum": [
            "Application",
            "ContentHandler",
            "ContentItemMessage",
            "System",
            "Administrator",
            "UltraUI",
            "BaseNavigation",
            "CourseNavigation",
            "Proctoring",
            "CloudDocument"
          ]
        },
        "url": {
          "type": "string",
          "description": "The URL of the tool provider. Not required to be unique, must be a complete and valid URL. Maximum length is 1024 characters, BAD_REQUEST error with message is returned if greater than 1024 characters or incomplete URL.",
          "maxLength": 1024
        },
        "authorId": {
          "type": "string",
          "description": "Id of the creator of the placement\n\n**Deprecated**: since 3900.0 not used"
        },
        "instructorCreated": {
          "type": "boolean",
          "description": "Whether an instructor created the placement or not (otherwise admin)\n\n**Deprecated**: since 3900.0 not used"
        },
        "allowStudents": {
          "type": "boolean",
          "description": "Whether the course tool is visible by students, or only to non-students (e.g. instructors). Defaults to true, allowing students to see the tool."
        },
        "allowGrading": {
          "type": "boolean",
          "description": "Whether this placement can accept grades from the tool provider and a grade column can be created for it. This only applies to Enum[Type]#`ContentHandler` types. All others don't support grading and will be set to false."
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the placement.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the placement is available within the system.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n",
              "enum": [
                "Yes",
                "No"
              ]
            }
          }
        },
        "launchInNewWindow": {
          "type": "boolean",
          "description": "Whether this placement link should be opened in a new window or not."
        },
        "launchLink": {
          "type": "string",
          "description": "Generated launch link",
          "readOnly": true
        },
        "customParameters": {
          "type": "object",
          "example": {
            "key1": "value1",
            "key2": "value2"
          },
          "description": "Custom launch parameters for the tool.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "domainId": {
          "type": "string",
          "description": "The Id of the domain configuration associated with this placement\n\n**Since**: 3900.46.0",
          "readOnly": true
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "description": "Contains a target Internationalized Resource Identifiers (IRIs)",
          "readOnly": true
        },
        "rel": {
          "type": "string",
          "description": "Describes how the current context is related to the target resource.\n\nSupported values: \n\n | Relation Type | Media Type  | Functionality                                | Since    |\n |---------------|-------------|----------------------------------------------|----------|\n | \"alternate\"   |  text/html  | Links to the UI representation of a resource | 3900.0.0 |\n ",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "Title attributes for the target IRI",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Format attributes for the target IRI",
          "readOnly": true
        }
      }
    },
    "LoginAsSession": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the login as session",
          "readOnly": true
        },
        "impersonatorId": {
          "type": "string",
          "description": "The id of the user who performed the login as another user",
          "readOnly": true
        },
        "impersonatedId": {
          "type": "string",
          "description": "The id of the user who was logged in",
          "readOnly": true
        },
        "sessionId": {
          "type": "integer",
          "format": "int64",
          "description": "The login-as-user session id.",
          "readOnly": true
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the login-as-user action",
          "readOnly": true
        },
        "reason": {
          "type": "string",
          "description": "The reason to perform the login-as-user action.",
          "readOnly": true
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Id of the message.",
          "readOnly": true
        },
        "discussionId": {
          "type": "string",
          "description": "The Id of the discussion.",
          "readOnly": true
        },
        "parentId": {
          "type": "string",
          "description": "The Id of the parent message.",
          "readOnly": true
        },
        "threadId": {
          "type": "string",
          "description": "The Id of the message thread.",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "description": "The Id of the user who created the message.",
          "readOnly": true
        },
        "groupId": {
          "type": "string",
          "description": "The Id of the group, only set for group discussions.",
          "readOnly": true
        },
        "givenName": {
          "type": "string",
          "description": "Given name of the user who created the message.",
          "readOnly": true
        },
        "familyName": {
          "type": "string",
          "description": "Family name of the user who created the message.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the message.\n\n\n| Type      | Description\n | --------- | --------- |\n| Published | Message is published in the discussion and visible for all users. |\n| Deleted | Message is shown in the discussion as soft-deleted. |\n| Draft | Message is stored as a draft and only visible for the author user. |\n",
          "enum": [
            "Published",
            "Deleted",
            "Draft"
          ]
        },
        "body": {
          "type": "string",
          "description": "Body of the message, in BbML format."
        },
        "postDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date in which the message was posted.",
          "readOnly": true
        },
        "editDate": {
          "type": "string",
          "format": "date-time",
          "description": "Last Date in which the message was edited.",
          "readOnly": true
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date in which the message was created.",
          "readOnly": true
        },
        "modifiedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Last Date in which the message was modified.",
          "readOnly": true
        },
        "isRead": {
          "type": "boolean",
          "description": "Whether the user in context has read the message.",
          "readOnly": true
        }
      }
    },
    "Node": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the Node in the database",
          "readOnly": true
        },
        "externalId": {
          "type": "string",
          "description": "Node unique identifier",
          "maxLength": 256
        },
        "title": {
          "type": "string",
          "description": "Node display name",
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "description": "Node description",
          "maxLength": 1000
        },
        "parentId": {
          "type": "string",
          "description": "The ID of the Node parent in the database",
          "readOnly": true
        }
      }
    },
    "NodeAdmin": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string",
          "description": "Id of the Node.",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "description": "Id of the Node Admin User.",
          "readOnly": true
        },
        "user": {
          "description": "Expanded User object of the Node Admin. This is only a sparsely populated User object and must not be used in future calls to update a user object.",
          "$ref": "#/definitions/User"
        },
        "nodeRoles": {
          "type": "array",
          "description": "List of roles the Admin User has within the Node.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "OAuth2AccessToken": {
      "type": "object",
      "required": [
        "expires_in"
      ],
      "properties": {
        "access_token": {
          "type": "string",
          "description": "The access token issued by the authorization server."
        },
        "token_type": {
          "type": "string",
          "description": "The type of the token issued.  Value is case insensitive."
        },
        "expires_in": {
          "type": "integer",
          "format": "int32",
          "description": "The lifetime in seconds of the access token."
        },
        "refresh_token": {
          "type": "string",
          "description": "The refresh token issued by the authorization server during OAuth2 authorization code workflow if 'offline' scope was granted."
        },
        "scope": {
          "type": "string",
          "description": "The scope of the access granted by this token."
        },
        "user_id": {
          "type": "string",
          "description": "The ID of the user granted access via token"
        }
      }
    },
    "OAuth2AccessTokenInfo": {
      "type": "object",
      "properties": {
        "application_id": {
          "type": "string",
          "description": "The ID of the registered third party application."
        },
        "scope": {
          "type": "string",
          "description": "The scope of the access granted by this token."
        }
      }
    },
    "OAuth2Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "description": "Error code indicating high level source of error\n\n\n| Type      | Description\n | --------- | --------- |\n| invalid_request | The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed. |\n| invalid_client | Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method).  The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate which HTTP authentication schemes are supported.  If the client attempted to authenticate via the 'Authorization' request header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and include the 'WWW-Authenticate' response header field matching the authentication scheme used by the client. |\n| invalid_grant | The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client. |\n| unauthorized_client | The authenticated client is not authorized to use this authorization grant type. |\n| unsupported_grant_type | The authorization grant type is not supported by the authorization server. |\n| invalid_scope | The requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner. |\n| unsupported_response_type | The authorization server does not support obtaining an authorization code using this method. |\n| server_error | The authorization server encountered an unexpected condition that prevented it from fulfilling the request. (This error code is needed because a 500 Internal Server Error HTTP status code cannot be returned to the client via a HTTP redirect.) |\n",
          "enum": [
            "invalid_request",
            "invalid_client",
            "invalid_grant",
            "unauthorized_client",
            "unsupported_grant_type",
            "invalid_scope",
            "unsupported_response_type",
            "server_error"
          ]
        },
        "error_description": {
          "type": "string",
          "description": "Optional text providing additional information about the error condition."
        }
      }
    },
    "OriginalityReportingTool": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Originality Reporting Tools handler id.",
          "readOnly": true
        }
      }
    },
    "PagingInfo": {
      "type": "object",
      "properties": {
        "nextPage": {
          "type": "string",
          "description": "The URL to use to navigate to the next page of results.  This field may be omitted when there is no additional data available."
        }
      }
    },
    "PrivacyPolicy": {
      "type": "object",
      "properties": {
        "blackboard": {
          "type": "string",
          "description": "Set the URL of the Blackboard privacy policy"
        },
        "institution": {
          "type": "string",
          "description": "Set the institution's privacy policy URL"
        }
      }
    },
    "ProctoringService": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID associated with this proctoring service.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the proctoring service."
        },
        "handle": {
          "type": "string",
          "description": "The handle that uniquely identifies this proctoring service.",
          "readOnly": true
        },
        "vendor": {
          "type": "string",
          "description": "The vendors of the proctoring service.\n\n\n| Type      | Description\n | --------- | --------- |\n| Respondus | Respondus |\n| Internal | For internal testing only.  For use with tests which require multiple proctoring services. |\n| Lti | LTI Proctoring Placement  **Since**: 3900.12.0 |\n",
          "readOnly": true,
          "enum": [
            "Respondus",
            "Internal",
            "Lti"
          ]
        },
        "assessmentSettingsUrl": {
          "type": "string",
          "description": "The url for the vendors assessment settings LTI tool."
        },
        "assessmentSettingsCustomParameters": {
          "type": "object",
          "example": {
            "key1": "value1",
            "key2": "value2"
          },
          "description": "Custom launch parameters for the vendors assessment settings LTI tool.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "browserDownloadUrl": {
          "type": "string",
          "description": "The download url for the vendors secure browser."
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the proctoring service.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the proctoring service is available within the system.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n",
              "enum": [
                "Yes",
                "No"
              ]
            }
          }
        }
      }
    },
    "Pronoun": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID associated with this pronoun.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the pronoun.",
          "maxLength": 100
        },
        "status": {
          "type": "string",
          "description": "The status of the pronoun.\n\n\n| Type      | Description\n | --------- | --------- |\n| Pending |  |\n| Approved |  |\n",
          "enum": [
            "Pending",
            "Approved"
          ]
        }
      }
    },
    "Question": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the question.",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "The title of the question."
        },
        "text": {
          "type": "string",
          "description": "The main text content for the question. It may include plain and formatted text, and all kinds of content supported by the full text editor."
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "Position of the Question on the Assessment Canvas."
        },
        "points": {
          "type": "number",
          "description": "The point value for the question."
        },
        "correctResponseFeedback": {
          "type": "string",
          "description": "Feedback displayed to students when their submitted response is correct."
        },
        "incorrectResponseFeedback": {
          "type": "string",
          "description": "Feedback displayed to students when their submitted response is incorrect."
        },
        "instructorNotes": {
          "type": "string",
          "description": "Text added to the question as a note for the instructor. It is not intended to be displayed to students."
        },
        "questionHandler": {
          "$ref": "#/definitions/QuestionHandler"
        }
      }
    },
    "QuestionHandler": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of Question supported.\n\n\n| Type      | Description\n | --------- | --------- |\n| Presentation |   **Since**: 3300.9.0 |\n| EitherOr | Read Only  **Since**: 3300.9.0 |\n| Essay | Read Only  **Since**: 3300.9.0 |\n| MultipleAnswer | Read Only  **Since**: 3400.4.0 |\n| Numeric | Read Only  **Since**: 3400.4.0 |\n| MultipleChoice | Read Only  **Since**: 3400.4.0 |\n| Ordering | Read Only  **Since**: 3400.4.0 |\n| Matching | Read Only  **Since**: 3400.4.0 |\n| FillInTheBlank | Read Only  **Since**: 3400.4.0 |\n| Calculated | Read Only  **Since**: 3400.4.0 |\n| FileResponse | Read Only  **Since**: 3400.4.0 |\n| LikertOpinionScale | Read Only  **Since**: 3400.4.0 |\n| QuizBowl | Read Only  **Since**: 3400.4.0 |\n| HotSpot | Read Only  **Since**: 3400.4.0 |\n| JumbledSentence | Read Only  **Since**: 3400.4.0 |\n| FillInTheBlankPlus | Read Only  **Since**: 3400.4.0 |\n| QuestionBlock | Read Only  **Since**: 3700.2.0 |\n| PageBreak | Read Only  **Since**: 3900.51.0 |\n",
          "readOnly": true,
          "enum": [
            "Presentation",
            "EitherOr",
            "Essay",
            "MultipleAnswer",
            "Numeric",
            "MultipleChoice",
            "Ordering",
            "Matching",
            "FillInTheBlank",
            "Calculated",
            "FileResponse",
            "LikertOpinionScale",
            "QuizBowl",
            "HotSpot",
            "JumbledSentence",
            "FillInTheBlankPlus",
            "QuestionBlock",
            "PageBreak"
          ]
        }
      }
    },
    "Resource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID the Resource.",
          "readOnly": true
        },
        "xid": {
          "type": "string",
          "description": "The primary ID of the resource in xythos format.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the Resource.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the Resource; 'File' or 'Folder'\n\n\n| Type      | Description\n | --------- | --------- |\n| File |  |\n| Folder |  |\n",
          "readOnly": true,
          "enum": [
            "File",
            "Folder"
          ]
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the Resource in bytes.",
          "readOnly": true
        },
        "hasLinks": {
          "type": "boolean",
          "description": "Whether the Resource has associated Course Content links.",
          "readOnly": true
        },
        "parentId": {
          "type": "string",
          "description": "The Id of the Resource's parent folder.",
          "readOnly": true
        },
        "creatorId": {
          "type": "string",
          "description": "The Id of the User who created the Resource.",
          "readOnly": true
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this Resource was created.",
          "readOnly": true
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date this Resource was last modified.",
          "readOnly": true
        },
        "mimeType": {
          "type": "string",
          "description": "The mime-type for this Resource; only set if the Resource is of type 'File'"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The version number for this Resource; only set if the Resource is of type 'File' and is versioned.",
          "readOnly": true
        },
        "downloadUrl": {
          "type": "string",
          "description": "The downloadUrl for this Resource; only set if the Resource is of type 'File'.",
          "readOnly": true
        }
      }
    },
    "RestException": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "status": {
          "type": "string",
          "description": "Represents HTTP Status code in the response header."
        },
        "code": {
          "type": "string",
          "description": "The error code specific to a particular REST API. It is usually something that conveys information specific to the problem domain. For cases where the HTTP Status code conveys all the information required (such as a 404-Not Found) then the code may be omitted."
        },
        "message": {
          "type": "string",
          "description": "Error message that should be easy to understand and convey a concise reason as to why the error occurred"
        },
        "developerMessage": {
          "type": "string",
          "description": "Represents any technical information that a developer calling REST API might find useful."
        },
        "extraInfo": {
          "type": "string",
          "description": "Indicates a URL that anyone seeing the error message can click in a browser. The target web page should describe the error condition fully, as well as potential solutions to help them resolve the error condition"
        }
      }
    },
    "ReviewStatus": {
      "type": "object",
      "properties": {
        "contentId": {
          "type": "string",
          "description": "The ID of the content.\n\n**Since**: 3700.16.0",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "description": "The ID of the user.\n\n**Since**: 3700.16.0",
          "readOnly": true
        },
        "reviewed": {
          "type": "boolean",
          "description": "The current status of the content's 'reviewed' attribute.\n\n**Since**: 3700.16.0"
        },
        "reviewDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date that the user marked the content as reviewed\n\n**Since**: 3700.16.0",
          "readOnly": true
        }
      }
    },
    "RubricAssociation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Get the Id from this association (Ex. '_2_1')"
        },
        "rubricId": {
          "type": "string",
          "description": "Get the Id from the rubric which holds this association (Ex. '_3_1')"
        },
        "associationEntity": {
          "type": "object",
          "description": "Get the entity which represents the content holding this association. (Ex. '{   \"gradebookColumnId\": '_3_1' }')",
          "title": "AssociationEntity",
          "properties": {
            "gradebookColumnId": {
              "type": "string"
            },
            "questionId": {
              "type": "string"
            }
          }
        },
        "usedForGrading": {
          "type": "boolean",
          "description": "Tells if rubric is being used for grading content. (Ex. true)"
        },
        "rubricVisibility": {
          "type": "string",
          "description": "States rubric's information and evalution visibility for students. (Ex. \"VisibleWithScores\") Possible values are:\n\n- Disabled  - VisibleWithScores  - VisibleWithoutScores  - VisibleAfterGrading \n\n\n| Type      | Description\n | --------- | --------- |\n| Disabled | Disabled: Implies that neither the rubric nor the rubric evaluation are visible to students. Default value for student visibility. |\n| VisibleWithScores | VisibleWithScores: Implies that neither the rubric nor the rubric evaluation are visible to students. Default value for Ultra environments. |\n| VisibleWithoutScores | VisibleWithoutScores: Implies that the rubric is visible before and after grading. The rubric evaluation are not visible to students. |\n| VisibleAfterGrading | VisibleAfterGrading: Implies that the rubric is only visible after grading. The rubric evaluation is visible once is available. |\n",
          "enum": [
            "Disabled",
            "VisibleWithScores",
            "VisibleWithoutScores",
            "VisibleAfterGrading"
          ]
        },
        "links": {
          "type": "array",
          "description": "A list of hypermedia links associated with this resource",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "RubricDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Get the Id associated to this rubric (Ex. '_2_1')",
          "readOnly": true
        },
        "courseId": {
          "type": "string",
          "description": "Get the Id from the course associated to this rubric (Ex. '_3_1')",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "Get the title for this rubric (Ex. 'Sample Rubric')"
        },
        "description": {
          "type": "string",
          "description": "Get the description for this rubric (Ex. 'A rubric for base evluation template')"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Get the creation date for this rubric (Ex. '2022-01-01')",
          "readOnly": true
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Get the nearest modification date for this rubric (Ex. '2022-01-01')",
          "readOnly": true
        },
        "rubricType": {
          "type": "string",
          "description": "Get the rubric type, alas Numeric or Percentage type. (Ex. 'Numeric', 'Percentage', 'Percentage Range', 'Numeric Range')\n\n\n| Type      | Description\n | --------- | --------- |\n| Numeric |  |\n| Nonnumeric |  |\n| NumericRange |  |\n| Percentage |  |\n| PercentageRange |  |\n",
          "enum": [
            "Numeric",
            "Nonnumeric",
            "NumericRange",
            "Percentage",
            "PercentageRange"
          ]
        },
        "readOnly": {
          "type": "boolean",
          "description": "Wheater a rubric is read-only or not. Rubric assigned to an already graded content should be read-only.",
          "readOnly": true
        }
      }
    },
    "SISLogEntry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the log message",
          "readOnly": true
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "log message created date",
          "readOnly": true
        },
        "level": {
          "type": "string",
          "description": "An enumerated value of LogLevel describing log verbosity level\n\n\n| Type      | Description\n | --------- | --------- |\n| Debug |  |\n| Information |  |\n| Warning |  |\n| Error |  |\n",
          "readOnly": true,
          "enum": [
            "Debug",
            "Information",
            "Warning",
            "Error"
          ]
        },
        "message": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Session": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the session.",
          "readOnly": true
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Time when the session started.",
          "readOnly": true
        },
        "lastAccess": {
          "type": "string",
          "format": "date-time",
          "description": "Time when the session was last accessed.",
          "readOnly": true
        },
        "mobile": {
          "type": "boolean",
          "description": "Indicates whether this is a mobile session.",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "description": "Id of the logged in user.",
          "readOnly": true
        },
        "user": {
          "description": "Full information of the logged user. This is only set if the caller requests to expand the user information.",
          "$ref": "#/definitions/User"
        }
      }
    },
    "SettingsAttribute": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean",
          "description": "Whether the tool is available."
        },
        "locked": {
          "type": "boolean",
          "description": "Whether the tool is locked."
        },
        "applicable": {
          "type": "boolean",
          "description": "Whether the available and locked settings are applicable."
        }
      }
    },
    "SystemInfo": {
      "type": "object",
      "properties": {
        "siteId": {
          "type": "string",
          "description": "Gets the site ID for use when interacting with Platform services. This ID will be issued asynchronously after Learn installation and may be null initially. This value will not usually change after it is set, so callers should cache it when feasible.",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "description": "Gets the site's tenant ID for use when interacting with Platform services. This ID will be issued asynchronously after Learn installation and may be null initially. This value will not usually change after it is set, so callers should cache it when feasible.",
          "readOnly": true
        },
        "region": {
          "type": "string",
          "description": "Gets the region of this site for use when interacting with platform services. This value may be null initially after Learn installation. This value will not usually change after it is set, so callers should cache it when feasible.",
          "readOnly": true
        }
      }
    },
    "SystemRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id associated with this system role.",
          "readOnly": true
        },
        "roleId": {
          "type": "string",
          "description": "The identifier used to assign the system role.\n\nFor system generated roles, this value will be one of AccountAdmin, CourseCreator, CourseSupport, Guest, Integration, Observer, Portal, SystemAdmin, SystemSupport, or User\n\nFor custom system roles, this will be the roleId entered during the creation of the role. Allowed characters for the custom roleId's are any letter, number, period, underscore and dash.",
          "readOnly": true,
          "maxLength": 50
        },
        "name": {
          "type": "string",
          "maxLength": 64
        },
        "description": {
          "type": "string",
          "description": "The description of this system role.",
          "maxLength": 1000
        },
        "custom": {
          "type": "boolean",
          "description": "Indicates if this system role is custom.",
          "readOnly": true
        }
      }
    },
    "SystemRoleEnum": {
      "type": "string",
      "properties": {},
      "enum": [
        "SystemAdmin",
        "SystemSupport",
        "CourseCreator",
        "CourseSupport",
        "AccountAdmin",
        "Guest",
        "User",
        "Observer",
        "Integration",
        "Portal"
      ]
    },
    "SystemTask": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of this task.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type value associated with the task.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "The status of the task.\n\n\n| Type      | Description\n | --------- | --------- |\n| Queued | initial state of a task |\n| Assigned |  |\n| Running |  |\n| Complete |  |\n| CompleteWithErrors |  |\n| Incomplete |  |\n",
          "readOnly": true,
          "enum": [
            "Queued",
            "Assigned",
            "Running",
            "Complete",
            "CompleteWithErrors",
            "Incomplete"
          ]
        },
        "percentComplete": {
          "type": "integer",
          "format": "int32",
          "description": "Task progress, with 0 representing not started and 100 representing done.",
          "readOnly": true
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "description": "The date the task was started.",
          "readOnly": true
        },
        "ended": {
          "type": "string",
          "format": "date-time",
          "description": "The date the task was completed.",
          "readOnly": true
        },
        "results": {
          "description": "The results of the task execution. This may be null if execution is not yet complete or no results were saved.",
          "$ref": "#/definitions/SystemTaskResult"
        }
      }
    },
    "SystemTaskResult": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier used to determine type of the system task result."
        }
      }
    },
    "TemporaryUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the user.",
          "readOnly": true
        },
        "uuid": {
          "type": "string",
          "description": "A secondary unique ID for the user. Used by LTI launches and other inter-server operations.",
          "readOnly": true
        }
      }
    },
    "Term": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the term.",
          "readOnly": true
        },
        "externalId": {
          "type": "string",
          "description": "An externally-defined unique ID for the term.\n\nFormerly known as 'sourcedidId'.",
          "maxLength": 256
        },
        "dataSourceId": {
          "type": "string",
          "description": "The ID of the data source associated with this term.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
        },
        "name": {
          "type": "string",
          "description": "The name of the term.",
          "maxLength": 333
        },
        "description": {
          "type": "string",
          "format": "BbML",
          "example": "<!-- {\"bbMLEditorVersion\":1} --><div data-bbid=\"bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45\"> <h4>Header Large</h4>  <h5>Header Medium</h5>  <h6>Header Small</h6>  <p><strong>Bold&nbsp;</strong><em>Italic&nbsp;<span style=\"text-decoration: underline;\">Italic Underline</span></em></p> <ul>   <li><span style=\"text-decoration: underline;\"><em></em></span>Bullet 1</li>  <li>Bullet 2</li> </ul> <p>  <img src=\"@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1217_1\">   <span>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span> </p>  <p><span>&lt;braces test=\"values\" other=\"strange things\"&gt;</span></p> <p>Header Small</p> <ol>   <li>Number 1</li>   <li>Number 2</li> </ol>  <p>Just words followed by a formula</p>  <p><img align=\"middle\" alt=\"3 divided by 4 2 root of 7\" class=\"Wirisformula\" src=\"@X@EmbeddedFile.requestUrlStub@X@sessions/EA5F7FF3DF32D271D0E54AF0150D924A/anonymous/wiris/49728c9f5b4091622e2f4d183d857d35.png\" data-mathml=\"\u00abmath xmlns=\u00a8http://www.w3.org/1998/Math/MathML\u00a8\u00bb\u00abmn\u00bb3\u00ab/mn\u00bb\u00abmo\u00bb/\u00ab/mo\u00bb\u00abmn\u00bb4\u00ab/mn\u00bb\u00abmroot\u00bb\u00abmn\u00bb7\u00ab/mn\u00bb\u00abmn\u00bb2\u00ab/mn\u00bb\u00ab/mroot\u00bb\u00ab/math\u00bb\"></p> <p><a href=\"http://www.blackboard.com\">Blackboard</a></p> </div>",
          "description": "The description of the term. This field supports BbML; see <a target='_blank' href='https://docs.blackboard.com/learn/rest/advanced/bbml.html'>here</a> for more information."
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the term to students.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the term and the courses it contains are available to students.  Instructors can always access their courses.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes | Students may access the term and the courses it contains. |\n| No | Students may not access the term or the courses it contains. |\n",
              "enum": [
                "Yes",
                "No"
              ]
            },
            "duration": {
              "type": "object",
              "description": "Settings controlling the length of time the term is available.",
              "title": "Duration",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The intended length of the term.  Possible values are:\n\n\n| Type      | Description\n | --------- | --------- |\n| Continuous | The term is active on an ongoing basis. This is the default. |\n| DateRange | The term will only be available between specific date ranges. |\n| FixedNumDays | The term will only be available for a set number of days. |\n",
                  "enum": [
                    "Continuous",
                    "DateRange",
                    "FixedNumDays"
                  ]
                },
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this term starts.  May only be set if availability.duration.type is DateRange."
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this term ends.  May only be set if availability.duration.type is DateRange."
                },
                "daysOfUse": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of days courses within this term can be used.  May only be set if availability.duration.type is FixedNumDays."
                }
              }
            }
          }
        }
      }
    },
    "ToolLabel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Tool.",
          "readOnly": true
        },
        "label": {
          "type": "string",
          "description": "Application label of the Tool.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Tool Type. Supported values are: Course Type, Organization Type and Content Type.",
          "readOnly": true
        }
      }
    },
    "Topic": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "Body of the message, in BbML format."
        },
        "groupId": {
          "type": "string",
          "description": "The Id of the group, only set for group discussions.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the message.\n\n\n| Type      | Description\n | --------- | --------- |\n| Published | Message is published in the discussion and visible for all users. |\n| Deleted | Message is shown in the discussion as soft-deleted. |\n| Draft | Message is stored as a draft and only visible for the author user. |\n",
          "readOnly": true,
          "enum": [
            "Published",
            "Deleted",
            "Draft"
          ]
        },
        "id": {
          "type": "string",
          "description": "The Id of the message.",
          "readOnly": true
        },
        "discussionId": {
          "type": "string",
          "description": "The Id of the discussion.",
          "readOnly": true
        },
        "parentId": {
          "type": "string",
          "description": "The Id of the parent message.",
          "readOnly": true
        },
        "threadId": {
          "type": "string",
          "description": "The Id of the message thread.",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "description": "The Id of the user who created the message.",
          "readOnly": true
        },
        "givenName": {
          "type": "string",
          "description": "Given name of the user who created the message.",
          "readOnly": true
        },
        "familyName": {
          "type": "string",
          "description": "Family name of the user who created the message.",
          "readOnly": true
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date in which the message was created.",
          "readOnly": true
        },
        "modifiedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Last Date in which the message was modified.",
          "readOnly": true
        },
        "isRead": {
          "type": "boolean",
          "description": "Whether the user in context has read the message.",
          "readOnly": true
        },
        "postDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date in which the message was posted.",
          "readOnly": true
        },
        "editDate": {
          "type": "string",
          "format": "date-time",
          "description": "Last Date in which the message was edited.",
          "readOnly": true
        }
      }
    },
    "UploadSettings": {
      "type": "object",
      "properties": {
        "maxUploadSizeInBytes": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum size in bytes of a file uploaded via the Uploads API"
        },
        "displayRecommendedAlternatives": {
          "type": "boolean",
          "description": "Whether or not to recommend alternative storage solutions"
        },
        "recommendedAlternatives": {
          "type": "string",
          "description": "Recommended alternative storage solutions"
        },
        "displaySupportLink": {
          "type": "boolean",
          "description": "Whether or not to display support link"
        },
        "supportLink": {
          "type": "string",
          "description": "Personalized support link. Must be a complete and valid URL."
        }
      }
    },
    "UploadedFileInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the user.",
          "readOnly": true
        },
        "uuid": {
          "type": "string",
          "description": "A secondary unique ID for the user.  Used by LTI launches and other inter-server operations.",
          "readOnly": true
        },
        "externalId": {
          "type": "string",
          "description": "An optional externally-defined unique ID for the user.  Defaults to the userName.\n\nFormerly known as 'batchUid'.",
          "maxLength": 256
        },
        "dataSourceId": {
          "type": "string",
          "description": "The ID of the data source associated with this user.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
        },
        "userName": {
          "type": "string",
          "description": "The userName property, shown in the UI."
        },
        "studentId": {
          "type": "string",
          "description": "The user's student ID name or number as defined by the school or institution.",
          "maxLength": 100
        },
        "educationLevel": {
          "type": "string",
          "description": "The education level of this user.\n\n\n| Type      | Description\n | --------- | --------- |\n| K8 | Kindergarten through 8th grade |\n| HighSchool | Grades 9 through 12. |\n| Freshman | College or university freshman. |\n| Sophomore | College or university sophomore. |\n| Junior | College or university junior. |\n| Senior | College or university senior. |\n| GraduateSchool | Graduate school student. |\n| PostGraduateSchool | Post-graduate school student. |\n| Unknown | Education Level is not known, or not specified. |\n",
          "enum": [
            "K8",
            "HighSchool",
            "Freshman",
            "Sophomore",
            "Junior",
            "Senior",
            "GraduateSchool",
            "PostGraduateSchool",
            "Unknown"
          ]
        },
        "gender": {
          "type": "string",
          "description": "The gender of this user.\n\n\n| Type      | Description\n | --------- | --------- |\n| Female | Female |\n| Male | Male |\n| Other | Other  **Since**: 3900.32.0 |\n| Unknown | Gender is not known, or not specified. |\n",
          "enum": [
            "Female",
            "Male",
            "Other",
            "Unknown"
          ]
        },
        "pronouns": {
          "type": "string",
          "description": "The pronouns of this user.\n\n**Since**: 3900.27.0",
          "maxLength": 1000
        },
        "birthDate": {
          "type": "string",
          "format": "date-time",
          "description": "The birth date of this user. Only the date portion of this value has significance, since a person's birthdate represents a full day and not a moment in time. Take care to ignore the zeroed time portion when deserializing this value to ensure it's not converted to the previous calendar day if your local time zone has a negative UTC offset."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this user was created.",
          "readOnly": true
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date this user was last modified.",
          "readOnly": true
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time",
          "description": "The date this user last logged in.",
          "readOnly": true
        },
        "institutionRoleIds": {
          "type": "array",
          "description": "The primary and secondary institution roles assigned to this user. The primary institution role is the first item in the list, followed by all secondary institution roles sorted alphabetically.\n\n**Since**: 3300.3.0",
          "items": {
            "type": "string"
          }
        },
        "systemRoleIds": {
          "type": "array",
          "description": "The system roles (the administrative user roles in the UI) for this user.  The first role in this list is the user's primary system role, while the remaining are secondary system roles.",
          "items": {
            "$ref": "#/definitions/SystemRoleEnum"
          }
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the user account.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the user is available within the system. Unavailable users cannot log in.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n| Disabled |   **Since**: 3100.0.0 |\n",
              "enum": [
                "Yes",
                "No",
                "Disabled"
              ]
            }
          }
        },
        "name": {
          "type": "object",
          "description": "Properties used to build the user's display name.",
          "title": "Name",
          "properties": {
            "given": {
              "type": "string",
              "description": "The given (first) name of this user.",
              "maxLength": 100
            },
            "family": {
              "type": "string",
              "description": "The family (last) name of this user.",
              "maxLength": 100
            },
            "middle": {
              "type": "string",
              "description": "The middle name of this user.",
              "maxLength": 100
            },
            "other": {
              "type": "string",
              "description": "The other name (nickname) of this user.",
              "maxLength": 100
            },
            "suffix": {
              "type": "string",
              "description": "The suffix of this user's name.  Examples: Jr., III, PhD.",
              "maxLength": 100
            },
            "title": {
              "type": "string",
              "description": "The title of this user.  Examples: Mr., Ms., Dr.",
              "maxLength": 100
            },
            "preferredDisplayName": {
              "type": "string",
              "description": "The preferred display name of this user.\n\n**Since**: 3900.48.0\n\n\n| Type      | Description\n | --------- | --------- |\n| GivenName | User requests displaying givenName when formatting names for display. This is the default behavior. |\n| OtherName | User requests displaying otherName when formatting names for display. |\n| Both | User requests displaying otherName and givenName when formatting names for display. |\n",
              "enum": [
                "GivenName",
                "OtherName",
                "Both"
              ]
            }
          }
        },
        "job": {
          "type": "object",
          "description": "The user's job information.",
          "title": "Job",
          "properties": {
            "title": {
              "type": "string",
              "description": "The user's job title.",
              "maxLength": 100
            },
            "department": {
              "type": "string",
              "description": "The department the user belongs to.",
              "maxLength": 100
            },
            "company": {
              "type": "string",
              "description": "The company the user works for.",
              "maxLength": 100
            }
          }
        },
        "contact": {
          "type": "object",
          "description": "The user's contact information.",
          "title": "Contact",
          "properties": {
            "homePhone": {
              "type": "string",
              "description": "The user's home phone number.",
              "maxLength": 50
            },
            "mobilePhone": {
              "type": "string",
              "description": "The user's mobile phone number.",
              "maxLength": 50
            },
            "businessPhone": {
              "type": "string",
              "description": "The user's business phone number.",
              "maxLength": 50
            },
            "businessFax": {
              "type": "string",
              "description": "The user's business fax number.",
              "maxLength": 50
            },
            "email": {
              "type": "string",
              "description": "The user's email address.",
              "maxLength": 100
            },
            "institutionEmail": {
              "type": "string",
              "description": "The user's institutional email address.\n\n**Since**: 3900.19.0",
              "maxLength": 254
            },
            "webPage": {
              "type": "string",
              "description": "The URL of the user's personal website.",
              "maxLength": 100
            }
          }
        },
        "address": {
          "type": "object",
          "description": "The user's mailing address.",
          "title": "Address",
          "properties": {
            "street1": {
              "type": "string",
              "description": "The street address of the user.",
              "maxLength": 100
            },
            "street2": {
              "type": "string",
              "description": "An additional field to store the street address of the user.",
              "maxLength": 100
            },
            "city": {
              "type": "string",
              "description": "The city the user resides in.",
              "maxLength": 50
            },
            "state": {
              "type": "string",
              "description": "The state or province the user resides in.",
              "maxLength": 50
            },
            "zipCode": {
              "type": "string",
              "description": "The zip code or postal code the user resides in.",
              "maxLength": 50
            },
            "country": {
              "type": "string",
              "description": "The country the user resides in.",
              "maxLength": 50
            }
          }
        },
        "locale": {
          "type": "object",
          "description": "The user's localization settings.",
          "title": "Locale",
          "properties": {
            "id": {
              "type": "string",
              "description": "The locale specified by the user.  This locale will be used anywhere the user is allowed to customize their locale; courses may force a specific locale, overriding the user's locale preference."
            },
            "calendar": {
              "type": "string",
              "description": "The calendar type specified by the user.\n\n\n| Type      | Description\n | --------- | --------- |\n| Gregorian | Gregorian |\n| GregorianHijri | Gregorian & Hijri |\n| Hijri | Hijri |\n| HijriGregorian | Hijri & Gregorian |\n",
              "enum": [
                "Gregorian",
                "GregorianHijri",
                "Hijri",
                "HijriGregorian"
              ]
            },
            "firstDayOfWeek": {
              "type": "string",
              "description": "The user's preferred first day of the week.\n\n\n| Type      | Description\n | --------- | --------- |\n| Sunday | Sunday |\n| Monday | Monday |\n| Saturday | Saturday |\n",
              "enum": [
                "Sunday",
                "Monday",
                "Saturday"
              ]
            }
          }
        },
        "avatar": {
          "type": "object",
          "description": "The user's avatar metadata\n\n**Since**: 3800.13.0",
          "title": "Avatar",
          "properties": {
            "viewUrl": {
              "type": "string",
              "description": "The location for retrieving the user's avatar\n\n**Since**: 3800.13.0",
              "readOnly": true
            },
            "source": {
              "type": "string",
              "description": "The source of the user's avatar\n\n**Since**: 3800.13.0\n\n\n| Type      | Description\n | --------- | --------- |\n| Default | The server default avatar |\n| User | The user set his/her own avatar |\n| System | A privileged user set the user's avatar to something other than default |\n",
              "enum": [
                "Default",
                "User",
                "System"
              ]
            },
            "uploadId": {
              "type": "string",
              "description": "The upload id of the avatar image file, if referencing a newly-uploaded file\n\n**Since**: 3800.13.0"
            },
            "resourceId": {
              "type": "string",
              "description": "The resource file id of the user's avatar, if referencing a Content Collection Resource\n\n**Since**: 3900.50.0"
            }
          }
        },
        "pronunciation": {
          "type": "string",
          "description": "Pronunciation text for user's name\n\n**Since**: 3900.32.0"
        },
        "pronunciationAudio": {
          "type": "object",
          "description": "Pronunciation Audio file for user's name\n\n**Since**: 3900.32.0",
          "title": "PronunciationAudio",
          "properties": {
            "viewUrl": {
              "type": "string",
              "readOnly": true
            },
            "uploadId": {
              "type": "string"
            }
          }
        }
      }
    },
    "UserHierarchyNode": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string",
          "description": "The primary ID of the Hierarchy Node",
          "readOnly": true
        },
        "node": {
          "description": "The hierarchy node of the node/user association.\n\nShown when adding the query parameter: \"expand=node\"",
          "$ref": "#/definitions/Node"
        },
        "userId": {
          "type": "string",
          "description": "The primary ID of the User",
          "readOnly": true
        }
      }
    },
    "UserMembership": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of this course/user relationship.\n\n**Since**: 3700.14.0",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "description": "The primary ID of the user.",
          "readOnly": true
        },
        "courseId": {
          "type": "string",
          "description": "The primary ID of the course.",
          "readOnly": true
        },
        "course": {
          "description": "The course associated with the membership.\n\nShown when adding the query parameter: \"expand=course\". And can be filtered with the \"fields\" query parameter, for example \"fields=course.id,course.externalId\".\n\n**Since**: 3500.4.0",
          "$ref": "#/definitions/Course"
        },
        "childCourseId": {
          "type": "string",
          "description": "The primary ID of the child, cross-listed course, in which the user is directly enrolled. </p> This field is read only in Learn versions 3000.11.0 through 3400.0.0. As of 3400.1.0, this field is mutable.  </p> If this membership's course is a parent course in a cross-listed set, the childCourseId can be updated to move the membership enrollment between child courses and the parent course in  the set.  Patching the childCourseId to \"null\" will move the membership to the parent course.\n\n**Since**: 3000.11.0"
        },
        "dataSourceId": {
          "type": "string",
          "description": "The ID of the data source associated with this course.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this membership was created.",
          "readOnly": true
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date this membership was modified.  A membership is considered modified only if an aspect of the membership itself changes (e.g.: availability or courseRoleId), and not if the Course or User alone is modified.\n\n**Since**: 3800.8.0",
          "readOnly": true
        },
        "availability": {
          "description": "Settings controlling availability of the course membership.",
          "$ref": "#/definitions/Availability"
        },
        "courseRoleId": {
          "type": "string",
          "description": "The user's role in the course.\n\nThese roles are also valid for an organization, although they are named differently in the UI.\n\nCustom course roles may also be referenced by their IDs.\n\n\n| Type      | Description\n | --------- | --------- |\n| Instructor | Has access to all areas in the Control Panel. This role is generally given to those developing, teaching, or facilitating the class. Instructors may access a course that is unavailable to students. This role is customizable and may have different capabilities from what is documented here. |\n| BbFacilitator | The facilitator is an instructor like role. Facilitators are restricted versions of an instructor, in that they are able to deliver course instruction and administer all aspects of a pre-constructed course, but are not allowed to modify or alter the course. This role is customizable and may have different capabilities from what is documented here. |\n| TeachingAssistant | The teaching assistant role is that of a co-teacher. Teaching assistants are able to administer all areas of a course. Their only limitations are those imposed by the instructor or Blackboard administrator at your school. This role is customizable and may have different capabilities from what is documented here. |\n| CourseBuilder | Manages the course without having access to student grades. This role is customizable and may have different capabilities from what is documented here. |\n| Grader | Assists the instructor in the creation, management, delivery, and grading of items. This role is customizable and may have different capabilities from what is documented here. |\n| Student |  |\n| Guest | Has no access to the Control Panel. Areas within the course are made available to guests, but typically they can only view course materials; they do not have access to tests or assessments, and do not have permission to post on discussion boards. This role's behavior is immutable. |\n",
          "enum": [
            "Instructor",
            "BbFacilitator",
            "TeachingAssistant",
            "CourseBuilder",
            "Grader",
            "Student",
            "Guest"
          ]
        },
        "bypassCourseAvailabilityUntil": {
          "type": "string",
          "format": "date-time",
          "description": "If present, this date signals that the user associated with this membership has special access to the course regardless of the course's availability setting prior to the moment specified by this field. After the date has passed, the membership will respect the course's availability.",
          "readOnly": true
        },
        "lastAccessed": {
          "type": "string",
          "format": "date-time",
          "description": "This date signals the date this membership was used; in other words, the last date the user accessed the associated course or content contained by that course.\n\nThe recording of any activity which would lead to this date getting updated does happen asynchronously in batches. So, there may be some delay between an activity which would update this value and the availability of the new date. It is recommended when using this value to note that activity within the last 5 minutes may not be taken into account.\n\n**Since**: 3300.9.0",
          "readOnly": true
        },
        "displayOrder": {
          "type": "integer",
          "format": "int32",
          "description": "For primary instructor implementation, position or displayOrder cannot be negative, the minimum position is 1, with which is the primary instructor (aka. Leader instructor). Multiple primary instructor have the same displayOrder 1.\n\nThis operation only takes effect when the course role is non-student and non-guest roles, otherwise it's silently ignored, since <code>displayOrder</code> is for this design.\n\nAll cases violating the above restrictions will be set as <code>null</code> All display orders don't keep uniqueness, just save as-is."
        }
      }
    },
    "Version": {
      "type": "object",
      "properties": {
        "major": {
          "type": "integer",
          "format": "int32",
          "description": "The 'major' version of this product.  Typically changes for releases with significant new features or breaking API changes."
        },
        "minor": {
          "type": "integer",
          "format": "int32",
          "description": "The 'minor' version of this product.  Typically changes for releases with minor feature updates."
        },
        "patch": {
          "type": "integer",
          "format": "int32",
          "description": "The 'patch' version of this product.  Typically changes for backwards-compatible hotfixes."
        },
        "build": {
          "type": "string",
          "description": "An internal identifier for the build artifact backing this version."
        }
      }
    },
    "VersionInfo": {
      "type": "object",
      "properties": {
        "learn": {
          "description": "The version of the Learn platform.",
          "$ref": "#/definitions/Version"
        }
      }
    }
  },
  "parameters": {
    "AllowChildCourseContent.allowChildCourseContent": {
      "name": "allowChildCourseContent",
      "in": "query",
      "description": "By default, child courses of a cross listed course can not have their contents modified.  The allowChildCourseContent parameter can be sent as true in order to bypass this validation.",
      "required": false,
      "type": "boolean"
    },
    "AttendanceRecordsSortCriteria.sort": {
      "name": "sort",
      "in": "query",
      "required": false,
      "type": "string"
    },
    "ChildCourseIdParam.childCourseId": {
      "name": "childCourseId",
      "in": "path",
      "description": "The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:math101                    |\n | courseId   | courseId:math101                      |\n | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 |\n ",
      "required": true,
      "type": "string"
    },
    "ContentCollectionResourceIdParam.resourceId": {
      "name": "resourceId",
      "in": "path",
      "description": "The xythos resource ID, formatted either as a primary ID or a xythos ID. <pre class=\"markdown\"> | ID type    | Example                                          | |------------|--------------------------------------------------| | primary    | _123_1                                           | | xid        | xid-123_1-1                                      | </pre> The home directory of a specified course is supported by the following syntax. <pre class=\"markdown\"> | ID type    | Example                                          | |------------|--------------------------------------------------| | primary    | ~course:_123_1                                   | | secondary  | ~course:courseId:theCourseId                     | | secondary  | ~course:externalId:theExternalId                 | | secondary  | ~course:uuid:theUuid                             | </pre> Similarly, the home directory of a specified user is supported as follows. <pre class=\"markdown\"> | ID type    | Example                                          | |------------|--------------------------------------------------| | primary    | ~user:_123_1                                     | | secondary  | ~user:userName:theUserName                       | | secondary  | ~user:externalId:theExternalId                   | | secondary  | ~user:uuid:theUuid                               | </pre> Resource IDs for home directory of the current user in context is supported as follows. \n\n | ID type    | Example                                          |\n |------------|--------------------------------------------------|\n | special    | ~                                                |\n | special    | ~user:me                                         |\n ",
      "required": true,
      "type": "string"
    },
    "ContentCollectionResourcesSearchCriteria.type": {
      "name": "type",
      "in": "query",
      "description": "Search for Resources whose Type matches the specified value.  Valid values are 'File' and 'Folder'.\n\n\n| Type      | Description\n | --------- | --------- |\n| File |  |\n| Folder |  |\n",
      "required": false,
      "type": "string",
      "enum": [
        "File",
        "Folder"
      ]
    },
    "ContentIdParam.contentId": {
      "name": "contentId",
      "in": "path",
      "description": "The Content ID.  This may be the primary ID, or any of the following keywords: interactive, indirect, root. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | keyword    | root                                  |\n ",
      "required": true,
      "type": "string"
    },
    "CourseIdParam.courseId": {
      "name": "courseId",
      "in": "path",
      "description": "The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:math101                    |\n | courseId   | courseId:math101                      |\n | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 |\n ",
      "required": true,
      "type": "string"
    },
    "CourseMeetingsSortCriteria.sort": {
      "name": "sort",
      "in": "query",
      "required": false,
      "type": "string"
    },
    "CourseMessageSearchCriteria.folderName": {
      "name": "folderName",
      "in": "query",
      "description": "Specifies the folder name of the custom folder",
      "required": false,
      "type": "string"
    },
    "CourseMessageSearchCriteria.folderType": {
      "name": "folderType",
      "in": "query",
      "description": "Specifies the folder type, The default type is inbox\n\n\n| Type      | Description\n | --------- | --------- |\n| Inbox |  |\n| Sent |  |\n| Delete |  |\n| Custom |  |\n",
      "required": false,
      "type": "string",
      "enum": [
        "Inbox",
        "Sent",
        "Delete",
        "Custom"
      ]
    },
    "CourseNodeFilterCriteriaV1.null.course.organization": {
      "name": "course.organization",
      "in": "query",
      "description": "Filters Hierarchy Node associations based on whether it is a Node-Course or a Node-Organization association. A value of 'true' indicates that search results should be limited to Node-Organization associations. A value of 'false' indicates results should be limited to Node-Course associations. Not setting this field indicates that both Node-Course and Node-Organization associations should be returned.",
      "required": false,
      "type": "boolean"
    },
    "CriterionIdParam.criterionId": {
      "name": "criterionId",
      "in": "path",
      "description": "The adaptive release criterion ID. This should be the primary ID. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n ",
      "required": true,
      "type": "string"
    },
    "DataSourceIdParam.dataSourceId": {
      "name": "dataSourceId",
      "in": "path",
      "description": "The data source ID.  This may be the primary ID, or the secondary ID prefixed with the ID type. \n\n | ID type    | Example            |\n |------------|--------------------|\n | primary    | _123_1             |\n | externalId | externalId:math101 |\n ",
      "required": true,
      "type": "string"
    },
    "DataSourceSearchCriteriaQueryParams.externalId": {
      "name": "externalId",
      "in": "query",
      "description": "The 'batchUid' value to use as search criteria.\n\nCurrently only supports 'contains' searches.",
      "required": false,
      "type": "string"
    },
    "DefaultRowBasedPagingParams.limit": {
      "name": "limit",
      "in": "query",
      "description": "The maximum number of results to be returned. There may be less if the query returned less than the maximum.",
      "required": false,
      "type": "integer",
      "format": "int32"
    },
    "DefaultRowBasedPagingParams.offset": {
      "name": "offset",
      "in": "query",
      "description": "The number of rows to skip before beginning to return rows. An offset of 0 is the same as omitting the offset parameter.",
      "required": false,
      "type": "integer",
      "format": "int32"
    },
    "DeleteGradesParam.deleteGrades": {
      "name": "deleteGrades",
      "in": "query",
      "description": "If true and there is a grade column associated with this content, that grade column will be marked as deleted.  All attempts and grades will also be removed. If false, the grade column will not be marked as deleted.  Attempts will not be deleted and grades will be converted to manually entered grades.  Defaults to false.",
      "required": false,
      "type": "boolean"
    },
    "DiscussionIdParam.discussionId": {
      "name": "discussionId",
      "in": "path",
      "description": "The discussion ID.  This may be the primary ID. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n ",
      "required": true,
      "type": "string"
    },
    "GoalIdParam.goalId": {
      "name": "goalId",
      "in": "path",
      "description": "The Goal ID. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:Goal_1                     |\n ",
      "required": true,
      "type": "string"
    },
    "GoalSetCategoryIdParam.goalSetCategoryId": {
      "name": "goalSetCategoryId",
      "in": "path",
      "description": "The Goal Set Category ID. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n ",
      "required": true,
      "type": "string"
    },
    "GoalSetCategorySortCriterial.sort": {
      "name": "sort",
      "in": "query",
      "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"id(desc)\" Supported fields are:\n\n- id\n- name",
      "required": false,
      "type": "string"
    },
    "GoalSetIdParam.goalSetId": {
      "name": "goalSetId",
      "in": "path",
      "description": "The Goal Set ID. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n ",
      "required": true,
      "type": "string"
    },
    "GoalsSetTypesSortCriteria.sort": {
      "name": "sort",
      "in": "query",
      "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"id(desc)\" Supported fields are:\n\n- id",
      "required": false,
      "type": "string"
    },
    "GradeColumnIdParam.columnId": {
      "name": "columnId",
      "in": "path",
      "description": "The grade column ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.  The ID may also be the keyword 'finalGrade', which indicates that the course's final grade column is specified. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:column1                    |\n | finalGrade | finalGrade                            |\n ",
      "required": true,
      "type": "string"
    },
    "GradeSchemaIdParam.schemaId": {
      "name": "schemaId",
      "in": "path",
      "description": "The grade schema ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:schema1                    |\n ",
      "required": true,
      "type": "string"
    },
    "GroupIdParam.groupId": {
      "name": "groupId",
      "in": "path",
      "description": "The group ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:breakfastClub              |\n ",
      "required": true,
      "type": "string"
    },
    "IgnoreCourseMergeEnrollmentErrors.ignoreEnrollmentErrors": {
      "name": "ignoreEnrollmentErrors",
      "in": "query",
      "description": "By default, enrollment errors encountered during a course merge will result in a 409 CONFLICT response.  The ignoreEnrollmentErrors parameter can be sent as true in order to bypass enrollment errors.",
      "required": false,
      "type": "boolean"
    },
    "LogLevel.level": {
      "name": "level",
      "in": "query",
      "description": ": Logs can be filtered with level. Default level is Error. Logs will be pulled of that level and above          i.e. for level = Warning result set will have warning and error level log messages",
      "required": false,
      "type": "string",
      "enum": [
        "Debug",
        "Information",
        "Warning",
        "Error"
      ]
    },
    "MessageIdParam.messageId": {
      "name": "messageId",
      "in": "path",
      "description": "The message ID.  This may be the primary ID. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n ",
      "required": true,
      "type": "string"
    },
    "NodeIdParam.nodeId": {
      "name": "nodeId",
      "in": "path",
      "description": "The node ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:breakfastClub              |\n \n ",
      "required": true,
      "type": "string"
    },
    "OAuth2AccessTokenRequestParam.code": {
      "name": "code",
      "in": "query",
      "description": "The authorization code granted by an end user for use by an application in Oauth2 Authorization Code Workflow",
      "required": false,
      "type": "string"
    },
    "OAuth2AccessTokenRequestParam.grant_type": {
      "name": "grant_type",
      "in": "query",
      "description": "The Grant Type. Acceptable values include: 'client_credentials', 'authorization_code' (since 3200.7.0), or 'refresh_token' (since 3200.7.0).",
      "required": false,
      "type": "string",
      "enum": [
        "client_credentials",
        "authorization_code",
        "refresh_token"
      ]
    },
    "OAuth2AuthorizationCodeRequestParam.client_id": {
      "name": "client_id",
      "in": "query",
      "description": "Required. The client identifier for the registered application.",
      "required": false,
      "type": "string"
    },
    "OAuth2AuthorizationCodeRequestParam.redirect_uri": {
      "name": "redirect_uri",
      "in": "query",
      "description": "the redirectUri to send the end user to once an authorization code response is made in Oauth2 Authorization Code Workflow",
      "required": false,
      "type": "string"
    },
    "OAuth2AuthorizationCodeRequestParam.response_type": {
      "name": "response_type",
      "in": "query",
      "description": "Required. The response_type expected which must to be set to \"code\"",
      "required": false,
      "type": "string"
    },
    "OAuth2AuthorizationCodeRequestParam.scope": {
      "name": "scope",
      "in": "query",
      "description": "the space delimited scope(s) being requested for this authorization. Example value: \"read write offline\"",
      "required": false,
      "type": "string"
    },
    "OAuth2AuthorizationCodeRequestParam.state": {
      "name": "state",
      "in": "query",
      "description": "Opaque value used by client to maintain state between request and callback. Used to prevent cross-site request forgery.",
      "required": false,
      "type": "string"
    },
    "ProctoringServicesSearchCriteriaV1.null.availability.available": {
      "name": "availability.available",
      "in": "query",
      "description": "Search for proctoring services with availability.available properties that contain this value.\n\n\n| Type      | Description\n | --------- | --------- |\n| Yes |  |\n| No |  |\n",
      "required": false,
      "type": "string",
      "enum": [
        "Yes",
        "No"
      ]
    },
    "ResourceIdParam.resourceId": {
      "name": "resourceId",
      "in": "path",
      "description": "The xythos resource ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                                          |\n |------------|--------------------------------------------------|\n | primary    | _123_1                                           |\n | xid        | xid-123_1-1                                      |\n ",
      "required": true,
      "type": "string"
    },
    "ResourceSearchCriteria.type": {
      "name": "type",
      "in": "query",
      "description": "Search for Resources whose Type matches the specified value.  Valid values are 'File' and 'Folder'.\n\n\n| Type      | Description\n | --------- | --------- |\n| File |  |\n| Folder |  |\n",
      "required": false,
      "type": "string",
      "enum": [
        "File",
        "Folder"
      ]
    },
    "RowBasedPagingParams.limit": {
      "name": "limit",
      "in": "query",
      "description": "The maximum number of results to be returned. There may be less if the query returned less than the maximum.",
      "required": false,
      "type": "integer",
      "format": "int32"
    },
    "RowBasedPagingParams.offset": {
      "name": "offset",
      "in": "query",
      "description": "The number of rows to skip before beginning to return rows. An offset of 0 is the same as omitting the offset parameter.",
      "required": false,
      "type": "integer",
      "format": "int32"
    },
    "RubricAssociationIdParam.rubricAssociationId": {
      "name": "rubricAssociationId",
      "in": "path",
      "description": "The Rubric Association ID. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n ",
      "required": true,
      "type": "string"
    },
    "RubricIdParam.rubricId": {
      "name": "rubricId",
      "in": "path",
      "description": "The Rubric ID. This may be the primary ID. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n ",
      "required": true,
      "type": "string"
    },
    "RubricsSearchCriteria.created": {
      "name": "created",
      "in": "query",
      "description": "Search for rubrics with a created date relative to this value.  'createdCompare' may also be sent to control search behavior.",
      "required": false,
      "type": "string",
      "format": "date-time"
    },
    "RubricsSearchCriteria.createdCompare": {
      "name": "createdCompare",
      "in": "query",
      "description": "Used alongside the 'created' search parameter. Defaults to greaterOrEqual if not specified.\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
      "required": false,
      "type": "string",
      "enum": [
        "lessThan",
        "greaterOrEqual"
      ]
    },
    "RubricsSearchCriteria.modified": {
      "name": "modified",
      "in": "query",
      "description": "Search for rubrics with a modified date relative to this value.  'modifiedCompare' may also be sent to control search behavior.",
      "required": false,
      "type": "string",
      "format": "date-time"
    },
    "RubricsSearchCriteria.modifiedCompare": {
      "name": "modifiedCompare",
      "in": "query",
      "description": "Used alongside the 'modified' search parameter. Defaults to greaterOrEqual if not specified.\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
      "required": false,
      "type": "string",
      "enum": [
        "lessThan",
        "greaterOrEqual"
      ]
    },
    "RubricsSortCriteria.sort": {
      "name": "sort",
      "in": "query",
      "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"title(desc),created\" Supported fields are:\n\n- id\n- created\n- modified\n- title\n- description\n- rubricType",
      "required": false,
      "type": "string"
    },
    "RuleIdParam.ruleId": {
      "name": "ruleId",
      "in": "path",
      "description": "The rule ID. This should be the primary ID. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n ",
      "required": true,
      "type": "string"
    },
    "SortingQueryParams.sort": {
      "name": "sort",
      "in": "query",
      "description": "The column(s) to sort by. Format is: &lt;RestVO.propertyName&gt;(ASC&#124;DESC)... e.g. \"title(DESC),createdDate(DESC)\"",
      "required": false,
      "type": "string"
    },
    "TermIdParam.termId": {
      "name": "termId",
      "in": "path",
      "description": "The term ID.  This may be the primary ID, or the secondary ID prefixed with the ID type. \n\n | ID type    | Example                |\n |------------|------------------------|\n | primary    | _123_1                 |\n | externalId | externalId:spring.2016 |\n ",
      "required": true,
      "type": "string"
    },
    "UserIdParam.userId": {
      "name": "userId",
      "in": "path",
      "description": "The user ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:jsmith                     |\n | userName   | userName:jsmith                       |\n | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 |\n ",
      "required": true,
      "type": "string"
    },
    "UsersSearchCriteria.modifiedCompare": {
      "name": "modifiedCompare",
      "in": "query",
      "description": "Used alongside the 'modified' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\nDefaults to greaterOrEqual if not specified.\n\n\n| Type      | Description\n | --------- | --------- |\n| lessThan |  |\n| greaterOrEqual |  |\n",
      "required": false,
      "type": "string",
      "enum": [
        "lessThan",
        "greaterOrEqual"
      ]
    },
    "fields": {
      "name": "fields",
      "in": "query",
      "description": "A comma-delimited list of fields to include in the response. If not specified, all fields will be returned.",
      "required": false,
      "type": "string"
    }
  }
}
